(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pdfinfoVersion1"],{

/***/ "./src/core/src/namespaces/PDFInfo/PDFInfoVersion1.js":
/*!************************************************************!*\
  !*** ./src/core/src/namespaces/PDFInfo/PDFInfoVersion1.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./src/core/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Annotations/Widgets */ \"./src/core/src/namespaces/Annotations/Widgets/index.js\");\n/* harmony import */ var _Annotations_Rect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Annotations/Rect */ \"./src/core/src/namespaces/Annotations/Rect.js\");\n/* harmony import */ var _Annotations_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Annotations/Color */ \"./src/core/src/namespaces/Annotations/Color.js\");\n/* harmony import */ var _util_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/helpers */ \"./src/core/src/util/helpers/index.js\");\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function (exports) {\n  exports.PDFInfo = exports.PDFInfo || {};\n  var PDFInfo = exports.PDFInfo;\n\n  function parseFieldReference(parser) {\n    return String(parser.findAttribute('name'));\n  }\n\n  function parseValueElement(parser) {\n    parser.increaseDepth();\n    parser.advance();\n    var value = parser.getCharData();\n    parser.decreaseDepth();\n    return value;\n  }\n\n  function parseFieldList(parser) {\n    var result = [];\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      if (elementName === 'field') {\n        result.push(parseFieldReference(parser));\n      } else {\n        console.warn(\"unrecognised field list element: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseOptionalBoolean(attr, def) {\n    if (def) {\n      if (attr === 'false') {\n        return false;\n      }\n\n      return true;\n    }\n\n    if (attr === 'true') {\n      return true;\n    }\n\n    return false;\n  }\n\n  function parseJavaScriptAction(parser) {\n    return {\n      'name': 'JavaScript',\n      'javascript': parser.getCharData()\n    };\n  }\n\n  function parseURIAction(parser) {\n    return {\n      'name': 'URI',\n      'uri': parser.findAttribute('uri')\n    };\n  }\n\n  function parseDest(parser, getPageMatrix) {\n    var fit = parser.findAttribute('fit');\n    var result = {\n      'page': parser.findAttribute('page'),\n      'fit': fit\n    };\n\n    if (result['page'] === '0') {\n      console.warn('null page encountered in dest');\n      return result;\n    }\n\n    var pageMatrix = getPageMatrix(Number(result['page']));\n    var pt1;\n    var pt2;\n\n    switch (fit) {\n      case 'Fit':\n      case 'FitB':\n        // no extra properties\n        break;\n\n      case 'FitH':\n      case 'FitBH':\n        result['top'] = pageMatrix.mult({\n          x: 0,\n          y: parser.findAttribute('top') || 0\n        }).y;\n        break;\n\n      case 'FitV':\n      case 'FitBV':\n        result['left'] = pageMatrix.mult({\n          x: parser.findAttribute('left') || 0,\n          y: 0\n        }).x;\n        break;\n\n      case 'FitR':\n        pt1 = pageMatrix.mult({\n          x: parser.findAttribute('left') || 0,\n          y: parser.findAttribute('top') || 0\n        });\n        pt2 = pageMatrix.mult({\n          x: parser.findAttribute('right') || 0,\n          y: parser.findAttribute('bottom') || 0\n        });\n        var tmp = new _Annotations_Rect__WEBPACK_IMPORTED_MODULE_2__[\"default\"](pt1.x, pt1.y, pt2.x, pt2.y);\n        result['top'] = tmp.y1;\n        result['left'] = tmp.x1;\n        result['bottom'] = tmp.y2;\n        result['right'] = tmp.x2;\n        break;\n\n      case 'XYZ':\n        pt1 = pageMatrix.mult({\n          x: parser.findAttribute('left') || 0,\n          y: parser.findAttribute('top') || 0\n        });\n        result['top'] = pt1.y;\n        result['left'] = pt1.x;\n        result['zoom'] = parser.findAttribute('zoom') || 0;\n        break;\n\n      default:\n        console.warn(\"unknown dest fit: \".concat(fit));\n    }\n\n    return result;\n  }\n\n  function parseGoToAction(parser, getPageMatrix) {\n    var result = null;\n    parser.increaseDepth();\n\n    if (parser.advance()) {\n      result = {\n        'name': 'GoTo',\n        'dest': parseDest(parser, getPageMatrix)\n      };\n    } else {\n      console.warning('missing dest in GoTo action');\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseSubmitFormAction(parser) {\n    var result = {\n      'name': 'SubmitForm',\n      'url': parser.findAttribute('url'),\n      'format': parser.findAttribute('format'),\n      'method': parser.findAttribute('method') || 'POST',\n      'exclude': parseOptionalBoolean(parser.findAttribute('exclude'), false)\n    };\n    var flags = parser.findAttribute('flags');\n\n    if (flags) {\n      result['flags'] = flags.split(' ');\n    } else {\n      result['flags'] = [];\n    }\n\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'fields':\n          result['fields'] = parseFieldList(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised submit-form child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseResetFormAction(parser) {\n    var result = {\n      'name': 'ResetForm',\n      'exclude': parseOptionalBoolean(parser.findAttribute('exclude'), false)\n    };\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'fields':\n          result['fields'] = parseFieldList(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised reset-form child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseHideAction(parser) {\n    var result = {\n      'name': 'Hide',\n      'hide': parseOptionalBoolean(parser.findAttribute('hide'), true)\n    };\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'fields':\n          result['fields'] = parseFieldList(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised hide child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseNamedAction(parser) {\n    return {\n      'name': 'Named',\n      'action': parser.findAttribute('name')\n    };\n  }\n\n  function parseAction(parser, getPageMatrix) {\n    var elementName = parser.getElementName();\n\n    switch (elementName) {\n      case 'javascript':\n        return parseJavaScriptAction(parser);\n\n      case 'uri':\n        return parseURIAction(parser);\n\n      case 'goto':\n        return parseGoToAction(parser, getPageMatrix);\n\n      case 'submit-form':\n        return parseSubmitFormAction(parser);\n\n      case 'reset-form':\n        return parseResetFormAction(parser);\n\n      case 'hide':\n        return parseHideAction(parser);\n\n      case 'named':\n        return parseNamedAction(parser);\n\n      default:\n        console.warn(\"Encountered unexpected action type: \".concat(elementName));\n    }\n\n    return null;\n  }\n\n  function parseActions(parser, triggers, getPageMatrix) {\n    var result = {};\n\n    function isValidTrigger(t) {\n      if (triggers) {\n        return triggers.indexOf(t) !== -1;\n      }\n\n      return true;\n    }\n\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'action':\n          var trigger = parser.findAttribute('trigger');\n\n          if (isValidTrigger(trigger)) {\n            result[trigger] = [];\n            parser.increaseDepth();\n\n            while (parser.advance()) {\n              var tmp = parseAction(parser, getPageMatrix);\n\n              if (!Object(lodash__WEBPACK_IMPORTED_MODULE_0__[\"isNull\"])(tmp)) {\n                result[trigger].push(tmp);\n              }\n            }\n\n            parser.decreaseDepth();\n          } else {\n            console.warn(\"encountered unexpected trigger on field: \".concat(trigger));\n          }\n\n          break;\n\n        default:\n          console.warn(\"encountered unknown action child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseCalculationOrder(parser) {\n    var elementName = parser.getElementName();\n\n    if (elementName === 'calculation-order') {\n      return parseFieldList(parser);\n    }\n\n    return [];\n  }\n\n  function parseRect(parser, pageMatrix) {\n    var pt1 = pageMatrix.mult({\n      x: parser.findAttribute('x1') || 0,\n      y: parser.findAttribute('y1') || 0\n    });\n    var pt2 = pageMatrix.mult({\n      x: parser.findAttribute('x2') || 0,\n      y: parser.findAttribute('y2') || 0\n    });\n    var rect = new _Annotations_Rect__WEBPACK_IMPORTED_MODULE_2__[\"default\"](pt1.x, pt1.y, pt2.x, pt2.y);\n    rect.normalize();\n    return {\n      'x1': rect['x1'],\n      'y1': rect['y1'],\n      'x2': rect['x2'],\n      'y2': rect['y2']\n    };\n  }\n\n  function parseColor(parser) {\n    return new _Annotations_Color__WEBPACK_IMPORTED_MODULE_3__[\"default\"](parser.findAttribute('r') || 0, parser.findAttribute('g') || 0, parser.findAttribute('b') || 0, parser.findAttribute('a') || 1);\n  }\n\n  function parseBorder(parser) {\n    var result = {\n      'style': parser.findAttribute('style') || 'Solid',\n      'width': parser.findAttribute('width') || 1,\n      'color': [0, 0, 0]\n    };\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'color':\n          result['color'] = parseColor(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised border child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseAppearance(parser, currentAppearance) {\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'Normal':\n          PDFInfo.getOrSetKeyFromObj(currentAppearance, 'Normal').data = parser.getCharData();\n          break;\n\n        default:\n          console.warn('unexpected appearance state: ', elementName);\n      }\n    }\n\n    parser.decreaseDepth();\n  }\n\n  function parseAppearances(parser, annot) {\n    var appearancesObj = PDFInfo.getOrSetKeyFromObj(annot, 'appearances');\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      if (elementName === 'appearance') {\n        var name = parser.findAttribute('name');\n        var currentAppearance = PDFInfo.getOrSetKeyFromObj(appearancesObj, name);\n        parseAppearance(parser, currentAppearance);\n      } else {\n        console.warn(\"unexpected appearances child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n  }\n\n  function parseFont(parser, pageMatrix) {\n    function fixSize(s) {\n      var pt1 = pageMatrix.mult({\n        x: 0,\n        y: 0\n      });\n      var pt2 = pageMatrix.mult({\n        x: Number(s),\n        y: 0\n      });\n      var dx = pt1.x - pt2.x;\n      var dy = pt1.y - pt2.y;\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    var result = {\n      'name': parser.findAttribute('name'),\n      'type': parser.findAttribute('type') || 'Type1',\n      'size': fixSize(parser.findAttribute('size')) || 0,\n      'strokeColor': [0, 0, 0],\n      // default font colour to black\n      'fillColor': [0, 0, 0]\n    };\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'stroke-color':\n          result['strokeColor'] = parseColor(parser);\n          break;\n\n        case 'fill-color':\n          result['fillColor'] = parseColor(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised font child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseExtra(parser, getPageMatrix) {\n    var result = {};\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'font':\n          result.font = parseFont(parser, getPageMatrix(1));\n          break;\n\n        default:\n          console.warn(\"unrecognised extra child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseCaptions(parser) {\n    var result = {};\n    var normal = parser.findAttribute('Normal');\n\n    if (normal) {\n      result['Normal'] = normal;\n    }\n\n    var rollover = parser.findAttribute('Rollover');\n\n    if (rollover) {\n      result['Rollover'] = rollover;\n    }\n\n    var down = parser.findAttribute('Down');\n\n    if (down) {\n      result['Down'] = down;\n    }\n\n    return result;\n  }\n\n  function parseWidget(parser, getPageMatrix) {\n    var result = {\n      'border': {\n        'style': 'Solid',\n        'width': 1\n      },\n      'backgroundColor': [],\n      'fieldName': parser.findAttribute('field'),\n      'page': parser.findAttribute('page'),\n      'index': parser.findAttribute('index') || 0,\n      'rotation': parser.findAttribute('rotation') || 0,\n      'flags': []\n    };\n    var appearance = parser.findAttribute('appearance');\n\n    if (appearance) {\n      result['appearance'] = appearance;\n    }\n\n    var flags = parser.findAttribute('flags');\n\n    if (flags) {\n      result['flags'] = flags.split(' ');\n    }\n\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'rect':\n          result['rect'] = parseRect(parser, getPageMatrix(Number(result['page'])));\n          break;\n\n        case 'border':\n          result['border'] = parseBorder(parser);\n          break;\n\n        case 'background-color':\n          result['backgroundColor'] = parseColor(parser);\n          break;\n\n        case 'actions':\n          result['actions'] = parseActions(parser, ['E', 'X', 'D', 'U', 'Fo', 'Bl', 'PO', 'PC', 'PV', 'PI'], getPageMatrix);\n          break;\n\n        case 'appearances':\n          parseAppearances(parser, result);\n          break;\n\n        case 'extra':\n          var extra = parseExtra(parser, getPageMatrix);\n\n          if (extra.font) {\n            result['font'] = extra.font;\n          }\n\n          break;\n\n        case 'captions':\n          result['captions'] = parseCaptions(parser);\n          break;\n\n        default:\n          console.warn(\"unrecognised widget child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseOption(parser) {\n    var result = {\n      'value': parser.findAttribute('value')\n    };\n    var displayValue = parser.findAttribute('display-value');\n\n    if (displayValue) {\n      result['displayValue'] = displayValue;\n    }\n\n    return result;\n  }\n\n  function parseOptions(parser) {\n    var result = [];\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'option':\n          result.push(parseOption(parser));\n          break;\n\n        default:\n          console.warn(\"unrecognised options child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parseField(parser, pageMatrix) {\n    var name = parser.findAttribute('name');\n    var type = parser.findAttribute('type');\n    var properties = {\n      'type': type,\n      'quadding': parser.findAttribute('quadding') || 'Left-justified',\n      'maxLen': parser.findAttribute('max-len') || -1\n    };\n    var flags = parser.findAttribute('flags');\n\n    if (Object(lodash__WEBPACK_IMPORTED_MODULE_0__[\"isString\"])(flags)) {\n      properties['flags'] = flags.split(' ');\n    }\n\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'actions':\n          properties['actions'] = parseActions(parser, ['C', 'F', 'K', 'V'], pageMatrix);\n          break;\n\n        case 'default-value':\n          properties['defaultValue'] = parseValueElement(parser);\n          break;\n\n        case 'font':\n          properties['font'] = parseFont(parser, pageMatrix);\n          break;\n\n        case 'options':\n          properties['options'] = parseOptions(parser);\n          break;\n\n        default:\n          console.warn(\"unknown field child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return new exports.Annotations.Forms.Field(name, properties);\n  }\n\n  function createWidget(field, options) {\n    switch (field['type']) {\n      case 'Tx':\n        return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"TextWidgetAnnotation\"](field, options);\n\n      case 'Ch':\n        if (field['flags'].get('Combo')) {\n          return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"ChoiceWidgetAnnotation\"](field, options);\n        }\n\n        return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"ListWidgetAnnotation\"](field, options);\n\n      case 'Btn':\n        if (field['flags'].get('PushButton')) {\n          return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"PushButtonWidgetAnnotation\"](field, options);\n        }\n\n        if (field['flags'].get('Radio')) {\n          return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"RadioButtonWidgetAnnotation\"](field, options);\n        }\n\n        return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"CheckButtonWidgetAnnotation\"](field, options);\n\n      case 'Sig':\n        return new _Annotations_Widgets__WEBPACK_IMPORTED_MODULE_1__[\"SignatureWidgetAnnotation\"](field, options);\n\n      default:\n        console.warn(\"Unrecognised field type: \".concat(field['type']));\n    }\n\n    return null;\n  }\n\n  function parsePage(parser, getPageMatrix) {\n    var result = {\n      'number': parser.findAttribute('number')\n    };\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'actions':\n          result['actions'] = parseActions(parser, ['O', 'C'], getPageMatrix);\n          break;\n\n        default:\n          console.warn(\"unrecognised page child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n\n  function parsePages(parser, getPageMatrix) {\n    var result = [];\n    parser.increaseDepth();\n\n    while (parser.advance()) {\n      var elementName = parser.getElementName();\n\n      switch (elementName) {\n        case 'page':\n          result.push(parsePage(parser, getPageMatrix));\n          break;\n\n        default:\n          console.warn(\"unrecognised page child: \".concat(elementName));\n      }\n    }\n\n    parser.decreaseDepth();\n    return result;\n  }\n  /**\r\n   * Parses version 1 of PDFInfo using a recursive descent parser. See parse*() for individual parts of PDFInfo version 1.\r\n   */\n\n\n  function parse(parser, getPageMatrix, finished, sync) {\n    var widgetList = [];\n    var fields = {};\n    parser.increaseDepth();\n    var calculationOrder = [];\n    var documentActions = {};\n    var pages = [];\n    Object(_util_helpers__WEBPACK_IMPORTED_MODULE_4__[\"busyLoop\"])(function () {\n      var field;\n      var widget;\n      var widgetSpec;\n\n      if (parser.advance()) {\n        var elementName = parser.getElementName();\n\n        switch (elementName) {\n          case 'calculation-order':\n            calculationOrder = parseCalculationOrder(parser);\n            break;\n\n          case 'document-actions':\n            documentActions = parseActions(parser, ['Init', 'Open'], getPageMatrix);\n            break;\n\n          case 'pages':\n            pages = parsePages(parser, getPageMatrix);\n            break;\n\n          case 'field':\n            // the page matrix is only used for scaling font sizes in fields, so we currently assume any will do and pick page 1\n            field = parseField(parser, getPageMatrix(1));\n            fields[field['name']] = field;\n            break;\n\n          case 'widget':\n            widgetSpec = parseWidget(parser, getPageMatrix);\n            field = fields[widgetSpec['fieldName']];\n\n            if (field) {\n              widget = createWidget(field, widgetSpec);\n              widgetList.push(widget);\n            } else {\n              console.warn(\"ignoring widget with no corresponding field data: \".concat(widgetSpec['fieldName']));\n            }\n\n            break;\n\n          default:\n            console.warn(\"Unknown element encountered in PDFInfo: \".concat(elementName));\n        }\n\n        return true;\n      }\n\n      return false;\n    }, function () {\n      parser.decreaseDepth();\n      finished({\n        'calculationOrder': calculationOrder,\n        'widgets': widgetList,\n        'fields': fields,\n        'documentActions': documentActions,\n        'pages': pages,\n        'custom': []\n      });\n    }, sync);\n  }\n  /**\r\n   * Parsing utilities for version 1.\r\n   */\n\n\n  PDFInfo.Version1 = {\n    parse: parse,\n    parseField: parseField,\n    parseWidget: parseWidget,\n    parseCalculationOrder: parseCalculationOrder\n  };\n})(window));\n\n//# sourceURL=webpack:///./src/core/src/namespaces/PDFInfo/PDFInfoVersion1.js?");

/***/ })

}]);