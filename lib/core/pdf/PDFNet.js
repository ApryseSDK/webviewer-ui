(function(){'use strict';var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.arrayIteratorImpl=function(array){var index=0;return function(){return index<array.length?{done:!1,value:array[index++]}:{done:!0}}};$jscomp.arrayIterator=function(array){return{next:$jscomp.arrayIteratorImpl(array)}};$jscomp.makeIterator=function(iterable){var iteratorFunction="undefined"!=typeof Symbol&&Symbol.iterator&&iterable[Symbol.iterator];return iteratorFunction?iteratorFunction.call(iterable):$jscomp.arrayIterator(iterable)};
$jscomp.getGlobal=function(maybeGlobal){return"undefined"!=typeof window&&window===maybeGlobal?maybeGlobal:"undefined"!=typeof global&&null!=global?global:maybeGlobal};$jscomp.global=$jscomp.getGlobal(this);$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(target,property,descriptor){target!=Array.prototype&&target!=Object.prototype&&(target[property]=descriptor.value)};
$jscomp.polyfill=function(target,polyfill,fromLang,toLang){if(polyfill){fromLang=$jscomp.global;target=target.split(".");for(toLang=0;toLang<target.length-1;toLang++){var key=target[toLang];key in fromLang||(fromLang[key]={});fromLang=fromLang[key]}target=target[target.length-1];toLang=fromLang[target];polyfill=polyfill(toLang);polyfill!=toLang&&null!=polyfill&&$jscomp.defineProperty(fromLang,target,{configurable:!0,writable:!0,value:polyfill})}};$jscomp.FORCE_POLYFILL_PROMISE=!1;
$jscomp.polyfill("Promise",function(NativePromise){function AsyncExecutor(){this.batch_=null}function resolvingPromise(opt_value){return opt_value instanceof PolyfillPromise?opt_value:new PolyfillPromise(function(resolve,reject){resolve(opt_value)})}if(NativePromise&&!$jscomp.FORCE_POLYFILL_PROMISE)return NativePromise;AsyncExecutor.prototype.asyncExecute=function(f){null==this.batch_&&(this.batch_=[],this.asyncExecuteBatch_());this.batch_.push(f);return this};AsyncExecutor.prototype.asyncExecuteBatch_=
function(){var self=this;this.asyncExecuteFunction(function(){self.executeBatch_()})};var nativeSetTimeout=$jscomp.global.setTimeout;AsyncExecutor.prototype.asyncExecuteFunction=function(f){nativeSetTimeout(f,0)};AsyncExecutor.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var executingBatch=this.batch_;this.batch_=[];for(var i=0;i<executingBatch.length;++i){var f=executingBatch[i];executingBatch[i]=null;try{f()}catch(error){this.asyncThrow_(error)}}}this.batch_=null};AsyncExecutor.prototype.asyncThrow_=
function(exception){this.asyncExecuteFunction(function(){throw exception;})};var PolyfillPromise=function(executor){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];var resolveAndReject=this.createResolveAndReject_();try{executor(resolveAndReject.resolve,resolveAndReject.reject)}catch(e){resolveAndReject.reject(e)}};PolyfillPromise.prototype.createResolveAndReject_=function(){function firstCallWins(method){return function(x){alreadyCalled||(alreadyCalled=!0,method.call(thisPromise,x))}}
var thisPromise=this,alreadyCalled=!1;return{resolve:firstCallWins(this.resolveTo_),reject:firstCallWins(this.reject_)}};PolyfillPromise.prototype.resolveTo_=function(value){if(value===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(value instanceof PolyfillPromise)this.settleSameAsPromise_(value);else{a:switch(typeof value){case "object":var JSCompiler_inline_result=null!=value;break a;case "function":JSCompiler_inline_result=!0;break a;default:JSCompiler_inline_result=
!1}JSCompiler_inline_result?this.resolveToNonPromiseObj_(value):this.fulfill_(value)}};PolyfillPromise.prototype.resolveToNonPromiseObj_=function(obj){var thenMethod=void 0;try{thenMethod=obj.then}catch(error){this.reject_(error);return}"function"==typeof thenMethod?this.settleSameAsThenable_(thenMethod,obj):this.fulfill_(obj)};PolyfillPromise.prototype.reject_=function(reason){this.settle_(2,reason)};PolyfillPromise.prototype.fulfill_=function(value){this.settle_(1,value)};PolyfillPromise.prototype.settle_=
function(settledState,valueOrReason){if(0!=this.state_)throw Error("Cannot settle("+settledState+", "+valueOrReason+"): Promise already settled in state"+this.state_);this.state_=settledState;this.result_=valueOrReason;this.executeOnSettledCallbacks_()};PolyfillPromise.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var i=0;i<this.onSettledCallbacks_.length;++i)asyncExecutor.asyncExecute(this.onSettledCallbacks_[i]);this.onSettledCallbacks_=null}};var asyncExecutor=
new AsyncExecutor;PolyfillPromise.prototype.settleSameAsPromise_=function(promise){var methods=this.createResolveAndReject_();promise.callWhenSettled_(methods.resolve,methods.reject)};PolyfillPromise.prototype.settleSameAsThenable_=function(thenMethod,thenable){var methods=this.createResolveAndReject_();try{thenMethod.call(thenable,methods.resolve,methods.reject)}catch(error){methods.reject(error)}};PolyfillPromise.prototype.then=function(onFulfilled,onRejected){function createCallback(paramF,defaultF){return"function"==
typeof paramF?function(x){try{resolveChild(paramF(x))}catch(error){rejectChild(error)}}:defaultF}var resolveChild,rejectChild,childPromise=new PolyfillPromise(function(resolve,reject){resolveChild=resolve;rejectChild=reject});this.callWhenSettled_(createCallback(onFulfilled,resolveChild),createCallback(onRejected,rejectChild));return childPromise};PolyfillPromise.prototype.catch=function(onRejected){return this.then(void 0,onRejected)};PolyfillPromise.prototype.callWhenSettled_=function(onFulfilled,
onRejected){function callback(){switch(thisPromise.state_){case 1:onFulfilled(thisPromise.result_);break;case 2:onRejected(thisPromise.result_);break;default:throw Error("Unexpected state: "+thisPromise.state_);}}var thisPromise=this;null==this.onSettledCallbacks_?asyncExecutor.asyncExecute(callback):this.onSettledCallbacks_.push(callback)};PolyfillPromise.resolve=resolvingPromise;PolyfillPromise.reject=function(opt_reason){return new PolyfillPromise(function(resolve,reject){reject(opt_reason)})};
PolyfillPromise.race=function(thenablesOrValues){return new PolyfillPromise(function(resolve,reject){for(var iterator=$jscomp.makeIterator(thenablesOrValues),iterRec=iterator.next();!iterRec.done;iterRec=iterator.next())resolvingPromise(iterRec.value).callWhenSettled_(resolve,reject)})};PolyfillPromise.all=function(thenablesOrValues){var iterator=$jscomp.makeIterator(thenablesOrValues),iterRec=iterator.next();return iterRec.done?resolvingPromise([]):new PolyfillPromise(function(resolveAll,rejectAll){function onFulfilled(i){return function(ithResult){resultsArray[i]=
ithResult;unresolvedCount--;0==unresolvedCount&&resolveAll(resultsArray)}}var resultsArray=[],unresolvedCount=0;do resultsArray.push(void 0),unresolvedCount++,resolvingPromise(iterRec.value).callWhenSettled_(onFulfilled(resultsArray.length-1),rejectAll),iterRec=iterator.next();while(!iterRec.done)})};return PolyfillPromise},"es6","es3");
(function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={i:moduleId,l:!1,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=!0;return module.exports}var installedModules={};__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){__webpack_require__.o(exports,name)||Object.defineProperty(exports,
name,{enumerable:!0,get:getter})};__webpack_require__.r=function(exports){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});Object.defineProperty(exports,"__esModule",{value:!0})};__webpack_require__.t=function(value,mode){mode&1&&(value=__webpack_require__(value));if(mode&8||mode&4&&"object"===typeof value&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",
{enumerable:!0,value:value});if(mode&2&&"string"!=typeof value)for(var key$jscomp$0 in value)__webpack_require__.d(ns,key$jscomp$0,function(key){return value[key]}.bind(null,key$jscomp$0));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function(){return module["default"]}:function(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};
__webpack_require__.p="/core/pdf/";return __webpack_require__(__webpack_require__.s=0)})([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)},function(module,exports$jscomp$0){var createdObjects=[],lockedObjects=[],stackCallCounter=0,beginOperationCounter=0,deallocStackCounter=[],unlockStackCounter=[];(function(exports){function optionsHelpers(){return{putNumber:function(implObj,key,value){implObj[key]=0+value},jsColorToNumber:function(jsColor){return 16777216*Math.floor(jsColor.A)+
65536*Math.floor(jsColor.R)+256*Math.floor(jsColor.G)+Math.floor(jsColor.B)},jsColorFromNumber:function(number){return{A:5.9604644775390625E-8*number&255,R:((number|0)&16711680)>>>16,G:((number|0)&65280)>>>8,B:(number|0)&255}}}}var PDFNet=exports.PDFNet?exports.PDFNet:{};PDFNet.Convert=exports.PDFNet&&exports.PDFNet.Convert?exports.PDFNet.Convert:{};exports.CoreControls&&exports.CoreControls.enableFullPDF(!0);exports.isArrayBuffer=function(obj){return obj instanceof ArrayBuffer||null!=obj&&null!=
obj.constructor&&"ArrayBuffer"===obj.constructor.name&&"number"===typeof obj.byteLength};PDFNet.createDiffOptions=function(){var mImpl={},mHelpers=optionsHelpers(),ret={getAddGroupAnnots:function(){return"AddGroupAnnots"in mImpl?!!mImpl.AddGroupAnnots:!1},setAddGroupAnnots:function(value){mHelpers.putBool(mImpl,"AddGroupAnnots",value);return ret},getBlendMode:function(){return"BlendMode"in mImpl?mImpl.BlendMode:5},setBlendMode:function(value){mHelpers.putNumber(mImpl,"BlendMode",value);return ret},
getColorA:function(){return"ColorA"in mImpl?mHelpers.jsColorFromNumber(mImpl.ColorA):mHelpers.jsColorFromNumber(4291559424)},setColorA:function(value){mHelpers.putNumber(mImpl,"ColorA",mHelpers.jsColorToNumber(value));return ret},getColorB:function(){return"ColorB"in mImpl?mHelpers.jsColorFromNumber(mImpl.ColorB):mHelpers.jsColorFromNumber(4278242508)},setColorB:function(value){mHelpers.putNumber(mImpl,"ColorB",mHelpers.jsColorToNumber(value));return ret},getJsonString:function(){return JSON.stringify(mImpl)}};
return Promise.resolve(ret)};PDFNet.Iterator=function(id,type){this.name="Iterator";this.id=id;this.type=type};PDFNet.DictIterator=function(id){this.name="DictIterator";this.id=id};PDFNet.Matrix2D=function(m_a,m_b,m_c,m_d,m_h,m_v){this.name="Matrix2D";if(m_a&&"undefined"===typeof m_b)copyFunc(m_a,this);else return"undefined"===typeof m_a&&(m_a=0),"undefined"===typeof m_b&&(m_b=0),"undefined"===typeof m_c&&(m_c=0),"undefined"===typeof m_d&&(m_d=0),"undefined"===typeof m_h&&(m_h=0),"undefined"===typeof m_v&&
(m_v=0),new PDFNet.Matrix2D({m_a:m_a,m_b:m_b,m_c:m_c,m_d:m_d,m_h:m_h,m_v:m_v})};PDFNet.Field=function(leaf_node,builder){this.name="Field";if(leaf_node&&"undefined"===typeof builder)copyFunc(leaf_node,this);else return"undefined"===typeof leaf_node&&(leaf_node="0"),"undefined"===typeof builder&&(builder="0"),new PDFNet.Field({leaf_node:leaf_node,builder:builder})};PDFNet.FDFDoc=function(id){this.name="FDFDoc";this.id=id};PDFNet.FDFField=function(mp_leaf_node,mp_root_array){this.name="FDFField";if(mp_leaf_node&&
"undefined"===typeof mp_root_array)copyFunc(mp_leaf_node,this);else return"undefined"===typeof mp_leaf_node&&(mp_leaf_node="0"),"undefined"===typeof mp_root_array&&(mp_root_array="0"),new PDFNet.FDFField({mp_leaf_node:mp_leaf_node,mp_root_array:mp_root_array})};PDFNet.Filter=function(id){this.name="Filter";this.id=id};PDFNet.FilterReader=function(id){this.name="FilterReader";this.id=id};PDFNet.FilterWriter=function(id){this.name="FilterWriter";this.id=id};PDFNet.OCG=function(id){this.name="OCG";this.id=
id};PDFNet.OCGConfig=function(id){this.name="OCGConfig";this.id=id};PDFNet.OCGContext=function(id){this.name="OCGContext";this.id=id};PDFNet.OCMD=function(id){this.name="OCMD";this.id=id};PDFNet.PDFACompliance=function(id){this.name="PDFACompliance";this.id=id};PDFNet.AttrObj=function(id){this.name="AttrObj";this.id=id};PDFNet.ClassMap=function(id){this.name="ClassMap";this.id=id};PDFNet.ContentItem=function(o,p){this.name="ContentItem";if(o&&"undefined"===typeof p)copyFunc(o,this);else return"undefined"===
typeof o&&(o="0"),"undefined"===typeof p&&(p="0"),new PDFNet.ContentItem({o:o,p:p})};PDFNet.RoleMap=function(id){this.name="RoleMap";this.id=id};PDFNet.SElement=function(obj,k){this.name="SElement";if(obj&&"undefined"===typeof k)copyFunc(obj,this);else return"undefined"===typeof obj&&(obj="0"),"undefined"===typeof k&&(k="0"),new PDFNet.SElement({obj:obj,k:k})};PDFNet.STree=function(id){this.name="STree";this.id=id};PDFNet.Action=function(id){this.name="Action";this.id=id};PDFNet.KeyStrokeActionResult=
function(id){this.name="KeyStrokeActionResult";this.id=id};PDFNet.KeyStrokeEventData=function(id){this.name="KeyStrokeEventData";this.id=id};PDFNet.Page=function(id){this.name="Page";this.id=id};PDFNet.Annot=function(id){this.name="Annot";this.id=id};PDFNet.AnnotBorderStyle=function(id){this.name="AnnotBorderStyle";this.id=id};PDFNet.CaretAnnot=function(id){this.name="CaretAnnot";this.id=id};PDFNet.LineAnnot=function(id){this.name="LineAnnot";this.id=id};PDFNet.CircleAnnot=function(id){this.name=
"CircleAnnot";this.id=id};PDFNet.FileAttachmentAnnot=function(id){this.name="FileAttachmentAnnot";this.id=id};PDFNet.FreeTextAnnot=function(id){this.name="FreeTextAnnot";this.id=id};PDFNet.HighlightAnnot=function(id){this.name="HighlightAnnot";this.id=id};PDFNet.InkAnnot=function(id){this.name="InkAnnot";this.id=id};PDFNet.LinkAnnot=function(id){this.name="LinkAnnot";this.id=id};PDFNet.MarkupAnnot=function(id){this.name="MarkupAnnot";this.id=id};PDFNet.MovieAnnot=function(id){this.name="MovieAnnot";
this.id=id};PDFNet.PolyLineAnnot=function(id){this.name="PolyLineAnnot";this.id=id};PDFNet.PolygonAnnot=function(id){this.name="PolygonAnnot";this.id=id};PDFNet.PopupAnnot=function(id){this.name="PopupAnnot";this.id=id};PDFNet.RedactionAnnot=function(id){this.name="RedactionAnnot";this.id=id};PDFNet.RubberStampAnnot=function(id){this.name="RubberStampAnnot";this.id=id};PDFNet.ScreenAnnot=function(id){this.name="ScreenAnnot";this.id=id};PDFNet.SoundAnnot=function(id){this.name="SoundAnnot";this.id=
id};PDFNet.SquareAnnot=function(id){this.name="SquareAnnot";this.id=id};PDFNet.SquigglyAnnot=function(id){this.name="SquigglyAnnot";this.id=id};PDFNet.StrikeOutAnnot=function(id){this.name="StrikeOutAnnot";this.id=id};PDFNet.TextAnnot=function(id){this.name="TextAnnot";this.id=id};PDFNet.UnderlineAnnot=function(id){this.name="UnderlineAnnot";this.id=id};PDFNet.WatermarkAnnot=function(id){this.name="WatermarkAnnot";this.id=id};PDFNet.TextMarkupAnnot=function(id){this.name="TextMarkupAnnot";this.id=
id};PDFNet.WidgetAnnot=function(id){this.name="WidgetAnnot";this.id=id};PDFNet.Bookmark=function(id){this.name="Bookmark";this.id=id};PDFNet.ColorPt=function(id){this.name="ColorPt";this.id=id};PDFNet.ColorSpace=function(id){this.name="ColorSpace";this.id=id};PDFNet.ContentReplacer=function(id){this.name="ContentReplacer";this.id=id};PDFNet.DocumentConversion=function(id){this.name="DocumentConversion";this.id=id};PDFNet.ConversionMonitor=function(id){this.name="ConversionMonitor";this.id=id};PDFNet.Date=
function(year,month,day,hour,minute,second,UT,UT_hour,UT_minutes,mp_obj){this.name="Date";if(year&&"undefined"===typeof month)copyFunc(year,this);else return"undefined"===typeof year&&(year=0),"undefined"===typeof month&&(month=0),"undefined"===typeof day&&(day=0),"undefined"===typeof hour&&(hour=0),"undefined"===typeof minute&&(minute=0),"undefined"===typeof second&&(second=0),"undefined"===typeof UT&&(UT=0),"undefined"===typeof UT_hour&&(UT_hour=0),"undefined"===typeof UT_minutes&&(UT_minutes=0),
"undefined"===typeof mp_obj&&(mp_obj="0"),new PDFNet.Date({year:year,month:month,day:day,hour:hour,minute:minute,second:second,UT:UT,UT_hour:UT_hour,UT_minutes:UT_minutes,mp_obj:mp_obj})};PDFNet.Destination=function(id){this.name="Destination";this.id=id};PDFNet.GState=function(id){this.name="GState";this.id=id};PDFNet.Element=function(id){this.name="Element";this.id=id};PDFNet.ElementBuilder=function(id){this.name="ElementBuilder";this.id=id};PDFNet.ElementReader=function(id){this.name="ElementReader";
this.id=id};PDFNet.ElementWriter=function(id){this.name="ElementWriter";this.id=id};PDFNet.FileSpec=function(id){this.name="FileSpec";this.id=id};PDFNet.Flattener=function(id){this.name="Flattener";this.id=id};PDFNet.Font=function(id){this.name="Font";this.id=id};PDFNet.Function=function(id){this.name="Function";this.id=id};PDFNet.Highlights=function(id){this.name="Highlights";this.id=id};PDFNet.HTML2PDF_Proxy=function(id){this.name="HTML2PDF_Proxy";this.id=id};PDFNet.HTML2PDF_WebPageSettings=function(id){this.name=
"HTML2PDF_WebPageSettings";this.id=id};PDFNet.HTML2PDF_TOCSettings=function(id){this.name="HTML2PDF_TOCSettings";this.id=id};PDFNet.HTML2PDF=function(id){this.name="HTML2PDF";this.id=id};PDFNet.Image=function(id){this.name="Image";this.id=id};PDFNet.Optimizer=function(id){this.name="Optimizer";this.id=id};PDFNet.PageLabel=function(mp_obj,m_first_page,m_last_page){this.name="PageLabel";if(mp_obj&&"undefined"===typeof m_first_page)copyFunc(mp_obj,this);else return"undefined"===typeof mp_obj&&(mp_obj=
"0"),"undefined"===typeof m_first_page&&(m_first_page=0),"undefined"===typeof m_last_page&&(m_last_page=0),new PDFNet.PageLabel({mp_obj:mp_obj,m_first_page:m_first_page,m_last_page:m_last_page})};PDFNet.PageSet=function(id){this.name="PageSet";this.id=id};PDFNet.PatternColor=function(id){this.name="PatternColor";this.id=id};PDFNet.GeometryCollection=function(id){this.name="GeometryCollection";this.id=id};PDFNet.PDFDoc=function(id){this.name="PDFDoc";this.id=id};PDFNet.PDFDocInfo=function(id){this.name=
"PDFDocInfo";this.id=id};PDFNet.PDFDocViewPrefs=function(id){this.name="PDFDocViewPrefs";this.id=id};PDFNet.PDFRasterizer=function(id){this.name="PDFRasterizer";this.id=id};PDFNet.PDFDraw=function(id){this.name="PDFDraw";this.id=id};PDFNet.PDFNet=function(id){this.name="PDFNet";this.id=id};PDFNet.Rect=function(x1,y1,x2,y2,mp_rect){this.name="Rect";if(x1&&"undefined"===typeof y1)copyFunc(x1,this);else return"undefined"===typeof x1&&(x1=0),"undefined"===typeof y1&&(y1=0),"undefined"===typeof x2&&(x2=
0),"undefined"===typeof y2&&(y2=0),"undefined"===typeof mp_rect&&(mp_rect="0"),new PDFNet.Rect({x1:x1,y1:y1,x2:x2,y2:y2,mp_rect:mp_rect})};PDFNet.Redactor=function(id){this.name="Redactor";this.id=id};PDFNet.RedactionAppearance=function(id){this.name="RedactionAppearance";this.id=id};PDFNet.Shading=function(id){this.name="Shading";this.id=id};PDFNet.Stamper=function(id){this.name="Stamper";this.id=id};PDFNet.TextExtractor=function(id){this.name="TextExtractor";this.id=id};PDFNet.TextExtractorStyle=
function(mp_imp){this.name="TextExtractorStyle";"undefined"!==typeof mp_imp&&(this.mp_imp=mp_imp)};PDFNet.TextExtractorWord=function(line,word,end,uni,num,cur_num,mp_bld){this.name="TextExtractorWord";if(line&&"undefined"===typeof word)copyFunc(line,this);else return"undefined"===typeof line&&(line="0"),"undefined"===typeof word&&(word="0"),"undefined"===typeof end&&(end="0"),"undefined"===typeof uni&&(uni="0"),"undefined"===typeof num&&(num=0),"undefined"===typeof cur_num&&(cur_num=0),"undefined"===
typeof mp_bld&&(mp_bld="0"),new PDFNet.TextExtractorWord({line:line,word:word,end:end,uni:uni,num:num,cur_num:cur_num,mp_bld:mp_bld})};PDFNet.TextExtractorLine=function(line,uni,num,cur_num,m_direction,mp_bld){this.name="TextExtractorLine";if(line&&"undefined"===typeof uni)copyFunc(line,this);else return"undefined"===typeof line&&(line="0"),"undefined"===typeof uni&&(uni="0"),"undefined"===typeof num&&(num=0),"undefined"===typeof cur_num&&(cur_num=0),"undefined"===typeof m_direction&&(m_direction=
0),"undefined"===typeof mp_bld&&(mp_bld="0"),new PDFNet.TextExtractorLine({line:line,uni:uni,num:num,cur_num:cur_num,m_direction:m_direction,mp_bld:mp_bld})};PDFNet.TextSearch=function(id){this.name="TextSearch";this.id=id};PDFNet.NameTree=function(id){this.name="NameTree";this.id=id};PDFNet.NumberTree=function(id){this.name="NumberTree";this.id=id};PDFNet.Obj=function(id){this.name="Obj";this.id=id};PDFNet.ObjSet=function(id){this.name="ObjSet";this.id=id};PDFNet.SDFDoc=function(id){this.name="SDFDoc";
this.id=id};PDFNet.SecurityHandler=function(id){this.name="SecurityHandler";this.id=id};PDFNet.SignatureHandler=function(id){this.name="SignatureHandler";this.id=id};PDFNet.ProgressMonitor=function(id){this.name="ProgressMonitor";this.id=id};PDFNet.PDFDC=function(id){this.name="PDFDC";this.id=id};PDFNet.PDFDCEX=function(id){this.name="PDFDCEX";this.id=id};PDFNet.ChunkRenderer=function(id){this.name="ChunkRenderer";this.id=id};PDFNet.PDFView=function(id){this.name="PDFView";this.id=id};PDFNet.PDFViewCtrl=
function(id){this.name="PDFViewCtrl";this.id=id};PDFNet.ViewChangeCollection=function(id){this.name="ViewChangeCollection";this.id=id};PDFNet.ActionParameter=function(id){this.name="ActionParameter";this.id=id};PDFNet.AppearanceReferenceList=function(id){this.name="AppearanceReferenceList";this.id=id};PDFNet.OwnedBitmap=function(id){this.name="OwnedBitmap";this.id=id};PDFNet.Redaction=function(id){this.name="Redaction";this.id=id};PDFNet.QuadPoint=function(p1x,p1y,p2x,p2y,p3x,p3y,p4x,p4y){this.name=
"QuadPoint";if(p1x&&"undefined"===typeof p1y)copyFunc(p1x,this);else return"undefined"===typeof p1x&&(p1x=0),"undefined"===typeof p1y&&(p1y=0),"undefined"===typeof p2x&&(p2x=0),"undefined"===typeof p2y&&(p2y=0),"undefined"===typeof p3x&&(p3x=0),"undefined"===typeof p3y&&(p3y=0),"undefined"===typeof p4x&&(p4x=0),"undefined"===typeof p4y&&(p4y=0),new PDFNet.QuadPoint({p1x:p1x,p1y:p1y,p2x:p2x,p2y:p2y,p3x:p3x,p3y:p3y,p4x:p4x,p4y:p4y})};PDFNet.Point=function(x,y){this.name="Point";if(x&&"undefined"===
typeof y)copyFunc(x,this);else return"undefined"===typeof x&&(x=0),"undefined"===typeof y&&(y=0),new PDFNet.Point({x:x,y:y})};PDFNet.SVGOutputOptions=function(id){this.id=id;this.name="SVGOutputOptions"};PDFNet.XPSOutputOptions=function(id){this.id=id;this.name="XPSOutputOptions"};PDFNet.XODOutputOptions=function(id){this.id=id;this.name="XODOutputOptions"};PDFNet.MarkupAnnot.prototype=new PDFNet.Annot;PDFNet.TextMarkupAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.CaretAnnot.prototype=new PDFNet.MarkupAnnot;
PDFNet.LineAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.CircleAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.FileAttachmentAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.FreeTextAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.HighlightAnnot.prototype=new PDFNet.TextMarkupAnnot;PDFNet.InkAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.LinkAnnot.prototype=new PDFNet.Annot;PDFNet.MovieAnnot.prototype=new PDFNet.Annot;PDFNet.PolyLineAnnot.prototype=new PDFNet.LineAnnot;PDFNet.PolygonAnnot.prototype=new PDFNet.PolyLineAnnot;
PDFNet.PopupAnnot.prototype=new PDFNet.Annot;PDFNet.RedactionAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.RubberStampAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.ScreenAnnot.prototype=new PDFNet.Annot;PDFNet.SoundAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.SquareAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.SquigglyAnnot.prototype=new PDFNet.TextMarkupAnnot;PDFNet.StrikeOutAnnot.prototype=new PDFNet.TextMarkupAnnot;PDFNet.TextAnnot.prototype=new PDFNet.MarkupAnnot;PDFNet.UnderlineAnnot.prototype=
new PDFNet.TextMarkupAnnot;PDFNet.WatermarkAnnot.prototype=new PDFNet.Annot;PDFNet.WidgetAnnot.prototype=new PDFNet.Annot;PDFNet.Field.EventType={e_action_trigger_keystroke:13,e_action_trigger_format:14,e_action_trigger_validate:15,e_action_trigger_calculate:16};PDFNet.Field.Type={e_button:0,e_check:1,e_radio:2,e_text:3,e_choice:4,e_signature:5,e_null:6};PDFNet.Field.Flag={e_read_only:0,e_required:1,e_no_export:2,e_pushbutton_flag:3,e_radio_flag:4,e_toggle_to_off:5,e_radios_in_unison:6,e_multiline:7,
e_password:8,e_file_select:9,e_no_spellcheck:10,e_no_scroll:11,e_comb:12,e_rich_text:13,e_combo:14,e_edit:15,e_sort:16,e_multiselect:17,e_commit_on_sel_change:18};PDFNet.Field.TextJustification={e_left_justified:0,e_centered:1,e_right_justified:2};PDFNet.Filter.StdFileOpenMode={e_read_mode:0,e_write_mode:1,e_append_mode:2};PDFNet.Filter.ReferencePos={e_begin:0,e_end:2,e_cur:1};PDFNet.OCGContext.OCDrawMode={e_VisibleOC:0,e_AllOC:1,e_NoOC:2};PDFNet.OCMD.VisibilityPolicyType={e_AllOn:0,e_AnyOn:1,e_AnyOff:2,
e_AllOff:3};PDFNet.PDFACompliance.Conformance={e_Level1A:1,e_Level1B:2,e_Level2A:3,e_Level2B:4,e_Level2U:5,e_Level3A:6,e_Level3B:7,e_Level3U:8};PDFNet.PDFACompliance.ErrorCode={e_PDFA0_1_0:10,e_PDFA0_1_1:11,e_PDFA0_1_2:12,e_PDFA0_1_3:13,e_PDFA0_1_4:14,e_PDFA0_1_5:15,e_PDFA1_2_1:121,e_PDFA1_2_2:122,e_PDFA1_3_1:131,e_PDFA1_3_2:132,e_PDFA1_3_3:133,e_PDFA1_3_4:134,e_PDFA1_4_1:141,e_PDFA1_4_2:142,e_PDFA1_6_1:161,e_PDFA1_7_1:171,e_PDFA1_7_2:172,e_PDFA1_7_3:173,e_PDFA1_7_4:174,e_PDFA1_8_1:181,e_PDFA1_8_2:182,
e_PDFA1_8_3:183,e_PDFA1_8_4:184,e_PDFA1_8_5:185,e_PDFA1_8_6:186,e_PDFA1_10_1:1101,e_PDFA1_11_1:1111,e_PDFA1_11_2:1112,e_PDFA1_12_1:1121,e_PDFA1_12_2:1122,e_PDFA1_12_3:1123,e_PDFA1_12_4:1124,e_PDFA1_12_5:1125,e_PDFA1_12_6:1126,e_PDFA1_13_1:1131,e_PDFA2_2_1:221,e_PDFA2_3_2:232,e_PDFA2_3_3:233,e_PDFA2_3_3_1:2331,e_PDFA2_3_3_2:2332,e_PDFA2_3_4_1:2341,e_PDFA2_4_1:241,e_PDFA2_4_2:242,e_PDFA2_4_3:243,e_PDFA2_4_4:244,e_PDFA2_5_1:251,e_PDFA2_5_2:252,e_PDFA2_6_1:261,e_PDFA2_7_1:271,e_PDFA2_8_1:281,e_PDFA2_9_1:291,
e_PDFA2_10_1:2101,e_PDFA3_2_1:321,e_PDFA3_3_1:331,e_PDFA3_3_2:332,e_PDFA3_3_3_1:3331,e_PDFA3_3_3_2:3332,e_PDFA3_4_1:341,e_PDFA3_5_1:351,e_PDFA3_5_2:352,e_PDFA3_5_3:353,e_PDFA3_5_4:354,e_PDFA3_5_5:355,e_PDFA3_5_6:356,e_PDFA3_6_1:361,e_PDFA3_7_1:371,e_PDFA3_7_2:372,e_PDFA3_7_3:373,e_PDFA4_1:41,e_PDFA4_2:42,e_PDFA4_3:43,e_PDFA4_4:44,e_PDFA4_5:45,e_PDFA4_6:46,e_PDFA5_2_1:521,e_PDFA5_2_2:522,e_PDFA5_2_3:523,e_PDFA5_2_4:524,e_PDFA5_2_5:525,e_PDFA5_2_6:526,e_PDFA5_2_7:527,e_PDFA5_2_8:528,e_PDFA5_2_9:529,
e_PDFA5_2_10:5210,e_PDFA5_2_11:5211,e_PDFA5_3_1:531,e_PDFA5_3_2_1:5321,e_PDFA5_3_2_2:5322,e_PDFA5_3_2_3:5323,e_PDFA5_3_2_4:5324,e_PDFA5_3_2_5:5325,e_PDFA5_3_3_1:5331,e_PDFA5_3_3_2:5332,e_PDFA5_3_3_3:5333,e_PDFA5_3_3_4:5334,e_PDFA5_3_4_0:5340,e_PDFA5_3_4_1:5341,e_PDFA5_3_4_2:5342,e_PDFA5_3_4_3:5343,e_PDFA6_1_1:611,e_PDFA6_1_2:612,e_PDFA6_2_1:621,e_PDFA6_2_2:622,e_PDFA6_2_3:623,e_PDFA7_2_1:721,e_PDFA7_2_2:722,e_PDFA7_2_3:723,e_PDFA7_2_4:724,e_PDFA7_2_5:725,e_PDFA7_3_1:731,e_PDFA7_3_2:732,e_PDFA7_3_3:733,
e_PDFA7_3_4:734,e_PDFA7_3_5:735,e_PDFA7_3_6:736,e_PDFA7_3_7:737,e_PDFA7_3_8:738,e_PDFA7_3_9:739,e_PDFA7_5_1:751,e_PDFA7_8_1:781,e_PDFA7_8_2:782,e_PDFA7_8_3:783,e_PDFA7_8_4:784,e_PDFA7_8_5:785,e_PDFA7_8_6:786,e_PDFA7_8_7:787,e_PDFA7_8_8:788,e_PDFA7_8_9:789,e_PDFA7_8_10:7810,e_PDFA7_8_11:7811,e_PDFA7_8_12:7812,e_PDFA7_8_13:7813,e_PDFA7_8_14:7814,e_PDFA7_8_15:7815,e_PDFA7_8_16:7816,e_PDFA7_8_17:7817,e_PDFA7_8_18:7818,e_PDFA7_8_19:7819,e_PDFA7_8_20:7820,e_PDFA7_8_21:7821,e_PDFA7_8_22:7822,e_PDFA7_8_23:7823,
e_PDFA7_8_24:7824,e_PDFA7_8_25:7825,e_PDFA7_8_26:7826,e_PDFA7_8_27:7827,e_PDFA7_8_28:7828,e_PDFA7_8_29:7829,e_PDFA7_8_30:7830,e_PDFA7_8_31:7831,e_PDFA7_11_1:7111,e_PDFA7_11_2:7112,e_PDFA7_11_3:7113,e_PDFA7_11_4:7114,e_PDFA7_11_5:7115,e_PDFA9_1:91,e_PDFA9_2:92,e_PDFA9_3:93,e_PDFA9_4:94,e_PDFA3_8_1:381,e_PDFA8_2_2:822,e_PDFA8_3_3_1:8331,e_PDFA8_3_3_2:8332,e_PDFA8_3_4_1:8341,e_PDFA1_2_3:123,e_PDFA1_10_2:1102,e_PDFA1_10_3:1103,e_PDFA1_12_10:11210,e_PDFA1_13_5:1135,e_PDFA2_3_10:2310,e_PDFA2_4_2_10:24220,
e_PDFA2_4_2_11:24221,e_PDFA2_4_2_12:24222,e_PDFA2_4_2_13:24223,e_PDFA2_5_10:2510,e_PDFA2_5_11:2511,e_PDFA2_5_12:2512,e_PDFA2_8_3_1:2831,e_PDFA2_8_3_2:2832,e_PDFA2_8_3_3:2833,e_PDFA2_8_3_4:2834,e_PDFA2_8_3_5:2835,e_PDFA2_10_20:21020,e_PDFA2_10_21:21021,e_PDFA11_0_0:11E3,e_PDFA6_2_11_8:62118,e_PDFA8_1:81,e_PDFA_3E1:1,e_PDFA_3E2:2,e_PDFA_3E3:3,e_PDFA_LAST:4};PDFNet.ContentItem.Type={e_MCR:0,e_MCID:1,e_OBJR:2,e_Unknown:3};PDFNet.Action.Type={e_GoTo:0,e_GoToR:1,e_GoToE:2,e_Launch:3,e_Thread:4,e_URI:5,
e_Sound:6,e_Movie:7,e_Hide:8,e_Named:9,e_SubmitForm:10,e_ResetForm:11,e_ImportData:12,e_JavaScript:13,e_SetOCGState:14,e_Rendition:15,e_Trans:16,e_GoTo3DView:17,e_RichMediaExecute:18,e_Unknown:19};PDFNet.Action.FormActionFlag={e_exclude:0,e_include_no_value_fields:1,e_export_format:2,e_get_method:3,e_submit_coordinates:4,e_xfdf:5,e_include_append_saves:6,e_include_annotations:7,e_submit_pdf:8,e_canonical_format:9,e_excl_non_user_annots:10,e_excl_F_key:11,e_embed_form:13};PDFNet.Page.EventType={e_action_trigger_page_open:11,
e_action_trigger_page_close:12};PDFNet.Page.Box={e_media:0,e_crop:1,e_bleed:2,e_trim:3,e_art:4};PDFNet.Page.Rotate={e_0:0,e_90:1,e_180:2,e_270:3};PDFNet.Annot.EventType={e_action_trigger_activate:0,e_action_trigger_annot_enter:1,e_action_trigger_annot_exit:2,e_action_trigger_annot_down:3,e_action_trigger_annot_up:4,e_action_trigger_annot_focus:5,e_action_trigger_annot_blur:6,e_action_trigger_annot_page_open:7,e_action_trigger_annot_page_close:8,e_action_trigger_annot_page_visible:9,e_action_trigger_annot_page_invisible:10};
PDFNet.Annot.Type={e_Text:0,e_Link:1,e_FreeText:2,e_Line:3,e_Square:4,e_Circle:5,e_Polygon:6,e_Polyline:7,e_Highlight:8,e_Underline:9,e_Squiggly:10,e_StrikeOut:11,e_Stamp:12,e_Caret:13,e_Ink:14,e_Popup:15,e_FileAttachment:16,e_Sound:17,e_Movie:18,e_Widget:19,e_Screen:20,e_PrinterMark:21,e_TrapNet:22,e_Watermark:23,e_3D:24,e_Redact:25,e_Projection:26,e_RichMedia:27,e_Unknown:28};PDFNet.Annot.Flag={e_invisible:0,e_hidden:1,e_print:2,e_no_zoom:3,e_no_rotate:4,e_no_view:5,e_annot_read_only:6,e_locked:7,
e_toggle_no_view:8,e_locked_contents:9};PDFNet.AnnotBorderStyle.Style={e_solid:0,e_dashed:1,e_beveled:2,e_inset:3,e_underline:4};PDFNet.Annot.State={e_normal:0,e_rollover:1,e_down:2};PDFNet.LineAnnot.EndingStyle={e_Square:0,e_Circle:1,e_Diamond:2,e_OpenArrow:3,e_ClosedArrow:4,e_Butt:5,e_ROpenArrow:6,e_RClosedArrow:7,e_Slash:8,e_None:9,e_Unknown:10};PDFNet.LineAnnot.IntentType={e_LineArrow:0,e_LineDimension:1,e_null:2};PDFNet.LineAnnot.CapPos={e_Inline:0,e_Top:1};PDFNet.FileAttachmentAnnot.Icon={e_Graph:0,
e_PushPin:1,e_Paperclip:2,e_Tag:3,e_Unknown:4};PDFNet.FreeTextAnnot.IntentName={e_FreeText:0,e_FreeTextCallout:1,e_FreeTextTypeWriter:2,e_Unknown:3};PDFNet.LinkAnnot.HighlightingMode={e_none:0,e_invert:1,e_outline:2,e_push:3};PDFNet.MarkupAnnot.BorderEffect={e_None:0,e_Cloudy:1};PDFNet.PolyLineAnnot.IntentType={e_PolygonCloud:0,e_PolyLineDimension:1,e_PolygonDimension:2,e_Unknown:3};PDFNet.RedactionAnnot.QuadForm={e_LeftJustified:0,e_Centered:1,e_RightJustified:2,e_None:3};PDFNet.RubberStampAnnot.Icon=
{e_Approved:0,e_Experimental:1,e_NotApproved:2,e_AsIs:3,e_Expired:4,e_NotForPublicRelease:5,e_Confidential:6,e_Final:7,e_Sold:8,e_Departmental:9,e_ForComment:10,e_TopSecret:11,e_ForPublicRelease:12,e_Draft:13,e_Unknown:14};PDFNet.ScreenAnnot.ScaleType={e_Anamorphic:0,e_Proportional:1};PDFNet.ScreenAnnot.ScaleCondition={e_Always:0,e_WhenBigger:1,e_WhenSmaller:2,e_Never:3};PDFNet.ScreenAnnot.IconCaptionRelation={e_NoIcon:0,e_NoCaption:1,e_CBelowI:2,e_CAboveI:3,e_CRightILeft:4,e_CLeftIRight:5,e_COverlayI:6};
PDFNet.SoundAnnot.Icon={e_Speaker:0,e_Mic:1,e_Unknown:2};PDFNet.TextAnnot.Icon={e_Comment:0,e_Key:1,e_Help:2,e_NewParagraph:3,e_Paragraph:4,e_Insert:5,e_Note:6,e_Unknown:7};PDFNet.WidgetAnnot.HighlightingMode={e_none:0,e_invert:1,e_outline:2,e_push:3,e_toggle:4};PDFNet.WidgetAnnot.ScaleType={e_Anamorphic:0,e_Proportional:1};PDFNet.WidgetAnnot.IconCaptionRelation={e_NoIcon:0,e_NoCaption:1,e_CBelowI:2,e_CAboveI:3,e_CRightILeft:4,e_CLeftIRight:5,e_COverlayI:6};PDFNet.WidgetAnnot.ScaleCondition={e_Always:0,
e_WhenBigger:1,e_WhenSmaller:2,e_Never:3};PDFNet.ColorSpace.Type={e_device_gray:0,e_device_rgb:1,e_device_cmyk:2,e_cal_gray:3,e_cal_rgb:4,e_lab:5,e_icc:6,e_indexed:7,e_pattern:8,e_separation:9,e_device_n:10,e_null:11};PDFNet.DocumentConversion._Result={e_Success:0,e_Incomplete:1,e_Failure:2};PDFNet.Destination.FitType={e_XYZ:0,e_Fit:1,e_FitH:2,e_FitV:3,e_FitR:4,e_FitB:5,e_FitBH:6,e_FitBV:7};PDFNet.GState.Attribute={e_transform:0,e_rendering_intent:1,e_stroke_cs:2,e_stroke_color:3,e_fill_cs:4,e_fill_color:5,
e_line_width:6,e_line_cap:7,e_line_join:8,e_flatness:9,e_miter_limit:10,e_dash_pattern:11,e_char_spacing:12,e_word_spacing:13,e_horizontal_scale:14,e_leading:15,e_font:16,e_font_size:17,e_text_render_mode:18,e_text_rise:19,e_text_knockout:20,e_text_pos_offset:21,e_blend_mode:22,e_opacity_fill:23,e_opacity_stroke:24,e_alpha_is_shape:25,e_soft_mask:26,e_smoothnes:27,e_auto_stoke_adjust:28,e_stroke_overprint:29,e_fill_overprint:30,e_overprint_mode:31,e_transfer_funct:32,e_BG_funct:33,e_UCR_funct:34,
e_halftone:35,e_null:36};PDFNet.GState.LineCap={e_butt_cap:0,e_round_cap:1,e_square_cap:2};PDFNet.GState.LineJoin={e_miter_join:0,e_round_join:1,e_bevel_join:2};PDFNet.GState.TextRenderingMode={e_fill_text:0,e_stroke_text:1,e_fill_stroke_text:2,e_invisible_text:3,e_fill_clip_text:4,e_stroke_clip_text:5,e_fill_stroke_clip_text:6,e_clip_text:7};PDFNet.GState.RenderingIntent={e_absolute_colorimetric:0,e_relative_colorimetric:1,e_saturation:2,e_perceptual:3};PDFNet.GState.BlendMode={e_bl_compatible:0,
e_bl_normal:1,e_bl_multiply:2,e_bl_screen:3,e_bl_difference:4,e_bl_darken:5,e_bl_lighten:6,e_bl_color_dodge:7,e_bl_color_burn:8,e_bl_exclusion:9,e_bl_hard_light:10,e_bl_overlay:11,e_bl_soft_light:12,e_bl_luminosity:13,e_bl_hue:14,e_bl_saturation:15,e_bl_color:16};PDFNet.Element.Type={e_null:0,e_path:1,e_text_begin:2,e_text:3,e_text_new_line:4,e_text_end:5,e_image:6,e_inline_image:7,e_shading:8,e_form:9,e_group_begin:10,e_group_end:11,e_marked_content_begin:12,e_marked_content_end:13,e_marked_content_point:14};
PDFNet.Element.PathSegmentType={e_moveto:1,e_lineto:2,e_cubicto:3,e_conicto:4,e_rect:5,e_closepath:6};PDFNet.ElementWriter.WriteMode={e_underlay:0,e_overlay:1,e_replacement:2};PDFNet.Flattener.Threshold={e_threshold_very_strict:0,e_threshold_strict:1,e_threshold_default:2,e_threshold_keep_most:3,e_threshold_keep_all:4};PDFNet.Flattener.Mode={e_mode_simple:0,e_mode_fast:1};PDFNet.Font.StandardType1Font={e_times_roman:0,e_times_bold:1,e_times_italic:2,e_times_bold_italic:3,e_helvetica:4,e_helvetica_bold:5,
e_helvetica_oblique:6,e_helvetica_bold_oblique:7,e_courier:8,e_courier_bold:9,e_courier_oblique:10,e_courier_bold_oblique:11,e_symbol:12,e_zapf_dingbats:13,e_null:14};PDFNet.Font.Encoding={e_IdentityH:0,e_Indices:1};PDFNet.Font.Type={e_Type1:0,e_TrueType:1,e_MMType1:2,e_Type3:3,e_Type0:4,e_CIDType0:5,e_CIDType2:6};PDFNet.Function.Type={e_sampled:0,e_exponential:2,e_stitching:3,e_postscript:4};PDFNet.HTML2PDF._WebPageSettings_ErrorHandling={e_WebPageSettings_abort:0,e_WebPageSettings_skip:1,e_WebPageSettings_ignore:2};
PDFNet.HTML2PDF._Proxy_Type={e_Proxy_default:0,e_Proxy_none:1,e_Proxy_http:2,e_Proxy_socks5:3};PDFNet.Image.InputFilter={e_none:0,e_jpeg:1,e_jp2:2,e_flate:3,e_g3:4,e_g4:5,e_ascii_hex:6};PDFNet.Optimizer._ImageSettings_CompressionMode={e_ImageSettings_retain:0,e_ImageSettings_flate:1,e_ImageSettings_jpeg:2,e_ImageSettings_jpeg2000:3,e_ImageSettings_none:4};PDFNet.Optimizer._ImageSettings_DownsampleMode={e_ImageSettings_off:0,e_ImageSettings_default:1};PDFNet.Optimizer._MonoImageSettings_CompressionMode=
{e_MonoImageSettings_jbig2:0,e_MonoImageSettings_flate:1,e_MonoImageSettings_none:2};PDFNet.Optimizer._MonoImageSettings_DownsampleMode={e_MonoImageSettings_off:0,e_MonoImageSettings_default:1};PDFNet.PageLabel.Style={e_decimal:0,e_roman_uppercase:1,e_roman_lowercase:2,e_alphabetic_uppercase:3,e_alphabetic_lowercase:4,e_none:5};PDFNet.PageSet.Filter={e_all:0,e_even:1,e_odd:2};PDFNet.PatternColor.Type={e_uncolored_tiling_pattern:0,e_colored_tiling_pattern:1,e_shading:2,e_null:3};PDFNet.PatternColor.TilingType=
{e_constant_spacing:0,e_no_distortion:1,e_constant_spacing_fast_fill:2};PDFNet.PDFDoc.EventType={e_action_trigger_doc_will_close:17,e_action_trigger_doc_will_save:18,e_action_trigger_doc_did_save:19,e_action_trigger_doc_will_print:20,e_action_trigger_doc_did_print:21};PDFNet.PDFDoc.InsertFlag={e_none:0,e_insert_bookmark:1};PDFNet.PDFDoc.ExtractFlag={e_forms_only:0,e_annots_only:1,e_both:2};PDFNet.PDFDocViewPrefs.PageMode={e_UseNone:0,e_UseThumbs:1,e_UseBookmarks:2,e_FullScreen:3,e_UseOC:4,e_UseAttachments:5};
PDFNet.PDFDocViewPrefs.PageLayout={e_Default:0,e_SinglePage:1,e_OneColumn:2,e_TwoColumnLeft:3,e_TwoColumnRight:4,e_TwoPageLeft:5,e_TwoPageRight:6};PDFNet.PDFDocViewPrefs.ViewerPref={e_HideToolbar:0,e_HideMenubar:1,e_HideWindowUI:2,e_FitWindow:3,e_CenterWindow:4,e_DisplayDocTitle:5};PDFNet.PDFRasterizer.Type={e_BuiltIn:0,e_GDIPlus:1};PDFNet.PDFRasterizer.OverprintPreviewMode={e_op_off:0,e_op_on:1,e_op_pdfx_on:2};PDFNet.PDFRasterizer.ColorPostProcessMode={e_postprocess_none:0,e_postprocess_invert:1};
PDFNet.PDFDraw.PixelFormat={e_rgba:0,e_bgra:1,e_rgb:2,e_bgr:3,e_gray:4,e_gray_alpha:5,e_cmyk:6};PDFNet.CloudErrorCode={e_STATUS_ERR:0,e_STATUS_OK:1,e_STATUS_NETWORK_ERR:2,e_STATUS_BAD_CREDENTIALS:3,e_STATUS_SERVICE_DOWN:4,e_STATUS_INVALID_OPERATION:5,e_STATUS_NUM:6};PDFNet.CMSType={e_lcms:0,e_icm:1,e_no_cms:2};PDFNet.CharacterOrdering={e_Identity:0,e_Japan1:1,e_Japan2:2,e_GB1:3,e_CNS1:4,e_Korea1:5};PDFNet.LogLevel={e_LogLevel_Off:-1,e_LogLevel_Fatal:5,e_LogLevel_Error:4,e_LogLevel_Warning:3,e_LogLevel_Info:2,
e_LogLevel_Trace:1,e_LogLevel_Debug:0};PDFNet.Shading.Type={e_function_shading:0,e_axial_shading:1,e_radial_shading:2,e_free_gouraud_shading:3,e_lattice_gouraud_shading:4,e_coons_shading:5,e_tensor_shading:6,e_null:7};PDFNet.Stamper.SizeType={e_relative_scale:1,e_absolute_size:2,e_font_size:3};PDFNet.Stamper.TextAlignment={e_align_left:-1,e_align_center:0,e_align_right:1};PDFNet.Stamper.HorizontalAlignment={e_horizontal_left:-1,e_horizontal_center:0,e_horizontal_right:1};PDFNet.Stamper.VerticalAlignment=
{e_vertical_bottom:-1,e_vertical_center:0,e_vertical_top:1};PDFNet.TextExtractor.ProcessingFlags={e_no_ligature_exp:1,e_no_dup_remove:2,e_punct_break:4,e_remove_hidden_text:8,e_no_invisible_text:16};PDFNet.TextExtractor.XMLOutputFlags={e_words_as_elements:1,e_output_bbox:2,e_output_style_info:4};PDFNet.TextSearch.ResultCode={e_done:0,e_page:1,e_found:2};PDFNet.TextSearch.Mode={e_reg_expression:1,e_case_sensitive:2,e_whole_word:4,e_search_up:8,e_page_stop:16,e_highlight:32,e_ambient_string:64};PDFNet.Obj.Type=
{e_null:0,e_bool:1,e_number:2,e_name:3,e_string:4,e_dict:5,e_array:6,e_stream:7};PDFNet.SDFDoc.SaveOptions={e_incremental:1,e_remove_unused:2,e_hex_strings:4,e_omit_xref:8,e_linearized:16,e_compatibility:32};PDFNet.SecurityHandler.Permission={e_owner:1,e_doc_open:2,e_doc_modify:3,e_print:4,e_print_high:5,e_extract_content:6,e_mod_annot:7,e_fill_forms:8,e_access_support:9,e_assemble_doc:10};PDFNet.SecurityHandler.AlgorithmType={e_RC4_40:1,e_RC4_128:2,e_AES:3,e_AES_256:4};PDFNet.Iterator.prototype.hasNext=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasNext'. Expected 0 arguments. Function Signature: hasNext()");return PDFNet.messageHandler.sendWithPromise("Iterator.hasNext",{itr:this.id},this.userPriority)};PDFNet.Iterator.prototype.next=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'next'. Expected 0 arguments. Function Signature: next()");return PDFNet.messageHandler.sendWithPromise("Iterator.next",
{itr:this.id},this.userPriority)};PDFNet.Iterator.prototype.assign=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 0 arguments. Function Signature: assign()");return PDFNet.messageHandler.sendWithPromise("Iterator.assign",{right:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Iterator.prototype.destroy=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("Iterator.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.DictIterator.prototype.hasNext=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasNext'. Expected 0 arguments. Function Signature: hasNext()");return PDFNet.messageHandler.sendWithPromise("DictIterator.hasNext",{itr:this.id},this.userPriority)};PDFNet.DictIterator.prototype.key=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'key'. Expected 0 arguments. Function Signature: key()");return PDFNet.messageHandler.sendWithPromise("DictIterator.key",{itr:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.DictIterator.prototype.value=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'value'. Expected 0 arguments. Function Signature: value()");return PDFNet.messageHandler.sendWithPromise("DictIterator.value",
{itr:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.DictIterator.prototype.next=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'next'. Expected 0 arguments. Function Signature: next()");return PDFNet.messageHandler.sendWithPromise("DictIterator.next",{itr:this.id},this.userPriority)};PDFNet.DictIterator.prototype.assign=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 0 arguments. Function Signature: assign()");
return PDFNet.messageHandler.sendWithPromise("DictIterator.assign",{right:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.DictIterator.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("DictIterator.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Matrix2D.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'copy'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Matrix2D.copy",{m:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};
PDFNet.Matrix2D.prototype.set=function(a,b,c,d,h,v){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'set'. Expected 6 arguments. Function Signature: set(number, number, number, number, number, number)");if(a instanceof Promise)throw new TypeError("1st input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof a)throw new TypeError("1st input argument '"+a+"' in function 'set' is of type '"+
typeof a+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("2nd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'set' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");if(c instanceof
Promise)throw new TypeError("3rd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'set' is of type '"+typeof c+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");if(d instanceof Promise)throw new TypeError("4th input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'set' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");if(h instanceof Promise)throw new TypeError("5th input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'set' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");
if(v instanceof Promise)throw new TypeError("6th input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'set' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: set(number, number, number, number, number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'set'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Matrix2D.set";return PDFNet.messageHandler.sendWithPromise("Matrix2D.set",{matrix:this,a:a,b:b,c:c,d:d,h:h,v:v},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.matrix,me)})};PDFNet.Matrix2D.prototype.concat=function(a,b,c,d,h,v){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'concat'. Expected 6 arguments. Function Signature: concat(number, number, number, number, number, number)");
if(a instanceof Promise)throw new TypeError("1st input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof a)throw new TypeError("1st input argument '"+a+"' in function 'concat' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("2nd input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'concat' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(c instanceof Promise)throw new TypeError("3rd input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'concat' is of type '"+typeof c+
"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(d instanceof Promise)throw new TypeError("4th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'concat' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(h instanceof
Promise)throw new TypeError("5th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'concat' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(v instanceof Promise)throw new TypeError("6th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'concat' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'concat'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"Matrix2D.concat";return PDFNet.messageHandler.sendWithPromise("Matrix2D.concat",{matrix:this,a:a,b:b,c:c,d:d,h:h,v:v},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.matrix,me)})};PDFNet.Matrix2D.prototype.equals=function(m2){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'equals'. Expected 1 argument. Function Signature: equals(Matrix2D)");if(m2 instanceof Promise)throw new TypeError("1st input argument in function 'equals' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(m2 instanceof PDFNet.Matrix2D)&&"Matrix2D"!=m2.name){if("object"==typeof m2)throw new TypeError("1st input argument in function 'equals' is of type '"+m2.name+"'. Expected type 'Matrix2D'. Function Signature: equals(Matrix2D).");throw new TypeError("1st input argument '"+m2+"' in function 'equals' is of type '"+typeof m2+"'. Expected type 'Matrix2D'. Function Signature: equals(Matrix2D).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'equals'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");if("undefined"!=typeof m2.yieldFunction)throw Error("Function '"+m2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'equals'. Perhaps a yield statement is required for '"+m2.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Matrix2D.equals",{m1:this,m2:m2},this.userPriority)};PDFNet.Matrix2D.prototype.inverse=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'inverse'. Expected 0 arguments. Function Signature: inverse()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'inverse'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Matrix2D.inverse",{matrix:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};
PDFNet.Matrix2D.prototype.translate=function(h,v){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'translate'. Expected 2 arguments. Function Signature: translate(number, number)");if(h instanceof Promise)throw new TypeError("1st input argument in function 'translate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("1st input argument '"+h+"' in function 'translate' is of type '"+
typeof h+"'. Expected type 'number'. Function Signature: translate(number, number).");if(v instanceof Promise)throw new TypeError("2nd input argument in function 'translate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof v)throw new TypeError("2nd input argument '"+v+"' in function 'translate' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: translate(number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'translate'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Matrix2D.translate";return PDFNet.messageHandler.sendWithPromise("Matrix2D.translate",{matrix:this,h:h,v:v},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.matrix,me)})};PDFNet.Matrix2D.prototype.scale=function(h,v){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'scale'. Expected 2 arguments. Function Signature: scale(number, number)");if(h instanceof Promise)throw new TypeError("1st input argument in function 'scale' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("1st input argument '"+h+"' in function 'scale' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: scale(number, number).");if(v instanceof Promise)throw new TypeError("2nd input argument in function 'scale' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof v)throw new TypeError("2nd input argument '"+v+"' in function 'scale' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: scale(number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'scale'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Matrix2D.scale";return PDFNet.messageHandler.sendWithPromise("Matrix2D.scale",
{matrix:this,h:h,v:v},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.matrix,me)})};PDFNet.Matrix2D.createZeroMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createZeroMatrix'. Expected 0 arguments. Function Signature: createZeroMatrix()");return PDFNet.messageHandler.sendWithPromise("matrix2DCreateZeroMatrix",{},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Matrix2D.createIdentityMatrix=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIdentityMatrix'. Expected 0 arguments. Function Signature: createIdentityMatrix()");return PDFNet.messageHandler.sendWithPromise("matrix2DCreateIdentityMatrix",{},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Matrix2D.createRotationMatrix=function(angle){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createRotationMatrix'. Expected 1 argument. Function Signature: createRotationMatrix(number)");
if(angle instanceof Promise)throw new TypeError("1st input argument in function 'createRotationMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof angle)throw new TypeError("1st input argument '"+angle+"' in function 'createRotationMatrix' is of type '"+typeof angle+"'. Expected type 'number'. Function Signature: createRotationMatrix(number).");return PDFNet.messageHandler.sendWithPromise("matrix2DCreateRotationMatrix",{angle:angle},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Matrix2D(id)})};PDFNet.Field.create=function(field_dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(field_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(field_dict instanceof PDFNet.Obj)){if("object"==typeof field_dict)throw new TypeError("1st input argument in function 'create' is of type '"+
field_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+field_dict+"' in function 'create' is of type '"+typeof field_dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("fieldCreate",{field_dict:field_dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Field(id)})};PDFNet.Field.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Field)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.Field)&&"Field"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'Field'. Function Signature: assign(Field).");
throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'Field'. Function Signature: assign(Field).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+right.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="Field.assign";return PDFNet.messageHandler.sendWithPromise("Field.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.Field.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.isValid",{field:this},this.userPriority)};PDFNet.Field.prototype.getType=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getType'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getType",{field:this},this.userPriority)};
PDFNet.Field.prototype.getValue=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getValue'. Expected 0 arguments. Function Signature: getValue()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getValue'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getValue";
return PDFNet.messageHandler.sendWithPromise("Field.getValue",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.Obj(id.result)})};PDFNet.Field.prototype.getValueAsString=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getValueAsString'. Expected 0 arguments. Function Signature: getValueAsString()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getValueAsString'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getValueAsString";return PDFNet.messageHandler.sendWithPromise("Field.getValueAsString",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.Field.prototype.getDefaultValueAsString=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDefaultValueAsString'. Expected 0 arguments. Function Signature: getDefaultValueAsString()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getDefaultValueAsString'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getDefaultValueAsString";
return PDFNet.messageHandler.sendWithPromise("Field.getDefaultValueAsString",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.Field.prototype.setValueAsString=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setValueAsString'. Expected 1 argument. Function Signature: setValueAsString(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setValueAsString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setValueAsString' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: setValueAsString(string).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setValueAsString'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"Field.setValueAsString";return PDFNet.messageHandler.sendWithPromise("Field.setValueAsString",{field:this,value:value},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.ViewChangeCollection(id.result)})};PDFNet.Field.prototype.setValue=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setValue'. Expected 1 argument. Function Signature: setValue(Obj)");if(value instanceof
Promise)throw new TypeError("1st input argument in function 'setValue' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setValue' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setValue(Obj).");throw new TypeError("1st input argument '"+value+"' in function 'setValue' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setValue(Obj).");
}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setValue'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.setValue";return PDFNet.messageHandler.sendWithPromise("Field.setValue",{field:this,value:value.id},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,
me);return new PDFNet.ViewChangeCollection(id.result)})};PDFNet.Field.prototype.setValueAsBool=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setValueAsBool'. Expected 1 argument. Function Signature: setValueAsBool(boolean)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setValueAsBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("1st input argument '"+
value+"' in function 'setValueAsBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: setValueAsBool(boolean).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setValueAsBool'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.setValueAsBool";return PDFNet.messageHandler.sendWithPromise("Field.setValueAsBool",
{field:this,value:value},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.ViewChangeCollection(id.result)})};PDFNet.Field.prototype.getTriggerAction=function(trigger){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTriggerAction'. Expected 1 argument. Function Signature: getTriggerAction(number)");if(trigger instanceof Promise)throw new TypeError("1st input argument in function 'getTriggerAction' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof trigger)throw new TypeError("1st input argument '"+trigger+"' in function 'getTriggerAction' is of type '"+typeof trigger+"'. Expected type 'number'. Function Signature: getTriggerAction(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getTriggerAction'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;
this.yieldFunction="Field.getTriggerAction";return PDFNet.messageHandler.sendWithPromise("Field.getTriggerAction",{field:this,trigger:trigger},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.Obj(id.result)})};PDFNet.Field.prototype.getValueAsBool=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getValueAsBool'. Expected 0 arguments. Function Signature: getValueAsBool()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getValueAsBool'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getValueAsBool",{field:this},this.userPriority)};PDFNet.Field.prototype.refreshAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'refreshAppearance'. Expected 0 arguments. Function Signature: refreshAppearance()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'refreshAppearance'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.refreshAppearance";return PDFNet.messageHandler.sendWithPromise("Field.refreshAppearance",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};
PDFNet.Field.prototype.eraseAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eraseAppearance'. Expected 0 arguments. Function Signature: eraseAppearance()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'eraseAppearance'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=
this;this.yieldFunction="Field.eraseAppearance";return PDFNet.messageHandler.sendWithPromise("Field.eraseAppearance",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.getDefaultValue=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDefaultValue'. Expected 0 arguments. Function Signature: getDefaultValue()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getDefaultValue'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getDefaultValue";return PDFNet.messageHandler.sendWithPromise("Field.getDefaultValue",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.Obj(id.result)})};PDFNet.Field.prototype.getName=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getName'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getName";return PDFNet.messageHandler.sendWithPromise("Field.getName",
{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.Field.prototype.getPartialName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPartialName'. Expected 0 arguments. Function Signature: getPartialName()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getPartialName'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getPartialName";return PDFNet.messageHandler.sendWithPromise("Field.getPartialName",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.Field.prototype.rename=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'rename'. Expected 1 argument. Function Signature: rename(string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'rename' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'rename' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: rename(string).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'rename'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"Field.rename";return PDFNet.messageHandler.sendWithPromise("Field.rename",{field:this,field_name:field_name},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.isAnnot=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isAnnot'. Expected 0 arguments. Function Signature: isAnnot()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isAnnot'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.isAnnot",{field:this},this.userPriority)};PDFNet.Field.prototype.useSignatureHandler=function(signature_handler_id){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'useSignatureHandler'. Expected 1 argument. Function Signature: useSignatureHandler(number)");if(signature_handler_id instanceof Promise)throw new TypeError("1st input argument in function 'useSignatureHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof signature_handler_id)throw new TypeError("1st input argument '"+signature_handler_id+"' in function 'useSignatureHandler' is of type '"+typeof signature_handler_id+"'. Expected type 'number'. Function Signature: useSignatureHandler(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'useSignatureHandler'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Field.useSignatureHandler";return PDFNet.messageHandler.sendWithPromise("Field.useSignatureHandler",{field:this,signature_handler_id:signature_handler_id},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.Obj(id.result)})};PDFNet.Field.prototype.getFlag=function(flag){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFlag'. Expected 1 argument. Function Signature: getFlag(number)");
if(flag instanceof Promise)throw new TypeError("1st input argument in function 'getFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'getFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: getFlag(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFlag'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getFlag",{field:this,flag:flag},this.userPriority)};PDFNet.Field.prototype.setFlag=function(flag,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFlag'. Expected 2 arguments. Function Signature: setFlag(number, boolean)");if(flag instanceof Promise)throw new TypeError("1st input argument in function 'setFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'setFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: setFlag(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'setFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'setFlag' is of type '"+typeof value+
"'. Expected type 'boolean'. Function Signature: setFlag(number, boolean).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setFlag'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.setFlag";return PDFNet.messageHandler.sendWithPromise("Field.setFlag",{field:this,flag:flag,value:value},this.userPriority).then(function(id){me.yieldFunction=
void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.getJustification=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getJustification'. Expected 0 arguments. Function Signature: getJustification()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getJustification'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getJustification";return PDFNet.messageHandler.sendWithPromise("Field.getJustification",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.Field.prototype.setJustification=function(j){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setJustification'. Expected 1 argument. Function Signature: setJustification(number)");if(j instanceof
Promise)throw new TypeError("1st input argument in function 'setJustification' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof j)throw new TypeError("1st input argument '"+j+"' in function 'setJustification' is of type '"+typeof j+"'. Expected type 'number'. Function Signature: setJustification(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setJustification'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Field.setJustification";return PDFNet.messageHandler.sendWithPromise("Field.setJustification",{field:this,j:j},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.setMaxLen=function(max_len){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMaxLen'. Expected 1 argument. Function Signature: setMaxLen(number)");if(max_len instanceof Promise)throw new TypeError("1st input argument in function 'setMaxLen' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof max_len)throw new TypeError("1st input argument '"+max_len+"' in function 'setMaxLen' is of type '"+typeof max_len+"'. Expected type 'number'. Function Signature: setMaxLen(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setMaxLen'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"Field.setMaxLen";return PDFNet.messageHandler.sendWithPromise("Field.setMaxLen",{field:this,max_len:max_len},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.getMaxLen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMaxLen'. Expected 0 arguments. Function Signature: getMaxLen()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getMaxLen'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getMaxLen",{field:this},this.userPriority)};PDFNet.Field.prototype.getDefaultAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDefaultAppearance'. Expected 0 arguments. Function Signature: getDefaultAppearance()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getDefaultAppearance'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Field.getDefaultAppearance";return PDFNet.messageHandler.sendWithPromise("Field.getDefaultAppearance",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.GState(id.result)})};PDFNet.Field.prototype.getUpdateRect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUpdateRect'. Expected 0 arguments. Function Signature: getUpdateRect()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getUpdateRect'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getUpdateRect",{field:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Field.prototype.flatten=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'flatten'. Expected 1 argument. Function Signature: flatten(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'flatten' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'flatten' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: flatten(Page).");throw new TypeError("1st input argument '"+
page+"' in function 'flatten' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: flatten(Page).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'flatten'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Field.flatten";return PDFNet.messageHandler.sendWithPromise("Field.flatten",{field:this,
page:page.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.Field.prototype.findInheritedAttribute=function(attrib){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'findInheritedAttribute'. Expected 1 argument. Function Signature: findInheritedAttribute(string)");if(attrib instanceof Promise)throw new TypeError("1st input argument in function 'findInheritedAttribute' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof attrib)throw new TypeError("1st input argument '"+attrib+"' in function 'findInheritedAttribute' is of type '"+typeof attrib+"'. Expected type 'string'. Function Signature: findInheritedAttribute(string).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'findInheritedAttribute'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");return PDFNet.messageHandler.sendWithPromise("Field.findInheritedAttribute",{field:this,attrib:attrib},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Field.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getSDFObj'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getSDFObj",{field:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Field.prototype.getOptCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOptCount'. Expected 0 arguments. Function Signature: getOptCount()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getOptCount'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getOptCount",{field:this},this.userPriority)};PDFNet.Field.prototype.getOpt=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOpt'. Expected 1 argument. Function Signature: getOpt(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'getOpt' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'getOpt' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getOpt(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getOpt'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Field.getOpt",
{field:this,index:index},this.userPriority)};PDFNet.FDFDoc.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("fdfDocCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.createFromStream=function(no_own_stream){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromStream'. Expected 1 argument. Function Signature: createFromStream(Filter)");if(no_own_stream instanceof Promise)throw new TypeError("1st input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_stream instanceof PDFNet.Filter)){if("object"==typeof no_own_stream)throw new TypeError("1st input argument in function 'createFromStream' is of type '"+
no_own_stream.name+"'. Expected type 'Filter'. Function Signature: createFromStream(Filter).");throw new TypeError("1st input argument '"+no_own_stream+"' in function 'createFromStream' is of type '"+typeof no_own_stream+"'. Expected type 'Filter'. Function Signature: createFromStream(Filter).");}var ownedObjIndex=-1;if(0!=no_own_stream.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_stream.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,
1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("fdfDocCreateFromStream",{no_own_stream:no_own_stream.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};
PDFNet.FDFDoc.createFromMemoryBuffer=function(buf){buf instanceof Array&&(buf=new Float64Array(buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromMemoryBuffer'. Expected 1 argument. Function Signature: createFromMemoryBuffer(ArrayBuffer)");if(buf instanceof Promise)throw new TypeError("1st input argument in function 'createFromMemoryBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==
typeof buf)throw new TypeError("1st input argument in function 'createFromMemoryBuffer' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemoryBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+buf+"' in function 'createFromMemoryBuffer' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemoryBuffer(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("fdfDocCreateFromMemoryBuffer",{buf:buf.buffer},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,
1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("FDFDoc.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.FDFDoc.prototype.isModified=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isModified'. Expected 0 arguments. Function Signature: isModified()");
return PDFNet.messageHandler.sendWithPromise("FDFDoc.isModified",{doc:this.id},this.userPriority)};PDFNet.FDFDoc.prototype.saveMemoryBuffer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveMemoryBuffer'. Expected 0 arguments. Function Signature: saveMemoryBuffer()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.saveMemoryBuffer",{doc:this.id},this.userPriority).then(function(id){return new Uint8Array(id)})};PDFNet.FDFDoc.prototype.getTrailer=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTrailer'. Expected 0 arguments. Function Signature: getTrailer()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getTrailer",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.FDFDoc.prototype.getRoot=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRoot'. Expected 0 arguments. Function Signature: getRoot()");
return PDFNet.messageHandler.sendWithPromise("FDFDoc.getRoot",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.FDFDoc.prototype.getFDF=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFDF'. Expected 0 arguments. Function Signature: getFDF()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getFDF",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};
PDFNet.FDFDoc.prototype.getPDFFileName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPDFFileName'. Expected 0 arguments. Function Signature: getPDFFileName()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getPDFFileName",{doc:this.id},this.userPriority)};PDFNet.FDFDoc.prototype.setPDFFileName=function(filepath){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPDFFileName'. Expected 1 argument. Function Signature: setPDFFileName(string)");
if(filepath instanceof Promise)throw new TypeError("1st input argument in function 'setPDFFileName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof filepath)throw new TypeError("1st input argument '"+filepath+"' in function 'setPDFFileName' is of type '"+typeof filepath+"'. Expected type 'string'. Function Signature: setPDFFileName(string).");return PDFNet.messageHandler.sendWithPromise("FDFDoc.setPDFFileName",{doc:this.id,filepath:filepath},
this.userPriority)};PDFNet.FDFDoc.prototype.getID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getID'. Expected 0 arguments. Function Signature: getID()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getID",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.FDFDoc.prototype.setID=function(id){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setID'. Expected 1 argument. Function Signature: setID(Obj)");
if(id instanceof Promise)throw new TypeError("1st input argument in function 'setID' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(id instanceof PDFNet.Obj)){if("object"==typeof id)throw new TypeError("1st input argument in function 'setID' is of type '"+id.name+"'. Expected type 'Obj'. Function Signature: setID(Obj).");throw new TypeError("1st input argument '"+id+"' in function 'setID' is of type '"+typeof id+"'. Expected type 'Obj'. Function Signature: setID(Obj).");
}return PDFNet.messageHandler.sendWithPromise("FDFDoc.setID",{doc:this.id,id:id.id},this.userPriority)};PDFNet.FDFDoc.prototype.getFieldIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIteratorBegin'. Expected 0 arguments. Function Signature: getFieldIteratorBegin()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getFieldIteratorBegin",{doc:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=
new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.prototype.getFieldIterator=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIterator'. Expected 1 argument. Function Signature: getFieldIterator(string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'getFieldIterator' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'getFieldIterator' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: getFieldIterator(string).");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getFieldIterator",{doc:this.id,field_name:field_name},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.prototype.getField=
function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getField'. Expected 1 argument. Function Signature: getField(string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'getField' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'getField' is of type '"+typeof field_name+
"'. Expected type 'string'. Function Signature: getField(string).");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getField",{doc:this.id,field_name:field_name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FDFField(id)})};PDFNet.FDFDoc.prototype.fieldCreate=function(field_name,type,field_value){"undefined"===typeof field_value&&(field_value=new PDFNet.Obj("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fieldCreate'. Expected 2 to 3 arguments. Function Signature: fieldCreate(string, number, Obj)");
if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'fieldCreate' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: fieldCreate(string, number, Obj).");if(type instanceof Promise)throw new TypeError("2nd input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'fieldCreate' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: fieldCreate(string, number, Obj).");if(field_value instanceof Promise)throw new TypeError("3rd input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(field_value instanceof PDFNet.Obj)){if("object"==typeof field_value)throw new TypeError("3rd input argument in function 'fieldCreate' is of type '"+
field_value.name+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj).");throw new TypeError("3rd input argument '"+field_value+"' in function 'fieldCreate' is of type '"+typeof field_value+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj).");}return PDFNet.messageHandler.sendWithPromise("FDFDoc.fieldCreate",{doc:this.id,field_name:field_name,type:type,field_value:field_value.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FDFField(id)})};
PDFNet.FDFDoc.prototype.fieldCreateFromString=function(field_name,type,field_value){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fieldCreateFromString'. Expected 3 arguments. Function Signature: fieldCreateFromString(string, number, string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'fieldCreateFromString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+
field_name+"' in function 'fieldCreateFromString' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: fieldCreateFromString(string, number, string).");if(type instanceof Promise)throw new TypeError("2nd input argument in function 'fieldCreateFromString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'fieldCreateFromString' is of type '"+typeof type+
"'. Expected type 'number'. Function Signature: fieldCreateFromString(string, number, string).");if(field_value instanceof Promise)throw new TypeError("3rd input argument in function 'fieldCreateFromString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_value)throw new TypeError("3rd input argument '"+field_value+"' in function 'fieldCreateFromString' is of type '"+typeof field_value+"'. Expected type 'string'. Function Signature: fieldCreateFromString(string, number, string).");
return PDFNet.messageHandler.sendWithPromise("FDFDoc.fieldCreateFromString",{doc:this.id,field_name:field_name,type:type,field_value:field_value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FDFField(id)})};PDFNet.FDFDoc.prototype.getSDFDoc=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFDoc'. Expected 0 arguments. Function Signature: getSDFDoc()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getSDFDoc",
{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SDFDoc(id)})};PDFNet.FDFDoc.createFromXFDF=function(file_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromXFDF'. Expected 1 argument. Function Signature: createFromXFDF(string)");if(file_name instanceof Promise)throw new TypeError("1st input argument in function 'createFromXFDF' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof file_name)throw new TypeError("1st input argument '"+file_name+"' in function 'createFromXFDF' is of type '"+typeof file_name+"'. Expected type 'string'. Function Signature: createFromXFDF(string).");return PDFNet.messageHandler.sendWithPromise("fdfDocCreateFromXFDF",{file_name:file_name},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.prototype.saveAsXFDFAsString=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveAsXFDFAsString'. Expected 0 arguments. Function Signature: saveAsXFDFAsString()");return PDFNet.messageHandler.sendWithPromise("FDFDoc.saveAsXFDFAsString",{doc:this.id},this.userPriority)};PDFNet.FDFDoc.prototype.mergeAnnots=function(command_file,permitted_user){"undefined"===typeof permitted_user&&(permitted_user="");if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'mergeAnnots'. Expected 1 to 2 arguments. Function Signature: mergeAnnots(string, string)");
if(command_file instanceof Promise)throw new TypeError("1st input argument in function 'mergeAnnots' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof command_file)throw new TypeError("1st input argument '"+command_file+"' in function 'mergeAnnots' is of type '"+typeof command_file+"'. Expected type 'string'. Function Signature: mergeAnnots(string, string).");if(permitted_user instanceof Promise)throw new TypeError("2nd input argument in function 'mergeAnnots' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof permitted_user)throw new TypeError("2nd input argument '"+permitted_user+"' in function 'mergeAnnots' is of type '"+typeof permitted_user+"'. Expected type 'string'. Function Signature: mergeAnnots(string, string).");return PDFNet.messageHandler.sendWithPromise("FDFDoc.mergeAnnots",{doc:this.id,command_file:command_file,permitted_user:permitted_user},this.userPriority)};PDFNet.FDFField.create=function(field_dict,fdf_dict){"undefined"===typeof field_dict&&(field_dict=new PDFNet.Obj("0"));
"undefined"===typeof fdf_dict&&(fdf_dict=new PDFNet.Obj("0"));if(2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 2 arguments. Function Signature: create(Obj, Obj)");if(field_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(field_dict instanceof PDFNet.Obj)){if("object"==typeof field_dict)throw new TypeError("1st input argument in function 'create' is of type '"+
field_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj, Obj).");throw new TypeError("1st input argument '"+field_dict+"' in function 'create' is of type '"+typeof field_dict+"'. Expected type 'Obj'. Function Signature: create(Obj, Obj).");}if(fdf_dict instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(fdf_dict instanceof PDFNet.Obj)){if("object"==typeof fdf_dict)throw new TypeError("2nd input argument in function 'create' is of type '"+
fdf_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj, Obj).");throw new TypeError("2nd input argument '"+fdf_dict+"' in function 'create' is of type '"+typeof fdf_dict+"'. Expected type 'Obj'. Function Signature: create(Obj, Obj).");}return PDFNet.messageHandler.sendWithPromise("fdfFieldCreate",{field_dict:field_dict.id,fdf_dict:fdf_dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FDFField(id)})};PDFNet.FDFField.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(FDFField)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.FDFField)&&"FDFField"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'FDFField'. Function Signature: assign(FDFField).");
throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'FDFField'. Function Signature: assign(FDFField).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+
right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="FDFField.assign";return PDFNet.messageHandler.sendWithPromise("FDFField.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.FDFField.prototype.getValue=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getValue'. Expected 0 arguments. Function Signature: getValue()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getValue'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="FDFField.getValue";return PDFNet.messageHandler.sendWithPromise("FDFField.getValue",{field:this},this.userPriority).then(function(id){me.yieldFunction=
void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.Obj(id.result)})};PDFNet.FDFField.prototype.setValue=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setValue'. Expected 1 argument. Function Signature: setValue(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setValue' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==
typeof value)throw new TypeError("1st input argument in function 'setValue' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setValue(Obj).");throw new TypeError("1st input argument '"+value+"' in function 'setValue' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setValue(Obj).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setValue'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="FDFField.setValue";return PDFNet.messageHandler.sendWithPromise("FDFField.setValue",{field:this,value:value.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me)})};PDFNet.FDFField.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getName'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="FDFField.getName";return PDFNet.messageHandler.sendWithPromise("FDFField.getName",{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.FDFField.prototype.getPartialName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPartialName'. Expected 0 arguments. Function Signature: getPartialName()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getPartialName'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="FDFField.getPartialName";return PDFNet.messageHandler.sendWithPromise("FDFField.getPartialName",
{field:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.field,me);return id.result})};PDFNet.FDFField.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getSDFObj'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("FDFField.getSDFObj",{field:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.FDFField.prototype.findAttribute=function(attrib){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'findAttribute'. Expected 1 argument. Function Signature: findAttribute(string)");if(attrib instanceof Promise)throw new TypeError("1st input argument in function 'findAttribute' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof attrib)throw new TypeError("1st input argument '"+attrib+"' in function 'findAttribute' is of type '"+typeof attrib+"'. Expected type 'string'. Function Signature: findAttribute(string).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'findAttribute'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("FDFField.findAttribute",
{field:this,attrib:attrib},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Filter.prototype.createASCII85Encode=function(line_width,buf_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createASCII85Encode'. Expected 2 arguments. Function Signature: createASCII85Encode(number, number)");if(line_width instanceof Promise)throw new TypeError("1st input argument in function 'createASCII85Encode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof line_width)throw new TypeError("1st input argument '"+line_width+"' in function 'createASCII85Encode' is of type '"+typeof line_width+"'. Expected type 'number'. Function Signature: createASCII85Encode(number, number).");if(buf_sz instanceof Promise)throw new TypeError("2nd input argument in function 'createASCII85Encode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof buf_sz)throw new TypeError("2nd input argument '"+buf_sz+
"' in function 'createASCII85Encode' is of type '"+typeof buf_sz+"'. Expected type 'number'. Function Signature: createASCII85Encode(number, number).");var ownedObjIndex=-1;if(0!=this.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("Filter.createASCII85Encode",
{no_own_input_filter:this.id,line_width:line_width,buf_sz:buf_sz},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createMemoryFilter=function(buf_sz,is_input){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createMemoryFilter'. Expected 2 arguments. Function Signature: createMemoryFilter(number, boolean)");if(buf_sz instanceof Promise)throw new TypeError("1st input argument in function 'createMemoryFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof buf_sz)throw new TypeError("1st input argument '"+buf_sz+"' in function 'createMemoryFilter' is of type '"+typeof buf_sz+"'. Expected type 'number'. Function Signature: createMemoryFilter(number, boolean).");if(is_input instanceof Promise)throw new TypeError("2nd input argument in function 'createMemoryFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof is_input)throw new TypeError("2nd input argument '"+is_input+"' in function 'createMemoryFilter' is of type '"+
typeof is_input+"'. Expected type 'boolean'. Function Signature: createMemoryFilter(number, boolean).");return PDFNet.messageHandler.sendWithPromise("filterCreateMemoryFilter",{buf_sz:buf_sz,is_input:is_input},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGBFromElement=function(elem){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImage2RGBFromElement'. Expected 1 argument. Function Signature: createImage2RGBFromElement(Element)");
if(elem instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGBFromElement' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(elem instanceof PDFNet.Element)){if("object"==typeof elem)throw new TypeError("1st input argument in function 'createImage2RGBFromElement' is of type '"+elem.name+"'. Expected type 'Element'. Function Signature: createImage2RGBFromElement(Element).");throw new TypeError("1st input argument '"+elem+"' in function 'createImage2RGBFromElement' is of type '"+
typeof elem+"'. Expected type 'Element'. Function Signature: createImage2RGBFromElement(Element).");}return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGBFromElement",{elem:elem.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGBFromObj=function(obj){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImage2RGBFromObj'. Expected 1 argument. Function Signature: createImage2RGBFromObj(Obj)");
if(obj instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGBFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(obj instanceof PDFNet.Obj)){if("object"==typeof obj)throw new TypeError("1st input argument in function 'createImage2RGBFromObj' is of type '"+obj.name+"'. Expected type 'Obj'. Function Signature: createImage2RGBFromObj(Obj).");throw new TypeError("1st input argument '"+obj+"' in function 'createImage2RGBFromObj' is of type '"+
typeof obj+"'. Expected type 'Obj'. Function Signature: createImage2RGBFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGBFromObj",{obj:obj.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGB=function(img){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImage2RGB'. Expected 1 argument. Function Signature: createImage2RGB(Image)");
if(img instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGB' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("1st input argument in function 'createImage2RGB' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: createImage2RGB(Image).");throw new TypeError("1st input argument '"+img+"' in function 'createImage2RGB' is of type '"+typeof img+
"'. Expected type 'Image'. Function Signature: createImage2RGB(Image).");}return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGB",{img:img.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGBAFromElement=function(elem,premultiply){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImage2RGBAFromElement'. Expected 2 arguments. Function Signature: createImage2RGBAFromElement(Element, boolean)");
if(elem instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGBAFromElement' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(elem instanceof PDFNet.Element)){if("object"==typeof elem)throw new TypeError("1st input argument in function 'createImage2RGBAFromElement' is of type '"+elem.name+"'. Expected type 'Element'. Function Signature: createImage2RGBAFromElement(Element, boolean).");throw new TypeError("1st input argument '"+
elem+"' in function 'createImage2RGBAFromElement' is of type '"+typeof elem+"'. Expected type 'Element'. Function Signature: createImage2RGBAFromElement(Element, boolean).");}if(premultiply instanceof Promise)throw new TypeError("2nd input argument in function 'createImage2RGBAFromElement' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof premultiply)throw new TypeError("2nd input argument '"+premultiply+"' in function 'createImage2RGBAFromElement' is of type '"+
typeof premultiply+"'. Expected type 'boolean'. Function Signature: createImage2RGBAFromElement(Element, boolean).");return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGBAFromElement",{elem:elem.id,premultiply:premultiply},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGBAFromObj=function(obj,premultiply){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createImage2RGBAFromObj'. Expected 2 arguments. Function Signature: createImage2RGBAFromObj(Obj, boolean)");if(obj instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGBAFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(obj instanceof PDFNet.Obj)){if("object"==typeof obj)throw new TypeError("1st input argument in function 'createImage2RGBAFromObj' is of type '"+obj.name+"'. Expected type 'Obj'. Function Signature: createImage2RGBAFromObj(Obj, boolean).");
throw new TypeError("1st input argument '"+obj+"' in function 'createImage2RGBAFromObj' is of type '"+typeof obj+"'. Expected type 'Obj'. Function Signature: createImage2RGBAFromObj(Obj, boolean).");}if(premultiply instanceof Promise)throw new TypeError("2nd input argument in function 'createImage2RGBAFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof premultiply)throw new TypeError("2nd input argument '"+premultiply+"' in function 'createImage2RGBAFromObj' is of type '"+
typeof premultiply+"'. Expected type 'boolean'. Function Signature: createImage2RGBAFromObj(Obj, boolean).");return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGBAFromObj",{obj:obj.id,premultiply:premultiply},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createImage2RGBA=function(img,premultiply){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImage2RGBA'. Expected 2 arguments. Function Signature: createImage2RGBA(Image, boolean)");
if(img instanceof Promise)throw new TypeError("1st input argument in function 'createImage2RGBA' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("1st input argument in function 'createImage2RGBA' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: createImage2RGBA(Image, boolean).");throw new TypeError("1st input argument '"+img+"' in function 'createImage2RGBA' is of type '"+
typeof img+"'. Expected type 'Image'. Function Signature: createImage2RGBA(Image, boolean).");}if(premultiply instanceof Promise)throw new TypeError("2nd input argument in function 'createImage2RGBA' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof premultiply)throw new TypeError("2nd input argument '"+premultiply+"' in function 'createImage2RGBA' is of type '"+typeof premultiply+"'. Expected type 'boolean'. Function Signature: createImage2RGBA(Image, boolean).");
return PDFNet.messageHandler.sendWithPromise("filterCreateImage2RGBA",{img:img.id,premultiply:premultiply},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createCustomWithStruct=function(mode,user_data,callbacks){if(1>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createCustomWithStruct'. Expected 1 to 3 arguments. Function Signature: createCustomWithStruct(number, void*, void*)");
if(mode instanceof Promise)throw new TypeError("1st input argument in function 'createCustomWithStruct' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'createCustomWithStruct' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: createCustomWithStruct(number, void*, void*).");return PDFNet.messageHandler.sendWithPromise("filterCreateCustomWithStruct",{mode:mode,
user_data:user_data,callbacks:callbacks},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=
thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Filter.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Filter.prototype.attachFilter=function(no_own_attach_filter){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'attachFilter'. Expected 1 argument. Function Signature: attachFilter(Filter)");if(no_own_attach_filter instanceof Promise)throw new TypeError("1st input argument in function 'attachFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_attach_filter instanceof PDFNet.Filter)){if("object"==typeof no_own_attach_filter)throw new TypeError("1st input argument in function 'attachFilter' is of type '"+no_own_attach_filter.name+
"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");throw new TypeError("1st input argument '"+no_own_attach_filter+"' in function 'attachFilter' is of type '"+typeof no_own_attach_filter+"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");}var ownedObjIndex=-1;if(0!=no_own_attach_filter.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_attach_filter.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,
1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("Filter.attachFilter",{filter:this.id,no_own_attach_filter:no_own_attach_filter.id},this.userPriority)};PDFNet.Filter.prototype.releaseAttachedFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'releaseAttachedFilter'. Expected 0 arguments. Function Signature: releaseAttachedFilter()");return PDFNet.messageHandler.sendWithPromise("Filter.releaseAttachedFilter",{filter:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.prototype.getAttachedFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAttachedFilter'. Expected 0 arguments. Function Signature: getAttachedFilter()");
return PDFNet.messageHandler.sendWithPromise("Filter.getAttachedFilter",{filter:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.Filter.prototype.getSourceFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSourceFilter'. Expected 0 arguments. Function Signature: getSourceFilter()");return PDFNet.messageHandler.sendWithPromise("Filter.getSourceFilter",{filter:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Filter(id)})};PDFNet.Filter.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");return PDFNet.messageHandler.sendWithPromise("Filter.getName",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.getDecodeName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDecodeName'. Expected 0 arguments. Function Signature: getDecodeName()");
return PDFNet.messageHandler.sendWithPromise("Filter.getDecodeName",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.begin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 0 arguments. Function Signature: begin()");return PDFNet.messageHandler.sendWithPromise("Filter.begin",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.size=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'size'. Expected 0 arguments. Function Signature: size()");
return PDFNet.messageHandler.sendWithPromise("Filter.size",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.consume=function(num_bytes){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'consume'. Expected 1 argument. Function Signature: consume(number)");if(num_bytes instanceof Promise)throw new TypeError("1st input argument in function 'consume' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof num_bytes)throw new TypeError("1st input argument '"+num_bytes+"' in function 'consume' is of type '"+typeof num_bytes+"'. Expected type 'number'. Function Signature: consume(number).");return PDFNet.messageHandler.sendWithPromise("Filter.consume",{filter:this.id,num_bytes:num_bytes},this.userPriority)};PDFNet.Filter.prototype.count=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'count'. Expected 0 arguments. Function Signature: count()");
return PDFNet.messageHandler.sendWithPromise("Filter.count",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.setCount=function(new_count){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCount'. Expected 1 argument. Function Signature: setCount(number)");if(new_count instanceof Promise)throw new TypeError("1st input argument in function 'setCount' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof new_count)throw new TypeError("1st input argument '"+new_count+"' in function 'setCount' is of type '"+typeof new_count+"'. Expected type 'number'. Function Signature: setCount(number).");return PDFNet.messageHandler.sendWithPromise("Filter.setCount",{filter:this.id,new_count:new_count},this.userPriority)};PDFNet.Filter.prototype.setStreamLength=function(bytes){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStreamLength'. Expected 1 argument. Function Signature: setStreamLength(number)");
if(bytes instanceof Promise)throw new TypeError("1st input argument in function 'setStreamLength' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bytes)throw new TypeError("1st input argument '"+bytes+"' in function 'setStreamLength' is of type '"+typeof bytes+"'. Expected type 'number'. Function Signature: setStreamLength(number).");return PDFNet.messageHandler.sendWithPromise("Filter.setStreamLength",{filter:this.id,bytes:bytes},this.userPriority)};
PDFNet.Filter.prototype.flush=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flush'. Expected 0 arguments. Function Signature: flush()");return PDFNet.messageHandler.sendWithPromise("Filter.flush",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.flushAll=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flushAll'. Expected 0 arguments. Function Signature: flushAll()");return PDFNet.messageHandler.sendWithPromise("Filter.flushAll",
{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.isInputFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isInputFilter'. Expected 0 arguments. Function Signature: isInputFilter()");return PDFNet.messageHandler.sendWithPromise("Filter.isInputFilter",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.canSeek=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'canSeek'. Expected 0 arguments. Function Signature: canSeek()");
return PDFNet.messageHandler.sendWithPromise("Filter.canSeek",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.seek=function(offset,origin){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'seek'. Expected 2 arguments. Function Signature: seek(number, number)");if(offset instanceof Promise)throw new TypeError("1st input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof offset)throw new TypeError("1st input argument '"+offset+"' in function 'seek' is of type '"+typeof offset+"'. Expected type 'number'. Function Signature: seek(number, number).");if(origin instanceof Promise)throw new TypeError("2nd input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof origin)throw new TypeError("2nd input argument '"+origin+"' in function 'seek' is of type '"+typeof origin+"'. Expected type 'number'. Function Signature: seek(number, number).");
return PDFNet.messageHandler.sendWithPromise("Filter.seek",{filter:this.id,offset:offset,origin:origin},this.userPriority)};PDFNet.Filter.prototype.tell=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tell'. Expected 0 arguments. Function Signature: tell()");return PDFNet.messageHandler.sendWithPromise("Filter.tell",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.createInputIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createInputIterator'. Expected 0 arguments. Function Signature: createInputIterator()");return PDFNet.messageHandler.sendWithPromise("Filter.createInputIterator",{filter:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.prototype.getFilePath=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFilePath'. Expected 0 arguments. Function Signature: getFilePath()");
return PDFNet.messageHandler.sendWithPromise("Filter.getFilePath",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.memoryFilterGetBuffer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'memoryFilterGetBuffer'. Expected 0 arguments. Function Signature: memoryFilterGetBuffer()");return PDFNet.messageHandler.sendWithPromise("Filter.memoryFilterGetBuffer",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.memoryFilterSetAsInputFilter=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'memoryFilterSetAsInputFilter'. Expected 0 arguments. Function Signature: memoryFilterSetAsInputFilter()");return PDFNet.messageHandler.sendWithPromise("Filter.memoryFilterSetAsInputFilter",{filter:this.id},this.userPriority)};PDFNet.Filter.prototype.memoryFilterReset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'memoryFilterReset'. Expected 0 arguments. Function Signature: memoryFilterReset()");
return PDFNet.messageHandler.sendWithPromise("Filter.memoryFilterReset",{filter:this.id},this.userPriority)};PDFNet.FilterReader.create=function(filter){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Filter)");if(filter instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(filter instanceof
PDFNet.Filter)){if("object"==typeof filter)throw new TypeError("1st input argument in function 'create' is of type '"+filter.name+"'. Expected type 'Filter'. Function Signature: create(Filter).");throw new TypeError("1st input argument '"+filter+"' in function 'create' is of type '"+typeof filter+"'. Expected type 'Filter'. Function Signature: create(Filter).");}return PDFNet.messageHandler.sendWithPromise("filterReaderCreate",{filter:filter.id},this.userPriority).then(function(id){if("0"==id)return null;
id=new PDFNet.FilterReader(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FilterReader.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<
deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("FilterReader.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.FilterReader.prototype.attachFilter=function(filter){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'attachFilter'. Expected 1 argument. Function Signature: attachFilter(Filter)");
if(filter instanceof Promise)throw new TypeError("1st input argument in function 'attachFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(filter instanceof PDFNet.Filter)){if("object"==typeof filter)throw new TypeError("1st input argument in function 'attachFilter' is of type '"+filter.name+"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");throw new TypeError("1st input argument '"+filter+"' in function 'attachFilter' is of type '"+
typeof filter+"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");}return PDFNet.messageHandler.sendWithPromise("FilterReader.attachFilter",{reader:this.id,filter:filter.id},this.userPriority)};PDFNet.FilterReader.prototype.getAttachedFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAttachedFilter'. Expected 0 arguments. Function Signature: getAttachedFilter()");return PDFNet.messageHandler.sendWithPromise("FilterReader.getAttachedFilter",
{reader:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.FilterReader.prototype.seek=function(offset,origin){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'seek'. Expected 2 arguments. Function Signature: seek(number, number)");if(offset instanceof Promise)throw new TypeError("1st input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof offset)throw new TypeError("1st input argument '"+offset+"' in function 'seek' is of type '"+typeof offset+"'. Expected type 'number'. Function Signature: seek(number, number).");if(origin instanceof Promise)throw new TypeError("2nd input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof origin)throw new TypeError("2nd input argument '"+origin+"' in function 'seek' is of type '"+typeof origin+"'. Expected type 'number'. Function Signature: seek(number, number).");
return PDFNet.messageHandler.sendWithPromise("FilterReader.seek",{reader:this.id,offset:offset,origin:origin},this.userPriority)};PDFNet.FilterReader.prototype.tell=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tell'. Expected 0 arguments. Function Signature: tell()");return PDFNet.messageHandler.sendWithPromise("FilterReader.tell",{reader:this.id},this.userPriority)};PDFNet.FilterReader.prototype.count=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'count'. Expected 0 arguments. Function Signature: count()");return PDFNet.messageHandler.sendWithPromise("FilterReader.count",{reader:this.id},this.userPriority)};PDFNet.FilterReader.prototype.flush=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flush'. Expected 0 arguments. Function Signature: flush()");return PDFNet.messageHandler.sendWithPromise("FilterReader.flush",{reader:this.id},this.userPriority)};
PDFNet.FilterReader.prototype.flushAll=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flushAll'. Expected 0 arguments. Function Signature: flushAll()");return PDFNet.messageHandler.sendWithPromise("FilterReader.flushAll",{reader:this.id},this.userPriority)};PDFNet.FilterReader.prototype.get=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'get'. Expected 0 arguments. Function Signature: get()");
return PDFNet.messageHandler.sendWithPromise("FilterReader.get",{reader:this.id},this.userPriority)};PDFNet.FilterReader.prototype.peek=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'peek'. Expected 0 arguments. Function Signature: peek()");return PDFNet.messageHandler.sendWithPromise("FilterReader.peek",{reader:this.id},this.userPriority)};PDFNet.FilterWriter.create=function(filter){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Filter)");if(filter instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(filter instanceof PDFNet.Filter)){if("object"==typeof filter)throw new TypeError("1st input argument in function 'create' is of type '"+filter.name+"'. Expected type 'Filter'. Function Signature: create(Filter).");throw new TypeError("1st input argument '"+
filter+"' in function 'create' is of type '"+typeof filter+"'. Expected type 'Filter'. Function Signature: create(Filter).");}return PDFNet.messageHandler.sendWithPromise("filterWriterCreate",{filter:filter.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FilterWriter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FilterWriter.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");
for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("FilterWriter.destroy",{auto_dealloc_obj:this.id},this.userPriority)};
PDFNet.FilterWriter.prototype.attachFilter=function(filter){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'attachFilter'. Expected 1 argument. Function Signature: attachFilter(Filter)");if(filter instanceof Promise)throw new TypeError("1st input argument in function 'attachFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(filter instanceof PDFNet.Filter)){if("object"==typeof filter)throw new TypeError("1st input argument in function 'attachFilter' is of type '"+
filter.name+"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");throw new TypeError("1st input argument '"+filter+"' in function 'attachFilter' is of type '"+typeof filter+"'. Expected type 'Filter'. Function Signature: attachFilter(Filter).");}return PDFNet.messageHandler.sendWithPromise("FilterWriter.attachFilter",{writer:this.id,filter:filter.id},this.userPriority)};PDFNet.FilterWriter.prototype.getAttachedFilter=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getAttachedFilter'. Expected 0 arguments. Function Signature: getAttachedFilter()");return PDFNet.messageHandler.sendWithPromise("FilterWriter.getAttachedFilter",{writer:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.FilterWriter.prototype.seek=function(offset,origin){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'seek'. Expected 2 arguments. Function Signature: seek(number, number)");
if(offset instanceof Promise)throw new TypeError("1st input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof offset)throw new TypeError("1st input argument '"+offset+"' in function 'seek' is of type '"+typeof offset+"'. Expected type 'number'. Function Signature: seek(number, number).");if(origin instanceof Promise)throw new TypeError("2nd input argument in function 'seek' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof origin)throw new TypeError("2nd input argument '"+origin+"' in function 'seek' is of type '"+typeof origin+"'. Expected type 'number'. Function Signature: seek(number, number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.seek",{writer:this.id,offset:offset,origin:origin},this.userPriority)};PDFNet.FilterWriter.prototype.tell=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tell'. Expected 0 arguments. Function Signature: tell()");
return PDFNet.messageHandler.sendWithPromise("FilterWriter.tell",{writer:this.id},this.userPriority)};PDFNet.FilterWriter.prototype.count=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'count'. Expected 0 arguments. Function Signature: count()");return PDFNet.messageHandler.sendWithPromise("FilterWriter.count",{writer:this.id},this.userPriority)};PDFNet.FilterWriter.prototype.flush=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'flush'. Expected 0 arguments. Function Signature: flush()");return PDFNet.messageHandler.sendWithPromise("FilterWriter.flush",{writer:this.id},this.userPriority)};PDFNet.FilterWriter.prototype.flushAll=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flushAll'. Expected 0 arguments. Function Signature: flushAll()");return PDFNet.messageHandler.sendWithPromise("FilterWriter.flushAll",{writer:this.id},this.userPriority)};
PDFNet.FilterWriter.prototype.writeUChar=function(ch){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeUChar'. Expected 1 argument. Function Signature: writeUChar(number)");if(ch instanceof Promise)throw new TypeError("1st input argument in function 'writeUChar' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof ch)throw new TypeError("1st input argument '"+ch+"' in function 'writeUChar' is of type '"+
typeof ch+"'. Expected type 'number'. Function Signature: writeUChar(number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeUChar",{writer:this.id,ch:ch},this.userPriority)};PDFNet.FilterWriter.prototype.writeInt16=function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeInt16'. Expected 1 argument. Function Signature: writeInt16(number)");if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeInt16' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeInt16' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeInt16(number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeInt16",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeUInt16=function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeUInt16'. Expected 1 argument. Function Signature: writeUInt16(number)");
if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeUInt16' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeUInt16' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeUInt16(number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeUInt16",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeInt32=
function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeInt32'. Expected 1 argument. Function Signature: writeInt32(number)");if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeInt32' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeInt32' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeInt32(number).");
return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeInt32",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeUInt32=function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeUInt32'. Expected 1 argument. Function Signature: writeUInt32(number)");if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeUInt32' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeUInt32' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeUInt32(number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeUInt32",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeInt64=function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeInt64'. Expected 1 argument. Function Signature: writeInt64(number)");
if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeInt64' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeInt64' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeInt64(number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeInt64",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeUInt64=
function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeUInt64'. Expected 1 argument. Function Signature: writeUInt64(number)");if(num instanceof Promise)throw new TypeError("1st input argument in function 'writeUInt64' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'writeUInt64' is of type '"+typeof num+"'. Expected type 'number'. Function Signature: writeUInt64(number).");
return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeUInt64",{writer:this.id,num:num},this.userPriority)};PDFNet.FilterWriter.prototype.writeString=function(str){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeString'. Expected 1 argument. Function Signature: writeString(string)");if(str instanceof Promise)throw new TypeError("1st input argument in function 'writeString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof str)throw new TypeError("1st input argument '"+str+"' in function 'writeString' is of type '"+typeof str+"'. Expected type 'string'. Function Signature: writeString(string).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeString",{writer:this.id,str:str},this.userPriority)};PDFNet.FilterWriter.prototype.writeFilter=function(reader){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeFilter'. Expected 1 argument. Function Signature: writeFilter(FilterReader)");
if(reader instanceof Promise)throw new TypeError("1st input argument in function 'writeFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(reader instanceof PDFNet.FilterReader)){if("object"==typeof reader)throw new TypeError("1st input argument in function 'writeFilter' is of type '"+reader.name+"'. Expected type 'FilterReader'. Function Signature: writeFilter(FilterReader).");throw new TypeError("1st input argument '"+reader+"' in function 'writeFilter' is of type '"+
typeof reader+"'. Expected type 'FilterReader'. Function Signature: writeFilter(FilterReader).");}return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeFilter",{writer:this.id,reader:reader.id},this.userPriority)};PDFNet.FilterWriter.prototype.writeLine=function(line,eol){"undefined"===typeof eol&&(eol=13);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeLine'. Expected 1 to 2 arguments. Function Signature: writeLine(string, number)");
if(line instanceof Promise)throw new TypeError("1st input argument in function 'writeLine' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof line&&null!==line)throw new TypeError("1st input argument '"+line+"' in function 'writeLine' is of type '"+typeof line+"'. Expected type 'string'. Function Signature: writeLine(string, number).");if(eol instanceof Promise)throw new TypeError("2nd input argument in function 'writeLine' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof eol)throw new TypeError("2nd input argument '"+eol+"' in function 'writeLine' is of type '"+typeof eol+"'. Expected type 'number'. Function Signature: writeLine(string, number).");return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeLine",{writer:this.id,line:line,eol:eol},this.userPriority)};PDFNet.FilterWriter.prototype.writeBuffer=function(buf){buf instanceof Array&&(buf=new Float64Array(buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeBuffer'. Expected 1 argument. Function Signature: writeBuffer(ArrayBuffer)");
if(buf instanceof Promise)throw new TypeError("1st input argument in function 'writeBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("1st input argument in function 'writeBuffer' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: writeBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+buf+"' in function 'writeBuffer' is of type '"+typeof buf+
"'. Expected type 'ArrayBuffer'. Function Signature: writeBuffer(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("FilterWriter.writeBuffer",{writer:this.id,buf:buf.buffer},this.userPriority)};PDFNet.OCG.create=function(pdfdoc,name){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(PDFDoc, string)");if(pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pdfdoc instanceof PDFNet.PDFDoc||pdfdoc instanceof PDFNet.SDFDoc||pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof pdfdoc)throw new TypeError("1st input argument in function 'create' is of type '"+pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, string).");throw new TypeError("1st input argument '"+pdfdoc+"' in function 'create' is of type '"+typeof pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, string).");}if(name instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'create' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: create(PDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("ocgCreate",{pdfdoc:pdfdoc.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCG(id)})};PDFNet.OCG.createFromObj=function(ocg_dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");
if(ocg_dict instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ocg_dict instanceof PDFNet.Obj)){if("object"==typeof ocg_dict)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+ocg_dict.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+ocg_dict+"' in function 'createFromObj' is of type '"+
typeof ocg_dict+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("ocgCreateFromObj",{ocg_dict:ocg_dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCG(id)})};PDFNet.OCG.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("OCG.copy",{ocg:this.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCG(id)})};PDFNet.OCG.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("OCG.getSDFObj",{ocg:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCG.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("OCG.isValid",{ocg:this.id},this.userPriority)};PDFNet.OCG.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");return PDFNet.messageHandler.sendWithPromise("OCG.getName",{c:this.id},this.userPriority)};PDFNet.OCG.prototype.setName=
function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setName'. Expected 1 argument. Function Signature: setName(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setName' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: setName(string).");
return PDFNet.messageHandler.sendWithPromise("OCG.setName",{c:this.id,value:value},this.userPriority)};PDFNet.OCG.prototype.getIntent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIntent'. Expected 0 arguments. Function Signature: getIntent()");return PDFNet.messageHandler.sendWithPromise("OCG.getIntent",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCG.prototype.setIntent=function(value){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntent'. Expected 1 argument. Function Signature: setIntent(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setIntent' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setIntent' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setIntent(Obj).");
throw new TypeError("1st input argument '"+value+"' in function 'setIntent' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setIntent(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCG.setIntent",{c:this.id,value:value.id},this.userPriority)};PDFNet.OCG.prototype.hasUsage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasUsage'. Expected 0 arguments. Function Signature: hasUsage()");return PDFNet.messageHandler.sendWithPromise("OCG.hasUsage",
{c:this.id},this.userPriority)};PDFNet.OCG.prototype.getUsage=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUsage'. Expected 1 argument. Function Signature: getUsage(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'getUsage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'getUsage' is of type '"+
typeof key+"'. Expected type 'string'. Function Signature: getUsage(string).");return PDFNet.messageHandler.sendWithPromise("OCG.getUsage",{c:this.id,key:key},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCG.prototype.getCurrentState=function(ctx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCurrentState'. Expected 1 argument. Function Signature: getCurrentState(OCGContext)");if(ctx instanceof Promise)throw new TypeError("1st input argument in function 'getCurrentState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("1st input argument in function 'getCurrentState' is of type '"+ctx.name+"'. Expected type 'OCGContext'. Function Signature: getCurrentState(OCGContext).");throw new TypeError("1st input argument '"+ctx+"' in function 'getCurrentState' is of type '"+typeof ctx+"'. Expected type 'OCGContext'. Function Signature: getCurrentState(OCGContext).");}return PDFNet.messageHandler.sendWithPromise("OCG.getCurrentState",{c:this.id,
ctx:ctx.id},this.userPriority)};PDFNet.OCG.prototype.setCurrentState=function(ctx,state){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCurrentState'. Expected 2 arguments. Function Signature: setCurrentState(OCGContext, boolean)");if(ctx instanceof Promise)throw new TypeError("1st input argument in function 'setCurrentState' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ctx instanceof PDFNet.OCGContext)){if("object"==
typeof ctx)throw new TypeError("1st input argument in function 'setCurrentState' is of type '"+ctx.name+"'. Expected type 'OCGContext'. Function Signature: setCurrentState(OCGContext, boolean).");throw new TypeError("1st input argument '"+ctx+"' in function 'setCurrentState' is of type '"+typeof ctx+"'. Expected type 'OCGContext'. Function Signature: setCurrentState(OCGContext, boolean).");}if(state instanceof Promise)throw new TypeError("2nd input argument in function 'setCurrentState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof state)throw new TypeError("2nd input argument '"+state+"' in function 'setCurrentState' is of type '"+typeof state+"'. Expected type 'boolean'. Function Signature: setCurrentState(OCGContext, boolean).");return PDFNet.messageHandler.sendWithPromise("OCG.setCurrentState",{c:this.id,ctx:ctx.id,state:state},this.userPriority)};PDFNet.OCG.prototype.getInitialState=function(cfg){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInitialState'. Expected 1 argument. Function Signature: getInitialState(OCGConfig)");
if(cfg instanceof Promise)throw new TypeError("1st input argument in function 'getInitialState' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cfg instanceof PDFNet.OCGConfig)){if("object"==typeof cfg)throw new TypeError("1st input argument in function 'getInitialState' is of type '"+cfg.name+"'. Expected type 'OCGConfig'. Function Signature: getInitialState(OCGConfig).");throw new TypeError("1st input argument '"+cfg+"' in function 'getInitialState' is of type '"+
typeof cfg+"'. Expected type 'OCGConfig'. Function Signature: getInitialState(OCGConfig).");}return PDFNet.messageHandler.sendWithPromise("OCG.getInitialState",{c:this.id,cfg:cfg.id},this.userPriority)};PDFNet.OCG.prototype.setInitialState=function(cfg,state){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInitialState'. Expected 2 arguments. Function Signature: setInitialState(OCGConfig, boolean)");if(cfg instanceof Promise)throw new TypeError("1st input argument in function 'setInitialState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(cfg instanceof PDFNet.OCGConfig)){if("object"==typeof cfg)throw new TypeError("1st input argument in function 'setInitialState' is of type '"+cfg.name+"'. Expected type 'OCGConfig'. Function Signature: setInitialState(OCGConfig, boolean).");throw new TypeError("1st input argument '"+cfg+"' in function 'setInitialState' is of type '"+typeof cfg+"'. Expected type 'OCGConfig'. Function Signature: setInitialState(OCGConfig, boolean).");}if(state instanceof Promise)throw new TypeError("2nd input argument in function 'setInitialState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof state)throw new TypeError("2nd input argument '"+state+"' in function 'setInitialState' is of type '"+typeof state+"'. Expected type 'boolean'. Function Signature: setInitialState(OCGConfig, boolean).");return PDFNet.messageHandler.sendWithPromise("OCG.setInitialState",{c:this.id,cfg:cfg.id,state:state},this.userPriority)};PDFNet.OCG.prototype.isLocked=function(cfg){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isLocked'. Expected 1 argument. Function Signature: isLocked(OCGConfig)");
if(cfg instanceof Promise)throw new TypeError("1st input argument in function 'isLocked' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cfg instanceof PDFNet.OCGConfig)){if("object"==typeof cfg)throw new TypeError("1st input argument in function 'isLocked' is of type '"+cfg.name+"'. Expected type 'OCGConfig'. Function Signature: isLocked(OCGConfig).");throw new TypeError("1st input argument '"+cfg+"' in function 'isLocked' is of type '"+typeof cfg+"'. Expected type 'OCGConfig'. Function Signature: isLocked(OCGConfig).");
}return PDFNet.messageHandler.sendWithPromise("OCG.isLocked",{c:this.id,cfg:cfg.id},this.userPriority)};PDFNet.OCG.prototype.setLocked=function(cfg,state){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLocked'. Expected 2 arguments. Function Signature: setLocked(OCGConfig, boolean)");if(cfg instanceof Promise)throw new TypeError("1st input argument in function 'setLocked' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(cfg instanceof PDFNet.OCGConfig)){if("object"==typeof cfg)throw new TypeError("1st input argument in function 'setLocked' is of type '"+cfg.name+"'. Expected type 'OCGConfig'. Function Signature: setLocked(OCGConfig, boolean).");throw new TypeError("1st input argument '"+cfg+"' in function 'setLocked' is of type '"+typeof cfg+"'. Expected type 'OCGConfig'. Function Signature: setLocked(OCGConfig, boolean).");}if(state instanceof Promise)throw new TypeError("2nd input argument in function 'setLocked' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof state)throw new TypeError("2nd input argument '"+state+"' in function 'setLocked' is of type '"+typeof state+"'. Expected type 'boolean'. Function Signature: setLocked(OCGConfig, boolean).");return PDFNet.messageHandler.sendWithPromise("OCG.setLocked",{c:this.id,cfg:cfg.id,state:state},this.userPriority)};PDFNet.OCGConfig.createFromObj=function(dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");
if(dict instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dict instanceof PDFNet.Obj)){if("object"==typeof dict)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+dict.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+dict+"' in function 'createFromObj' is of type '"+typeof dict+
"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("ocgConfigCreateFromObj",{dict:dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCGConfig(id)})};PDFNet.OCGConfig.create=function(pdfdoc,default_config){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(PDFDoc, boolean)");if(pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pdfdoc instanceof PDFNet.PDFDoc||pdfdoc instanceof PDFNet.SDFDoc||pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof pdfdoc)throw new TypeError("1st input argument in function 'create' is of type '"+pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, boolean).");throw new TypeError("1st input argument '"+pdfdoc+"' in function 'create' is of type '"+typeof pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, boolean).");}if(default_config instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof default_config)throw new TypeError("2nd input argument '"+default_config+"' in function 'create' is of type '"+typeof default_config+"'. Expected type 'boolean'. Function Signature: create(PDFDoc, boolean).");return PDFNet.messageHandler.sendWithPromise("ocgConfigCreate",{pdfdoc:pdfdoc.id,default_config:default_config},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCGConfig(id)})};PDFNet.OCGConfig.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.copy",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCGConfig(id)})};PDFNet.OCGConfig.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getSDFObj",
{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.getOrder=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOrder'. Expected 0 arguments. Function Signature: getOrder()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getOrder",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.setOrder=function(value){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOrder'. Expected 1 argument. Function Signature: setOrder(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setOrder' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setOrder' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setOrder(Obj).");
throw new TypeError("1st input argument '"+value+"' in function 'setOrder' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setOrder(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCGConfig.setOrder",{c:this.id,value:value.id},this.userPriority)};PDFNet.OCGConfig.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getName",
{c:this.id},this.userPriority)};PDFNet.OCGConfig.prototype.setName=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setName'. Expected 1 argument. Function Signature: setName(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setName' is of type '"+
typeof value+"'. Expected type 'string'. Function Signature: setName(string).");return PDFNet.messageHandler.sendWithPromise("OCGConfig.setName",{c:this.id,value:value},this.userPriority)};PDFNet.OCGConfig.prototype.getCreator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCreator'. Expected 0 arguments. Function Signature: getCreator()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getCreator",{c:this.id},this.userPriority)};
PDFNet.OCGConfig.prototype.setCreator=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCreator'. Expected 1 argument. Function Signature: setCreator(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setCreator' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setCreator' is of type '"+
typeof value+"'. Expected type 'string'. Function Signature: setCreator(string).");return PDFNet.messageHandler.sendWithPromise("OCGConfig.setCreator",{c:this.id,value:value},this.userPriority)};PDFNet.OCGConfig.prototype.getInitBaseState=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInitBaseState'. Expected 0 arguments. Function Signature: getInitBaseState()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getInitBaseState",
{c:this.id},this.userPriority)};PDFNet.OCGConfig.prototype.setInitBaseState=function(value){"undefined"===typeof value&&(value="ON");if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInitBaseState'. Expected at most 1 arguments. Function Signature: setInitBaseState(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setInitBaseState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof value&&null!==value)throw new TypeError("1st input argument '"+value+"' in function 'setInitBaseState' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: setInitBaseState(string).");return PDFNet.messageHandler.sendWithPromise("OCGConfig.setInitBaseState",{c:this.id,value:value},this.userPriority)};PDFNet.OCGConfig.prototype.getInitOnStates=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInitOnStates'. Expected 0 arguments. Function Signature: getInitOnStates()");
return PDFNet.messageHandler.sendWithPromise("OCGConfig.getInitOnStates",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.setInitOnStates=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInitOnStates'. Expected 1 argument. Function Signature: setInitOnStates(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setInitOnStates' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setInitOnStates' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setInitOnStates(Obj).");throw new TypeError("1st input argument '"+value+"' in function 'setInitOnStates' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setInitOnStates(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCGConfig.setInitOnStates",{c:this.id,value:value.id},
this.userPriority)};PDFNet.OCGConfig.prototype.getInitOffStates=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInitOffStates'. Expected 0 arguments. Function Signature: getInitOffStates()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getInitOffStates",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.setInitOffStates=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setInitOffStates'. Expected 1 argument. Function Signature: setInitOffStates(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setInitOffStates' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setInitOffStates' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setInitOffStates(Obj).");
throw new TypeError("1st input argument '"+value+"' in function 'setInitOffStates' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setInitOffStates(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCGConfig.setInitOffStates",{c:this.id,value:value.id},this.userPriority)};PDFNet.OCGConfig.prototype.getIntent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIntent'. Expected 0 arguments. Function Signature: getIntent()");
return PDFNet.messageHandler.sendWithPromise("OCGConfig.getIntent",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.setIntent=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntent'. Expected 1 argument. Function Signature: setIntent(Obj)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setIntent' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setIntent' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setIntent(Obj).");throw new TypeError("1st input argument '"+value+"' in function 'setIntent' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: setIntent(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCGConfig.setIntent",{c:this.id,value:value.id},this.userPriority)};PDFNet.OCGConfig.prototype.getLockedOCGs=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLockedOCGs'. Expected 0 arguments. Function Signature: getLockedOCGs()");return PDFNet.messageHandler.sendWithPromise("OCGConfig.getLockedOCGs",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCGConfig.prototype.setLockedOCGs=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLockedOCGs'. Expected 1 argument. Function Signature: setLockedOCGs(Obj)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'setLockedOCGs' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("1st input argument in function 'setLockedOCGs' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: setLockedOCGs(Obj).");throw new TypeError("1st input argument '"+value+"' in function 'setLockedOCGs' is of type '"+typeof value+
"'. Expected type 'Obj'. Function Signature: setLockedOCGs(Obj).");}return PDFNet.messageHandler.sendWithPromise("OCGConfig.setLockedOCGs",{c:this.id,value:value.id},this.userPriority)};PDFNet.OCGContext.createFromConfig=function(cfg){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromConfig'. Expected 1 argument. Function Signature: createFromConfig(OCGConfig)");if(cfg instanceof Promise)throw new TypeError("1st input argument in function 'createFromConfig' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(cfg instanceof PDFNet.OCGConfig)){if("object"==typeof cfg)throw new TypeError("1st input argument in function 'createFromConfig' is of type '"+cfg.name+"'. Expected type 'OCGConfig'. Function Signature: createFromConfig(OCGConfig).");throw new TypeError("1st input argument '"+cfg+"' in function 'createFromConfig' is of type '"+typeof cfg+"'. Expected type 'OCGConfig'. Function Signature: createFromConfig(OCGConfig).");}return PDFNet.messageHandler.sendWithPromise("ocgContextCreateFromConfig",
{cfg:cfg.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.OCGContext(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.OCGContext.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("OCGContext.copy",{c:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.OCGContext(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.OCGContext.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("OCGContext.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.OCGContext.prototype.getState=function(grp){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getState'. Expected 1 argument. Function Signature: getState(OCG)");if(grp instanceof Promise)throw new TypeError("1st input argument in function 'getState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(grp instanceof PDFNet.OCG)){if("object"==typeof grp)throw new TypeError("1st input argument in function 'getState' is of type '"+grp.name+"'. Expected type 'OCG'. Function Signature: getState(OCG).");throw new TypeError("1st input argument '"+grp+"' in function 'getState' is of type '"+typeof grp+"'. Expected type 'OCG'. Function Signature: getState(OCG).");}return PDFNet.messageHandler.sendWithPromise("OCGContext.getState",{c:this.id,grp:grp.id},this.userPriority)};PDFNet.OCGContext.prototype.setState=
function(grp,state){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setState'. Expected 2 arguments. Function Signature: setState(OCG, boolean)");if(grp instanceof Promise)throw new TypeError("1st input argument in function 'setState' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(grp instanceof PDFNet.OCG)){if("object"==typeof grp)throw new TypeError("1st input argument in function 'setState' is of type '"+grp.name+
"'. Expected type 'OCG'. Function Signature: setState(OCG, boolean).");throw new TypeError("1st input argument '"+grp+"' in function 'setState' is of type '"+typeof grp+"'. Expected type 'OCG'. Function Signature: setState(OCG, boolean).");}if(state instanceof Promise)throw new TypeError("2nd input argument in function 'setState' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof state)throw new TypeError("2nd input argument '"+state+"' in function 'setState' is of type '"+
typeof state+"'. Expected type 'boolean'. Function Signature: setState(OCG, boolean).");return PDFNet.messageHandler.sendWithPromise("OCGContext.setState",{c:this.id,grp:grp.id,state:state},this.userPriority)};PDFNet.OCGContext.prototype.resetStates=function(all_on){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'resetStates'. Expected 1 argument. Function Signature: resetStates(boolean)");if(all_on instanceof Promise)throw new TypeError("1st input argument in function 'resetStates' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof all_on)throw new TypeError("1st input argument '"+all_on+"' in function 'resetStates' is of type '"+typeof all_on+"'. Expected type 'boolean'. Function Signature: resetStates(boolean).");return PDFNet.messageHandler.sendWithPromise("OCGContext.resetStates",{c:this.id,all_on:all_on},this.userPriority)};PDFNet.OCGContext.prototype.setNonOCDrawing=function(draw_non_OC){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setNonOCDrawing'. Expected 1 argument. Function Signature: setNonOCDrawing(boolean)");
if(draw_non_OC instanceof Promise)throw new TypeError("1st input argument in function 'setNonOCDrawing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof draw_non_OC)throw new TypeError("1st input argument '"+draw_non_OC+"' in function 'setNonOCDrawing' is of type '"+typeof draw_non_OC+"'. Expected type 'boolean'. Function Signature: setNonOCDrawing(boolean).");return PDFNet.messageHandler.sendWithPromise("OCGContext.setNonOCDrawing",{c:this.id,
draw_non_OC:draw_non_OC},this.userPriority)};PDFNet.OCGContext.prototype.getNonOCDrawing=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNonOCDrawing'. Expected 0 arguments. Function Signature: getNonOCDrawing()");return PDFNet.messageHandler.sendWithPromise("OCGContext.getNonOCDrawing",{c:this.id},this.userPriority)};PDFNet.OCGContext.prototype.setOCDrawMode=function(oc_draw_mode){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setOCDrawMode'. Expected 1 argument. Function Signature: setOCDrawMode(number)");if(oc_draw_mode instanceof Promise)throw new TypeError("1st input argument in function 'setOCDrawMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof oc_draw_mode)throw new TypeError("1st input argument '"+oc_draw_mode+"' in function 'setOCDrawMode' is of type '"+typeof oc_draw_mode+"'. Expected type 'number'. Function Signature: setOCDrawMode(number).");
return PDFNet.messageHandler.sendWithPromise("OCGContext.setOCDrawMode",{c:this.id,oc_draw_mode:oc_draw_mode},this.userPriority)};PDFNet.OCGContext.prototype.getOCMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOCMode'. Expected 0 arguments. Function Signature: getOCMode()");return PDFNet.messageHandler.sendWithPromise("OCGContext.getOCMode",{c:this.id},this.userPriority)};PDFNet.OCMD.createFromObj=function(ocmd_dict){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(ocmd_dict instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ocmd_dict instanceof PDFNet.Obj)){if("object"==typeof ocmd_dict)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+ocmd_dict.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
throw new TypeError("1st input argument '"+ocmd_dict+"' in function 'createFromObj' is of type '"+typeof ocmd_dict+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("ocmdCreateFromObj",{ocmd_dict:ocmd_dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCMD(id)})};PDFNet.OCMD.create=function(pdfdoc,ocgs,vis_policy){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 3 arguments. Function Signature: create(PDFDoc, Obj, number)");
if(pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pdfdoc instanceof PDFNet.PDFDoc||pdfdoc instanceof PDFNet.SDFDoc||pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof pdfdoc)throw new TypeError("1st input argument in function 'create' is of type '"+pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, Obj, number).");throw new TypeError("1st input argument '"+
pdfdoc+"' in function 'create' is of type '"+typeof pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, Obj, number).");}if(ocgs instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ocgs instanceof PDFNet.Obj)){if("object"==typeof ocgs)throw new TypeError("2nd input argument in function 'create' is of type '"+ocgs.name+"'. Expected type 'Obj'. Function Signature: create(PDFDoc, Obj, number).");
throw new TypeError("2nd input argument '"+ocgs+"' in function 'create' is of type '"+typeof ocgs+"'. Expected type 'Obj'. Function Signature: create(PDFDoc, Obj, number).");}if(vis_policy instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vis_policy)throw new TypeError("3rd input argument '"+vis_policy+"' in function 'create' is of type '"+typeof vis_policy+"'. Expected type 'number'. Function Signature: create(PDFDoc, Obj, number).");
return PDFNet.messageHandler.sendWithPromise("ocmdCreate",{pdfdoc:pdfdoc.id,ocgs:ocgs.id,vis_policy:vis_policy},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCMD(id)})};PDFNet.OCMD.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("OCMD.copy",{ocmd:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.OCMD(id)})};PDFNet.OCMD.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("OCMD.getSDFObj",{ocmd:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCMD.prototype.getOCGs=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOCGs'. Expected 0 arguments. Function Signature: getOCGs()");
return PDFNet.messageHandler.sendWithPromise("OCMD.getOCGs",{ocmd:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.OCMD.prototype.getVisibilityExpression=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVisibilityExpression'. Expected 0 arguments. Function Signature: getVisibilityExpression()");return PDFNet.messageHandler.sendWithPromise("OCMD.getVisibilityExpression",{ocmd:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.OCMD.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("OCMD.isValid",{ocmd:this.id},this.userPriority)};PDFNet.OCMD.prototype.isCurrentlyVisible=function(ctx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isCurrentlyVisible'. Expected 1 argument. Function Signature: isCurrentlyVisible(OCGContext)");
if(ctx instanceof Promise)throw new TypeError("1st input argument in function 'isCurrentlyVisible' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("1st input argument in function 'isCurrentlyVisible' is of type '"+ctx.name+"'. Expected type 'OCGContext'. Function Signature: isCurrentlyVisible(OCGContext).");throw new TypeError("1st input argument '"+ctx+"' in function 'isCurrentlyVisible' is of type '"+
typeof ctx+"'. Expected type 'OCGContext'. Function Signature: isCurrentlyVisible(OCGContext).");}return PDFNet.messageHandler.sendWithPromise("OCMD.isCurrentlyVisible",{ocmd:this.id,ctx:ctx.id},this.userPriority)};PDFNet.OCMD.prototype.getVisibilityPolicy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVisibilityPolicy'. Expected 0 arguments. Function Signature: getVisibilityPolicy()");return PDFNet.messageHandler.sendWithPromise("OCMD.getVisibilityPolicy",
{ocmd:this.id},this.userPriority)};PDFNet.OCMD.prototype.setVisibilityPolicy=function(vis_policy){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setVisibilityPolicy'. Expected 1 argument. Function Signature: setVisibilityPolicy(number)");if(vis_policy instanceof Promise)throw new TypeError("1st input argument in function 'setVisibilityPolicy' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vis_policy)throw new TypeError("1st input argument '"+
vis_policy+"' in function 'setVisibilityPolicy' is of type '"+typeof vis_policy+"'. Expected type 'number'. Function Signature: setVisibilityPolicy(number).");return PDFNet.messageHandler.sendWithPromise("OCMD.setVisibilityPolicy",{ocmd:this.id,vis_policy:vis_policy},this.userPriority)};PDFNet.PDFACompliance.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=
-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.destroy",{auto_dealloc_obj:this.id},this.userPriority)};
PDFNet.PDFACompliance.prototype.getErrorCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getErrorCount'. Expected 0 arguments. Function Signature: getErrorCount()");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.getErrorCount",{pdfac:this.id},this.userPriority)};PDFNet.PDFACompliance.prototype.getError=function(idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getError'. Expected 1 argument. Function Signature: getError(number)");
if(idx instanceof Promise)throw new TypeError("1st input argument in function 'getError' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'getError' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: getError(number).");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.getError",{pdfac:this.id,idx:idx},this.userPriority)};PDFNet.PDFACompliance.prototype.getRefObjCount=
function(id){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRefObjCount'. Expected 1 argument. Function Signature: getRefObjCount(number)");if(id instanceof Promise)throw new TypeError("1st input argument in function 'getRefObjCount' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof id)throw new TypeError("1st input argument '"+id+"' in function 'getRefObjCount' is of type '"+typeof id+"'. Expected type 'number'. Function Signature: getRefObjCount(number).");
return PDFNet.messageHandler.sendWithPromise("PDFACompliance.getRefObjCount",{pdfac:this.id,id:id},this.userPriority)};PDFNet.PDFACompliance.prototype.getRefObj=function(id,err_idx){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRefObj'. Expected 2 arguments. Function Signature: getRefObj(number, number)");if(id instanceof Promise)throw new TypeError("1st input argument in function 'getRefObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof id)throw new TypeError("1st input argument '"+id+"' in function 'getRefObj' is of type '"+typeof id+"'. Expected type 'number'. Function Signature: getRefObj(number, number).");if(err_idx instanceof Promise)throw new TypeError("2nd input argument in function 'getRefObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof err_idx)throw new TypeError("2nd input argument '"+err_idx+"' in function 'getRefObj' is of type '"+typeof err_idx+
"'. Expected type 'number'. Function Signature: getRefObj(number, number).");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.getRefObj",{pdfac:this.id,id:id,err_idx:err_idx},this.userPriority)};PDFNet.PDFACompliance.getPDFAErrorMessage=function(id){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPDFAErrorMessage'. Expected 1 argument. Function Signature: getPDFAErrorMessage(number)");if(id instanceof Promise)throw new TypeError("1st input argument in function 'getPDFAErrorMessage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof id)throw new TypeError("1st input argument '"+id+"' in function 'getPDFAErrorMessage' is of type '"+typeof id+"'. Expected type 'number'. Function Signature: getPDFAErrorMessage(number).");return PDFNet.messageHandler.sendWithPromise("pdfaComplianceGetPDFAErrorMessage",{id:id},this.userPriority)};PDFNet.PDFACompliance.prototype.saveAsFromFileName=function(file_path,linearized){"undefined"===typeof linearized&&(linearized=!1);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'saveAsFromFileName'. Expected 1 to 2 arguments. Function Signature: saveAsFromFileName(string, boolean)");if(file_path instanceof Promise)throw new TypeError("1st input argument in function 'saveAsFromFileName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof file_path)throw new TypeError("1st input argument '"+file_path+"' in function 'saveAsFromFileName' is of type '"+typeof file_path+"'. Expected type 'string'. Function Signature: saveAsFromFileName(string, boolean).");
if(linearized instanceof Promise)throw new TypeError("2nd input argument in function 'saveAsFromFileName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof linearized)throw new TypeError("2nd input argument '"+linearized+"' in function 'saveAsFromFileName' is of type '"+typeof linearized+"'. Expected type 'boolean'. Function Signature: saveAsFromFileName(string, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.saveAsFromFileName",
{pdfac:this.id,file_path:file_path,linearized:linearized},this.userPriority)};PDFNet.PDFACompliance.prototype.saveAsFromBuffer=function(linearized){"undefined"===typeof linearized&&(linearized=!1);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveAsFromBuffer'. Expected at most 1 arguments. Function Signature: saveAsFromBuffer(boolean)");if(linearized instanceof Promise)throw new TypeError("3rd input argument in function 'saveAsFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof linearized)throw new TypeError("3rd input argument '"+linearized+"' in function 'saveAsFromBuffer' is of type '"+typeof linearized+"'. Expected type 'boolean'. Function Signature: saveAsFromBuffer(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFACompliance.saveAsFromBuffer",{pdfac:this.id,linearized:linearized},this.userPriority).then(function(id){return new Uint8Array(id)})};PDFNet.AttrObj.create=function(dict){"undefined"===typeof dict&&(dict=new PDFNet.Obj("0"));
if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dict instanceof PDFNet.Obj)){if("object"==typeof dict)throw new TypeError("1st input argument in function 'create' is of type '"+dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");
throw new TypeError("1st input argument '"+dict+"' in function 'create' is of type '"+typeof dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("attrObjCreate",{dict:dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.AttrObj(id)})};PDFNet.AttrObj.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");
return PDFNet.messageHandler.sendWithPromise("AttrObj.copy",{a:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.AttrObj(id)})};PDFNet.AttrObj.prototype.getOwner=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOwner'. Expected 0 arguments. Function Signature: getOwner()");return PDFNet.messageHandler.sendWithPromise("AttrObj.getOwner",{obj:this.id},this.userPriority)};PDFNet.AttrObj.prototype.getSDFObj=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("AttrObj.getSDFObj",{obj:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ClassMap.create=function(dict){"undefined"===typeof dict&&(dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");
if(dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dict instanceof PDFNet.Obj)){if("object"==typeof dict)throw new TypeError("1st input argument in function 'create' is of type '"+dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+dict+"' in function 'create' is of type '"+typeof dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");
}return PDFNet.messageHandler.sendWithPromise("classMapCreate",{dict:dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ClassMap(id)})};PDFNet.ClassMap.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("ClassMap.copy",{p:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ClassMap(id)})};
PDFNet.ClassMap.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("ClassMap.isValid",{map:this.id},this.userPriority)};PDFNet.ClassMap.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");
return PDFNet.messageHandler.sendWithPromise("ClassMap.getSDFObj",{map:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ContentItem.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'copy'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.copy",{c:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ContentItem(id)})};PDFNet.ContentItem.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getType'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getType",{item:this},this.userPriority)};PDFNet.ContentItem.prototype.getParent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParent'. Expected 0 arguments. Function Signature: getParent()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getParent'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="ContentItem.getParent";return PDFNet.messageHandler.sendWithPromise("ContentItem.getParent",{item:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.item,me);return new PDFNet.SElement(id.result.obj,id.result.k)})};PDFNet.ContentItem.prototype.getPage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPage'. Expected 0 arguments. Function Signature: getPage()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getPage'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="ContentItem.getPage";return PDFNet.messageHandler.sendWithPromise("ContentItem.getPage",{item:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.item,me);
return new PDFNet.Page(id.result)})};PDFNet.ContentItem.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getSDFObj'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getSDFObj",{item:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ContentItem.prototype.getMCID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMCID'. Expected 0 arguments. Function Signature: getMCID()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getMCID'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getMCID",{item:this},this.userPriority)};PDFNet.ContentItem.prototype.getContainingStm=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getContainingStm'. Expected 0 arguments. Function Signature: getContainingStm()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getContainingStm'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getContainingStm",{item:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ContentItem.prototype.getStmOwner=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStmOwner'. Expected 0 arguments. Function Signature: getStmOwner()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStmOwner'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getStmOwner",{item:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ContentItem.prototype.getRefObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRefObj'. Expected 0 arguments. Function Signature: getRefObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getRefObj'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ContentItem.getRefObj",{item:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.RoleMap.create=function(dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dict instanceof PDFNet.Obj)){if("object"==typeof dict)throw new TypeError("1st input argument in function 'create' is of type '"+dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+dict+"' in function 'create' is of type '"+typeof dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("roleMapCreate",{dict:dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RoleMap(id)})};
PDFNet.RoleMap.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("RoleMap.copy",{p:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RoleMap(id)})};PDFNet.RoleMap.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");
return PDFNet.messageHandler.sendWithPromise("RoleMap.isValid",{map:this.id},this.userPriority)};PDFNet.RoleMap.prototype.getDirectMap=function(type){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDirectMap'. Expected 1 argument. Function Signature: getDirectMap(string)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'getDirectMap' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'getDirectMap' is of type '"+typeof type+"'. Expected type 'string'. Function Signature: getDirectMap(string).");return PDFNet.messageHandler.sendWithPromise("RoleMap.getDirectMap",{map:this.id,type:type},this.userPriority)};PDFNet.RoleMap.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");
return PDFNet.messageHandler.sendWithPromise("RoleMap.getSDFObj",{map:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SElement.create=function(dict){"undefined"===typeof dict&&(dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dict instanceof PDFNet.Obj)){if("object"==typeof dict)throw new TypeError("1st input argument in function 'create' is of type '"+dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+dict+"' in function 'create' is of type '"+typeof dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("sElementCreate",{dict:dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};
PDFNet.SElement.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(SElement)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.SElement)&&"SElement"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+
right.name+"'. Expected type 'SElement'. Function Signature: assign(SElement).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'SElement'. Function Signature: assign(SElement).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="SElement.assign";return PDFNet.messageHandler.sendWithPromise("SElement.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,
me)})};PDFNet.SElement.createFromPDFDoc=function(doc,struct_type){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromPDFDoc'. Expected 2 arguments. Function Signature: createFromPDFDoc(PDFDoc, string)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromPDFDoc' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||
doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromPDFDoc' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: createFromPDFDoc(PDFDoc, string).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromPDFDoc' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: createFromPDFDoc(PDFDoc, string).");}if(struct_type instanceof Promise)throw new TypeError("2nd input argument in function 'createFromPDFDoc' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof struct_type)throw new TypeError("2nd input argument '"+struct_type+"' in function 'createFromPDFDoc' is of type '"+typeof struct_type+"'. Expected type 'string'. Function Signature: createFromPDFDoc(PDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("sElementCreateFromPDFDoc",{doc:doc.id,struct_type:struct_type},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};PDFNet.SElement.prototype.insert=function(kid,insert_before){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'insert'. Expected 2 arguments. Function Signature: insert(SElement, number)");if(kid instanceof Promise)throw new TypeError("1st input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(kid instanceof PDFNet.SElement)&&"SElement"!=kid.name){if("object"==typeof kid)throw new TypeError("1st input argument in function 'insert' is of type '"+kid.name+"'. Expected type 'SElement'. Function Signature: insert(SElement, number).");
throw new TypeError("1st input argument '"+kid+"' in function 'insert' is of type '"+typeof kid+"'. Expected type 'SElement'. Function Signature: insert(SElement, number).");}if(insert_before instanceof Promise)throw new TypeError("2nd input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof insert_before)throw new TypeError("2nd input argument '"+insert_before+"' in function 'insert' is of type '"+typeof insert_before+
"'. Expected type 'number'. Function Signature: insert(SElement, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'insert'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof kid.yieldFunction)throw Error("Function '"+kid.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'insert'. Perhaps a yield statement is required for '"+
kid.yieldFunction+"'?");var me=this;this.yieldFunction="SElement.insert";return PDFNet.messageHandler.sendWithPromise("SElement.insert",{e:this,kid:kid,insert_before:insert_before},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.e,me)})};PDFNet.SElement.prototype.createContentItem=function(doc,page,insert_before){"undefined"===typeof insert_before&&(insert_before=-1);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createContentItem'. Expected 2 to 3 arguments. Function Signature: createContentItem(PDFDoc, Page, number)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createContentItem' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createContentItem' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: createContentItem(PDFDoc, Page, number).");throw new TypeError("1st input argument '"+
doc+"' in function 'createContentItem' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: createContentItem(PDFDoc, Page, number).");}if(page instanceof Promise)throw new TypeError("2nd input argument in function 'createContentItem' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("2nd input argument in function 'createContentItem' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createContentItem(PDFDoc, Page, number).");
throw new TypeError("2nd input argument '"+page+"' in function 'createContentItem' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createContentItem(PDFDoc, Page, number).");}if(insert_before instanceof Promise)throw new TypeError("3rd input argument in function 'createContentItem' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof insert_before)throw new TypeError("3rd input argument '"+insert_before+"' in function 'createContentItem' is of type '"+
typeof insert_before+"'. Expected type 'number'. Function Signature: createContentItem(PDFDoc, Page, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'createContentItem'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="SElement.createContentItem";return PDFNet.messageHandler.sendWithPromise("SElement.createContentItem",
{e:this,doc:doc.id,page:page.id,insert_before:insert_before},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.e,me);return id.result})};PDFNet.SElement.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.isValid",{e:this},this.userPriority)};PDFNet.SElement.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getType'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getType",{e:this},this.userPriority)};PDFNet.SElement.prototype.getNumKids=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumKids'. Expected 0 arguments. Function Signature: getNumKids()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getNumKids'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getNumKids",{e:this},this.userPriority)};PDFNet.SElement.prototype.isContentItem=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isContentItem'. Expected 1 argument. Function Signature: isContentItem(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'isContentItem' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'isContentItem' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: isContentItem(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isContentItem'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.isContentItem",
{e:this,index:index},this.userPriority)};PDFNet.SElement.prototype.getAsContentItem=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAsContentItem'. Expected 1 argument. Function Signature: getAsContentItem(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'getAsContentItem' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof index)throw new TypeError("1st input argument '"+
index+"' in function 'getAsContentItem' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getAsContentItem(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getAsContentItem'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getAsContentItem",{e:this,index:index},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ContentItem(id)})};PDFNet.SElement.prototype.getAsStructElem=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAsStructElem'. Expected 1 argument. Function Signature: getAsStructElem(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'getAsStructElem' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'getAsStructElem' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getAsStructElem(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getAsStructElem'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getAsStructElem",
{e:this,index:index},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};PDFNet.SElement.prototype.getParent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParent'. Expected 0 arguments. Function Signature: getParent()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getParent'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getParent",{e:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};PDFNet.SElement.prototype.getStructTreeRoot=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStructTreeRoot'. Expected 0 arguments. Function Signature: getStructTreeRoot()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+
" recently altered a struct object without yielding. That object is now being accessed by function 'getStructTreeRoot'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getStructTreeRoot",{e:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.STree(id)})};PDFNet.SElement.prototype.hasTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasTitle'. Expected 0 arguments. Function Signature: hasTitle()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'hasTitle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.hasTitle",{e:this},this.userPriority)};PDFNet.SElement.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getTitle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getTitle",{e:this},this.userPriority)};PDFNet.SElement.prototype.getID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getID'. Expected 0 arguments. Function Signature: getID()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getID'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getID",{e:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SElement.prototype.hasActualText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'hasActualText'. Expected 0 arguments. Function Signature: hasActualText()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'hasActualText'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.hasActualText",{e:this},this.userPriority)};PDFNet.SElement.prototype.getActualText=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getActualText'. Expected 0 arguments. Function Signature: getActualText()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getActualText'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getActualText",
{e:this},this.userPriority)};PDFNet.SElement.prototype.hasAlt=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasAlt'. Expected 0 arguments. Function Signature: hasAlt()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'hasAlt'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.hasAlt",
{e:this},this.userPriority)};PDFNet.SElement.prototype.getAlt=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAlt'. Expected 0 arguments. Function Signature: getAlt()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getAlt'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("SElement.getAlt",
{e:this},this.userPriority)};PDFNet.SElement.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getSDFObj'. Perhaps a yield statement is required for "+this.yieldFunction+"?");
return PDFNet.messageHandler.sendWithPromise("SElement.getSDFObj",{e:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.STree.create=function(struct_dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(struct_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(struct_dict instanceof PDFNet.Obj)){if("object"==typeof struct_dict)throw new TypeError("1st input argument in function 'create' is of type '"+struct_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+struct_dict+"' in function 'create' is of type '"+typeof struct_dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("sTreeCreate",{struct_dict:struct_dict.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.STree(id)})};PDFNet.STree.createFromPDFDoc=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromPDFDoc'. Expected 1 argument. Function Signature: createFromPDFDoc(PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromPDFDoc' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||
doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromPDFDoc' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: createFromPDFDoc(PDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromPDFDoc' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: createFromPDFDoc(PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("sTreeCreateFromPDFDoc",{doc:doc.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.STree(id)})};PDFNet.STree.prototype.insert=function(kid,insert_before){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insert'. Expected 2 arguments. Function Signature: insert(SElement, number)");if(kid instanceof Promise)throw new TypeError("1st input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(kid instanceof PDFNet.SElement)&&"SElement"!=kid.name){if("object"==
typeof kid)throw new TypeError("1st input argument in function 'insert' is of type '"+kid.name+"'. Expected type 'SElement'. Function Signature: insert(SElement, number).");throw new TypeError("1st input argument '"+kid+"' in function 'insert' is of type '"+typeof kid+"'. Expected type 'SElement'. Function Signature: insert(SElement, number).");}if(insert_before instanceof Promise)throw new TypeError("2nd input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof insert_before)throw new TypeError("2nd input argument '"+insert_before+"' in function 'insert' is of type '"+typeof insert_before+"'. Expected type 'number'. Function Signature: insert(SElement, number).");if("undefined"!=typeof kid.yieldFunction)throw Error("Function '"+kid.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'insert'. Perhaps a yield statement is required for '"+kid.yieldFunction+
"'?");var me=this;this.yieldFunction="STree.insert";return PDFNet.messageHandler.sendWithPromise("STree.insert",{tree:this.id,kid:kid,insert_before:insert_before},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.kid,me)})};PDFNet.STree.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("STree.copy",{c:this.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.STree(id)})};PDFNet.STree.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("STree.isValid",{tree:this.id},this.userPriority)};PDFNet.STree.prototype.getNumKids=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumKids'. Expected 0 arguments. Function Signature: getNumKids()");
return PDFNet.messageHandler.sendWithPromise("STree.getNumKids",{tree:this.id},this.userPriority)};PDFNet.STree.prototype.getKid=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getKid'. Expected 1 argument. Function Signature: getKid(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'getKid' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof index)throw new TypeError("1st input argument '"+
index+"' in function 'getKid' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getKid(number).");return PDFNet.messageHandler.sendWithPromise("STree.getKid",{tree:this.id,index:index},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};PDFNet.STree.prototype.getRoleMap=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRoleMap'. Expected 0 arguments. Function Signature: getRoleMap()");
return PDFNet.messageHandler.sendWithPromise("STree.getRoleMap",{tree:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RoleMap(id)})};PDFNet.STree.prototype.getClassMap=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getClassMap'. Expected 0 arguments. Function Signature: getClassMap()");return PDFNet.messageHandler.sendWithPromise("STree.getClassMap",{tree:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.ClassMap(id)})};PDFNet.STree.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("STree.getSDFObj",{tree:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Action.createGoto=function(dest){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createGoto'. Expected 1 argument. Function Signature: createGoto(Destination)");
if(dest instanceof Promise)throw new TypeError("1st input argument in function 'createGoto' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest instanceof PDFNet.Destination)){if("object"==typeof dest)throw new TypeError("1st input argument in function 'createGoto' is of type '"+dest.name+"'. Expected type 'Destination'. Function Signature: createGoto(Destination).");throw new TypeError("1st input argument '"+dest+"' in function 'createGoto' is of type '"+
typeof dest+"'. Expected type 'Destination'. Function Signature: createGoto(Destination).");}return PDFNet.messageHandler.sendWithPromise("actionCreateGoto",{dest:dest.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createGotoWithKey=function(key,dest){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createGotoWithKey'. Expected 2 arguments. Function Signature: createGotoWithKey(string, Destination)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'createGotoWithKey' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'createGotoWithKey' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: createGotoWithKey(string, Destination).");if(dest instanceof Promise)throw new TypeError("2nd input argument in function 'createGotoWithKey' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dest instanceof PDFNet.Destination)){if("object"==typeof dest)throw new TypeError("2nd input argument in function 'createGotoWithKey' is of type '"+dest.name+"'. Expected type 'Destination'. Function Signature: createGotoWithKey(string, Destination).");throw new TypeError("2nd input argument '"+dest+"' in function 'createGotoWithKey' is of type '"+typeof dest+"'. Expected type 'Destination'. Function Signature: createGotoWithKey(string, Destination).");}return PDFNet.messageHandler.sendWithPromise("actionCreateGotoWithKey",
{key:key,dest:dest.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createGotoRemote=function(file,page_num){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createGotoRemote'. Expected 2 arguments. Function Signature: createGotoRemote(FileSpec, number)");if(file instanceof Promise)throw new TypeError("1st input argument in function 'createGotoRemote' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(file instanceof PDFNet.FileSpec)){if("object"==typeof file)throw new TypeError("1st input argument in function 'createGotoRemote' is of type '"+file.name+"'. Expected type 'FileSpec'. Function Signature: createGotoRemote(FileSpec, number).");throw new TypeError("1st input argument '"+file+"' in function 'createGotoRemote' is of type '"+typeof file+"'. Expected type 'FileSpec'. Function Signature: createGotoRemote(FileSpec, number).");}if(page_num instanceof Promise)throw new TypeError("2nd input argument in function 'createGotoRemote' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof page_num)throw new TypeError("2nd input argument '"+page_num+"' in function 'createGotoRemote' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: createGotoRemote(FileSpec, number).");return PDFNet.messageHandler.sendWithPromise("actionCreateGotoRemote",{file:file.id,page_num:page_num},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createGotoRemoteSetNewWindow=function(file,page_num,new_window){if(3!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createGotoRemoteSetNewWindow'. Expected 3 arguments. Function Signature: createGotoRemoteSetNewWindow(FileSpec, number, boolean)");if(file instanceof Promise)throw new TypeError("1st input argument in function 'createGotoRemoteSetNewWindow' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(file instanceof PDFNet.FileSpec)){if("object"==typeof file)throw new TypeError("1st input argument in function 'createGotoRemoteSetNewWindow' is of type '"+
file.name+"'. Expected type 'FileSpec'. Function Signature: createGotoRemoteSetNewWindow(FileSpec, number, boolean).");throw new TypeError("1st input argument '"+file+"' in function 'createGotoRemoteSetNewWindow' is of type '"+typeof file+"'. Expected type 'FileSpec'. Function Signature: createGotoRemoteSetNewWindow(FileSpec, number, boolean).");}if(page_num instanceof Promise)throw new TypeError("2nd input argument in function 'createGotoRemoteSetNewWindow' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof page_num)throw new TypeError("2nd input argument '"+page_num+"' in function 'createGotoRemoteSetNewWindow' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: createGotoRemoteSetNewWindow(FileSpec, number, boolean).");if(new_window instanceof Promise)throw new TypeError("3rd input argument in function 'createGotoRemoteSetNewWindow' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof new_window)throw new TypeError("3rd input argument '"+
new_window+"' in function 'createGotoRemoteSetNewWindow' is of type '"+typeof new_window+"'. Expected type 'boolean'. Function Signature: createGotoRemoteSetNewWindow(FileSpec, number, boolean).");return PDFNet.messageHandler.sendWithPromise("actionCreateGotoRemoteSetNewWindow",{file:file.id,page_num:page_num,new_window:new_window},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createURI=function(sdfdoc,uri){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createURI'. Expected 2 arguments. Function Signature: createURI(SDFDoc, string)");if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createURI' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createURI' is of type '"+
sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createURI(SDFDoc, string).");throw new TypeError("1st input argument '"+sdfdoc+"' in function 'createURI' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createURI(SDFDoc, string).");}if(uri instanceof Promise)throw new TypeError("2nd input argument in function 'createURI' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof uri)throw new TypeError("2nd input argument '"+
uri+"' in function 'createURI' is of type '"+typeof uri+"'. Expected type 'string'. Function Signature: createURI(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("actionCreateURI",{sdfdoc:sdfdoc.id,uri:uri},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createURIWithUString=function(sdfdoc,current){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createURIWithUString'. Expected 2 arguments. Function Signature: createURIWithUString(SDFDoc, string)");
if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createURIWithUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createURIWithUString' is of type '"+sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createURIWithUString(SDFDoc, string).");
throw new TypeError("1st input argument '"+sdfdoc+"' in function 'createURIWithUString' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createURIWithUString(SDFDoc, string).");}if(current instanceof Promise)throw new TypeError("2nd input argument in function 'createURIWithUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof current)throw new TypeError("2nd input argument '"+current+"' in function 'createURIWithUString' is of type '"+
typeof current+"'. Expected type 'string'. Function Signature: createURIWithUString(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("actionCreateURIWithUString",{sdfdoc:sdfdoc.id,current:current},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createSubmitForm=function(url){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createSubmitForm'. Expected 1 argument. Function Signature: createSubmitForm(FileSpec)");
if(url instanceof Promise)throw new TypeError("1st input argument in function 'createSubmitForm' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(url instanceof PDFNet.FileSpec)){if("object"==typeof url)throw new TypeError("1st input argument in function 'createSubmitForm' is of type '"+url.name+"'. Expected type 'FileSpec'. Function Signature: createSubmitForm(FileSpec).");throw new TypeError("1st input argument '"+url+"' in function 'createSubmitForm' is of type '"+
typeof url+"'. Expected type 'FileSpec'. Function Signature: createSubmitForm(FileSpec).");}return PDFNet.messageHandler.sendWithPromise("actionCreateSubmitForm",{url:url.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createLaunch=function(sdfdoc,path){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createLaunch'. Expected 2 arguments. Function Signature: createLaunch(SDFDoc, string)");if(sdfdoc instanceof
Promise)throw new TypeError("1st input argument in function 'createLaunch' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createLaunch' is of type '"+sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createLaunch(SDFDoc, string).");throw new TypeError("1st input argument '"+
sdfdoc+"' in function 'createLaunch' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createLaunch(SDFDoc, string).");}if(path instanceof Promise)throw new TypeError("2nd input argument in function 'createLaunch' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("2nd input argument '"+path+"' in function 'createLaunch' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: createLaunch(SDFDoc, string).");
return PDFNet.messageHandler.sendWithPromise("actionCreateLaunch",{sdfdoc:sdfdoc.id,path:path},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createHideField=function(sdfdoc,list_length,field_list){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createHideField'. Expected 3 arguments. Function Signature: createHideField(SDFDoc, number, string)");if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createHideField' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createHideField' is of type '"+sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createHideField(SDFDoc, number, string).");throw new TypeError("1st input argument '"+sdfdoc+"' in function 'createHideField' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createHideField(SDFDoc, number, string).");
}if(list_length instanceof Promise)throw new TypeError("2nd input argument in function 'createHideField' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof list_length)throw new TypeError("2nd input argument '"+list_length+"' in function 'createHideField' is of type '"+typeof list_length+"'. Expected type 'number'. Function Signature: createHideField(SDFDoc, number, string).");if(field_list instanceof Promise)throw new TypeError("3rd input argument in function 'createHideField' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_list)throw new TypeError("3rd input argument '"+field_list+"' in function 'createHideField' is of type '"+typeof field_list+"'. Expected type 'string'. Function Signature: createHideField(SDFDoc, number, string).");return PDFNet.messageHandler.sendWithPromise("actionCreateHideField",{sdfdoc:sdfdoc.id,list_length:list_length,field_list:field_list},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createImportData=function(sdfdoc,
path){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImportData'. Expected 2 arguments. Function Signature: createImportData(SDFDoc, string)");if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createImportData' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createImportData' is of type '"+
sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createImportData(SDFDoc, string).");throw new TypeError("1st input argument '"+sdfdoc+"' in function 'createImportData' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createImportData(SDFDoc, string).");}if(path instanceof Promise)throw new TypeError("2nd input argument in function 'createImportData' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("2nd input argument '"+
path+"' in function 'createImportData' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: createImportData(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("actionCreateImportData",{sdfdoc:sdfdoc.id,path:path},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createResetForm=function(sdfdoc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createResetForm'. Expected 1 argument. Function Signature: createResetForm(SDFDoc)");
if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createResetForm' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createResetForm' is of type '"+sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createResetForm(SDFDoc).");throw new TypeError("1st input argument '"+
sdfdoc+"' in function 'createResetForm' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createResetForm(SDFDoc).");}return PDFNet.messageHandler.sendWithPromise("actionCreateResetForm",{sdfdoc:sdfdoc.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.createJavaScript=function(sdfdoc,script){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createJavaScript'. Expected 2 arguments. Function Signature: createJavaScript(SDFDoc, string)");
if(sdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'createJavaScript' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sdfdoc instanceof PDFNet.PDFDoc||sdfdoc instanceof PDFNet.SDFDoc||sdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof sdfdoc)throw new TypeError("1st input argument in function 'createJavaScript' is of type '"+sdfdoc.name+"'. Expected type 'SDFDoc'. Function Signature: createJavaScript(SDFDoc, string).");throw new TypeError("1st input argument '"+
sdfdoc+"' in function 'createJavaScript' is of type '"+typeof sdfdoc+"'. Expected type 'SDFDoc'. Function Signature: createJavaScript(SDFDoc, string).");}if(script instanceof Promise)throw new TypeError("2nd input argument in function 'createJavaScript' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof script)throw new TypeError("2nd input argument '"+script+"' in function 'createJavaScript' is of type '"+typeof script+"'. Expected type 'string'. Function Signature: createJavaScript(SDFDoc, string).");
return PDFNet.messageHandler.sendWithPromise("actionCreateJavaScript",{sdfdoc:sdfdoc.id,script:script},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.create=function(in_obj){"undefined"===typeof in_obj&&(in_obj=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(in_obj instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_obj instanceof PDFNet.Obj)){if("object"==typeof in_obj)throw new TypeError("1st input argument in function 'create' is of type '"+in_obj.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+in_obj+"' in function 'create' is of type '"+typeof in_obj+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("actionCreate",{in_obj:in_obj.id},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Action(id)})};PDFNet.Action.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("Action.copy",{in_action:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Action.prototype.compare=function(in_action){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(Action)");
if(in_action instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_action instanceof PDFNet.Action)){if("object"==typeof in_action)throw new TypeError("1st input argument in function 'compare' is of type '"+in_action.name+"'. Expected type 'Action'. Function Signature: compare(Action).");throw new TypeError("1st input argument '"+in_action+"' in function 'compare' is of type '"+typeof in_action+
"'. Expected type 'Action'. Function Signature: compare(Action).");}return PDFNet.messageHandler.sendWithPromise("Action.compare",{action:this.id,in_action:in_action.id},this.userPriority)};PDFNet.Action.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("Action.isValid",{action:this.id},this.userPriority)};PDFNet.Action.prototype.getType=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Action.getType",{action:this.id},this.userPriority)};PDFNet.Action.prototype.getDest=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDest'. Expected 0 arguments. Function Signature: getDest()");return PDFNet.messageHandler.sendWithPromise("Action.getDest",
{action:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Action.prototype.getNext=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNext'. Expected 0 arguments. Function Signature: getNext()");return PDFNet.messageHandler.sendWithPromise("Action.getNext",{action:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Action.prototype.getSDFObj=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Action.getSDFObj",{action:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Action.prototype.getFormActionFlag=function(flag){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFormActionFlag'. Expected 1 argument. Function Signature: getFormActionFlag(number)");
if(flag instanceof Promise)throw new TypeError("1st input argument in function 'getFormActionFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'getFormActionFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: getFormActionFlag(number).");return PDFNet.messageHandler.sendWithPromise("Action.getFormActionFlag",{action:this.id,flag:flag},this.userPriority)};
PDFNet.Action.prototype.setFormActionFlag=function(flag,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFormActionFlag'. Expected 2 arguments. Function Signature: setFormActionFlag(number, boolean)");if(flag instanceof Promise)throw new TypeError("1st input argument in function 'setFormActionFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("1st input argument '"+
flag+"' in function 'setFormActionFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: setFormActionFlag(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'setFormActionFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'setFormActionFlag' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: setFormActionFlag(number, boolean).");
return PDFNet.messageHandler.sendWithPromise("Action.setFormActionFlag",{action:this.id,flag:flag,value:value},this.userPriority)};PDFNet.Action.prototype.needsWriteLock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'needsWriteLock'. Expected 0 arguments. Function Signature: needsWriteLock()");return PDFNet.messageHandler.sendWithPromise("Action.needsWriteLock",{action:this.id},this.userPriority)};PDFNet.Action.prototype.execute=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'execute'. Expected 0 arguments. Function Signature: execute()");return PDFNet.messageHandler.sendWithPromise("Action.execute",{action:this.id},this.userPriority)};PDFNet.Action.prototype.executeKeyStrokeAction=function(data){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'executeKeyStrokeAction'. Expected 1 argument. Function Signature: executeKeyStrokeAction(KeyStrokeEventData)");
if(data instanceof Promise)throw new TypeError("1st input argument in function 'executeKeyStrokeAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(data instanceof PDFNet.KeyStrokeEventData)){if("object"==typeof data)throw new TypeError("1st input argument in function 'executeKeyStrokeAction' is of type '"+data.name+"'. Expected type 'KeyStrokeEventData'. Function Signature: executeKeyStrokeAction(KeyStrokeEventData).");throw new TypeError("1st input argument '"+
data+"' in function 'executeKeyStrokeAction' is of type '"+typeof data+"'. Expected type 'KeyStrokeEventData'. Function Signature: executeKeyStrokeAction(KeyStrokeEventData).");}return PDFNet.messageHandler.sendWithPromise("Action.executeKeyStrokeAction",{action:this.id,data:data.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.KeyStrokeActionResult(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.KeyStrokeActionResult.prototype.isValid=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("KeyStrokeActionResult.isValid",{action_ret:this.id},this.userPriority)};PDFNet.KeyStrokeActionResult.prototype.getText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getText'. Expected 0 arguments. Function Signature: getText()");return PDFNet.messageHandler.sendWithPromise("KeyStrokeActionResult.getText",
{action_ret:this.id},this.userPriority)};PDFNet.KeyStrokeActionResult.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("KeyStrokeActionResult.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.KeyStrokeActionResult.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("KeyStrokeActionResult.copy",
{action_ret:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.KeyStrokeActionResult(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.KeyStrokeActionResult.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(KeyStrokeActionResult)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(right instanceof PDFNet.KeyStrokeActionResult)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'KeyStrokeActionResult'. Function Signature: assign(KeyStrokeActionResult).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'KeyStrokeActionResult'. Function Signature: assign(KeyStrokeActionResult).");}return PDFNet.messageHandler.sendWithPromise("KeyStrokeActionResult.assign",
{left:this.id,right:right.id},this.userPriority)};PDFNet.KeyStrokeEventData.create=function(field_name,current,change,selection_start,selection_end){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 5 arguments. Function Signature: create(string, string, string, number, number)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'create' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: create(string, string, string, number, number).");if(current instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof current)throw new TypeError("2nd input argument '"+current+"' in function 'create' is of type '"+
typeof current+"'. Expected type 'string'. Function Signature: create(string, string, string, number, number).");if(change instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof change)throw new TypeError("3rd input argument '"+change+"' in function 'create' is of type '"+typeof change+"'. Expected type 'string'. Function Signature: create(string, string, string, number, number).");
if(selection_start instanceof Promise)throw new TypeError("4th input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof selection_start)throw new TypeError("4th input argument '"+selection_start+"' in function 'create' is of type '"+typeof selection_start+"'. Expected type 'number'. Function Signature: create(string, string, string, number, number).");if(selection_end instanceof Promise)throw new TypeError("5th input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof selection_end)throw new TypeError("5th input argument '"+selection_end+"' in function 'create' is of type '"+typeof selection_end+"'. Expected type 'number'. Function Signature: create(string, string, string, number, number).");return PDFNet.messageHandler.sendWithPromise("keyStrokeEventDataCreate",{field_name:field_name,current:current,change:change,selection_start:selection_start,selection_end:selection_end},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.KeyStrokeEventData(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.KeyStrokeEventData.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("KeyStrokeEventData.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.KeyStrokeEventData.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("KeyStrokeEventData.copy",
{data:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.KeyStrokeEventData(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.KeyStrokeEventData.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(KeyStrokeEventData)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(right instanceof PDFNet.KeyStrokeEventData)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'KeyStrokeEventData'. Function Signature: assign(KeyStrokeEventData).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'KeyStrokeEventData'. Function Signature: assign(KeyStrokeEventData).");}return PDFNet.messageHandler.sendWithPromise("KeyStrokeEventData.assign",
{left:this.id,right:right.id},this.userPriority)};PDFNet.Page.create=function(page_dict){"undefined"===typeof page_dict&&(page_dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(page_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page_dict instanceof
PDFNet.Obj)){if("object"==typeof page_dict)throw new TypeError("1st input argument in function 'create' is of type '"+page_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+page_dict+"' in function 'create' is of type '"+typeof page_dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("pageCreate",{page_dict:page_dict.id},this.userPriority).then(function(id){return"0"==id?null:
new PDFNet.Page(id)})};PDFNet.Page.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("Page.copy",{p:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.Page.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");
return PDFNet.messageHandler.sendWithPromise("Page.isValid",{page:this.id},this.userPriority)};PDFNet.Page.prototype.getIndex=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIndex'. Expected 0 arguments. Function Signature: getIndex()");return PDFNet.messageHandler.sendWithPromise("Page.getIndex",{page:this.id},this.userPriority)};PDFNet.Page.prototype.getTriggerAction=function(trigger){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTriggerAction'. Expected 1 argument. Function Signature: getTriggerAction(number)");if(trigger instanceof Promise)throw new TypeError("1st input argument in function 'getTriggerAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof trigger)throw new TypeError("1st input argument '"+trigger+"' in function 'getTriggerAction' is of type '"+typeof trigger+"'. Expected type 'number'. Function Signature: getTriggerAction(number).");
return PDFNet.messageHandler.sendWithPromise("Page.getTriggerAction",{page:this.id,trigger:trigger},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.getBox=function(type){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBox'. Expected 1 argument. Function Signature: getBox(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'getBox' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'getBox' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: getBox(number).");return PDFNet.messageHandler.sendWithPromise("Page.getBox",{page:this.id,type:type},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Page.prototype.setBox=function(type,box){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBox'. Expected 2 arguments. Function Signature: setBox(number, Rect)");
if(type instanceof Promise)throw new TypeError("1st input argument in function 'setBox' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setBox' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: setBox(number, Rect).");if(box instanceof Promise)throw new TypeError("2nd input argument in function 'setBox' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(box instanceof PDFNet.Rect)&&"Rect"!=box.name){if("object"==typeof box)throw new TypeError("2nd input argument in function 'setBox' is of type '"+box.name+"'. Expected type 'Rect'. Function Signature: setBox(number, Rect).");throw new TypeError("2nd input argument '"+box+"' in function 'setBox' is of type '"+typeof box+"'. Expected type 'Rect'. Function Signature: setBox(number, Rect).");}if("undefined"!=typeof box.yieldFunction)throw Error("Function '"+box.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setBox'. Perhaps a yield statement is required for '"+
box.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Page.setBox",{page:this.id,type:type,box:box},this.userPriority)};PDFNet.Page.prototype.getCropBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCropBox'. Expected 0 arguments. Function Signature: getCropBox()");return PDFNet.messageHandler.sendWithPromise("Page.getCropBox",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};
PDFNet.Page.prototype.setCropBox=function(box){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCropBox'. Expected 1 argument. Function Signature: setCropBox(Rect)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setCropBox' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(box instanceof PDFNet.Rect)&&"Rect"!=box.name){if("object"==typeof box)throw new TypeError("1st input argument in function 'setCropBox' is of type '"+
box.name+"'. Expected type 'Rect'. Function Signature: setCropBox(Rect).");throw new TypeError("1st input argument '"+box+"' in function 'setCropBox' is of type '"+typeof box+"'. Expected type 'Rect'. Function Signature: setCropBox(Rect).");}if("undefined"!=typeof box.yieldFunction)throw Error("Function '"+box.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setCropBox'. Perhaps a yield statement is required for '"+
box.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Page.setCropBox",{page:this.id,box:box},this.userPriority)};PDFNet.Page.prototype.getMediaBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMediaBox'. Expected 0 arguments. Function Signature: getMediaBox()");return PDFNet.messageHandler.sendWithPromise("Page.getMediaBox",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Page.prototype.setMediaBox=
function(box){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMediaBox'. Expected 1 argument. Function Signature: setMediaBox(Rect)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setMediaBox' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(box instanceof PDFNet.Rect)&&"Rect"!=box.name){if("object"==typeof box)throw new TypeError("1st input argument in function 'setMediaBox' is of type '"+
box.name+"'. Expected type 'Rect'. Function Signature: setMediaBox(Rect).");throw new TypeError("1st input argument '"+box+"' in function 'setMediaBox' is of type '"+typeof box+"'. Expected type 'Rect'. Function Signature: setMediaBox(Rect).");}if("undefined"!=typeof box.yieldFunction)throw Error("Function '"+box.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setMediaBox'. Perhaps a yield statement is required for '"+
box.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Page.setMediaBox",{page:this.id,box:box},this.userPriority)};PDFNet.Page.prototype.getVisibleContentBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVisibleContentBox'. Expected 0 arguments. Function Signature: getVisibleContentBox()");return PDFNet.messageHandler.sendWithPromise("Page.getVisibleContentBox",{page:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Rect(id)})};PDFNet.Page.prototype.getRotation=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRotation'. Expected 0 arguments. Function Signature: getRotation()");return PDFNet.messageHandler.sendWithPromise("Page.getRotation",{page:this.id},this.userPriority)};PDFNet.Page.prototype.setRotation=function(angle){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRotation'. Expected 1 argument. Function Signature: setRotation(number)");
if(angle instanceof Promise)throw new TypeError("1st input argument in function 'setRotation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof angle)throw new TypeError("1st input argument '"+angle+"' in function 'setRotation' is of type '"+typeof angle+"'. Expected type 'number'. Function Signature: setRotation(number).");return PDFNet.messageHandler.sendWithPromise("Page.setRotation",{page:this.id,angle:angle},this.userPriority)};PDFNet.Page.addRotations=
function(r0,r1){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addRotations'. Expected 2 arguments. Function Signature: addRotations(number, number)");if(r0 instanceof Promise)throw new TypeError("1st input argument in function 'addRotations' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof r0)throw new TypeError("1st input argument '"+r0+"' in function 'addRotations' is of type '"+typeof r0+"'. Expected type 'number'. Function Signature: addRotations(number, number).");
if(r1 instanceof Promise)throw new TypeError("2nd input argument in function 'addRotations' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof r1)throw new TypeError("2nd input argument '"+r1+"' in function 'addRotations' is of type '"+typeof r1+"'. Expected type 'number'. Function Signature: addRotations(number, number).");return PDFNet.messageHandler.sendWithPromise("pageAddRotations",{r0:r0,r1:r1},this.userPriority)};PDFNet.Page.subtractRotations=
function(r0,r1){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'subtractRotations'. Expected 2 arguments. Function Signature: subtractRotations(number, number)");if(r0 instanceof Promise)throw new TypeError("1st input argument in function 'subtractRotations' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof r0)throw new TypeError("1st input argument '"+r0+"' in function 'subtractRotations' is of type '"+
typeof r0+"'. Expected type 'number'. Function Signature: subtractRotations(number, number).");if(r1 instanceof Promise)throw new TypeError("2nd input argument in function 'subtractRotations' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof r1)throw new TypeError("2nd input argument '"+r1+"' in function 'subtractRotations' is of type '"+typeof r1+"'. Expected type 'number'. Function Signature: subtractRotations(number, number).");return PDFNet.messageHandler.sendWithPromise("pageSubtractRotations",
{r0:r0,r1:r1},this.userPriority)};PDFNet.Page.rotationToDegree=function(r){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'rotationToDegree'. Expected 1 argument. Function Signature: rotationToDegree(number)");if(r instanceof Promise)throw new TypeError("1st input argument in function 'rotationToDegree' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof r)throw new TypeError("1st input argument '"+r+
"' in function 'rotationToDegree' is of type '"+typeof r+"'. Expected type 'number'. Function Signature: rotationToDegree(number).");return PDFNet.messageHandler.sendWithPromise("pageRotationToDegree",{r:r},this.userPriority)};PDFNet.Page.degreeToRotation=function(r){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'degreeToRotation'. Expected 1 argument. Function Signature: degreeToRotation(number)");if(r instanceof Promise)throw new TypeError("1st input argument in function 'degreeToRotation' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof r)throw new TypeError("1st input argument '"+r+"' in function 'degreeToRotation' is of type '"+typeof r+"'. Expected type 'number'. Function Signature: degreeToRotation(number).");return PDFNet.messageHandler.sendWithPromise("pageDegreeToRotation",{r:r},this.userPriority)};PDFNet.Page.prototype.getPageWidth=function(box_type){"undefined"===typeof box_type&&(box_type=PDFNet.Page.Box.e_crop);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPageWidth'. Expected at most 1 arguments. Function Signature: getPageWidth(number)");
if(box_type instanceof Promise)throw new TypeError("1st input argument in function 'getPageWidth' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box_type)throw new TypeError("1st input argument '"+box_type+"' in function 'getPageWidth' is of type '"+typeof box_type+"'. Expected type 'number'. Function Signature: getPageWidth(number).");return PDFNet.messageHandler.sendWithPromise("Page.getPageWidth",{page:this.id,box_type:box_type},this.userPriority)};
PDFNet.Page.prototype.getPageHeight=function(box_type){"undefined"===typeof box_type&&(box_type=PDFNet.Page.Box.e_crop);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPageHeight'. Expected at most 1 arguments. Function Signature: getPageHeight(number)");if(box_type instanceof Promise)throw new TypeError("1st input argument in function 'getPageHeight' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box_type)throw new TypeError("1st input argument '"+
box_type+"' in function 'getPageHeight' is of type '"+typeof box_type+"'. Expected type 'number'. Function Signature: getPageHeight(number).");return PDFNet.messageHandler.sendWithPromise("Page.getPageHeight",{page:this.id,box_type:box_type},this.userPriority)};PDFNet.Page.prototype.getDefaultMatrix=function(flip_y,box_type,angle){"undefined"===typeof flip_y&&(flip_y=!1);"undefined"===typeof box_type&&(box_type=PDFNet.Page.Box.e_crop);"undefined"===typeof angle&&(angle=PDFNet.Page.Rotate.e_0);if(3<
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDefaultMatrix'. Expected at most 3 arguments. Function Signature: getDefaultMatrix(boolean, number, number)");if(flip_y instanceof Promise)throw new TypeError("1st input argument in function 'getDefaultMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof flip_y)throw new TypeError("1st input argument '"+flip_y+"' in function 'getDefaultMatrix' is of type '"+
typeof flip_y+"'. Expected type 'boolean'. Function Signature: getDefaultMatrix(boolean, number, number).");if(box_type instanceof Promise)throw new TypeError("2nd input argument in function 'getDefaultMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box_type)throw new TypeError("2nd input argument '"+box_type+"' in function 'getDefaultMatrix' is of type '"+typeof box_type+"'. Expected type 'number'. Function Signature: getDefaultMatrix(boolean, number, number).");
if(angle instanceof Promise)throw new TypeError("3rd input argument in function 'getDefaultMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof angle)throw new TypeError("3rd input argument '"+angle+"' in function 'getDefaultMatrix' is of type '"+typeof angle+"'. Expected type 'number'. Function Signature: getDefaultMatrix(boolean, number, number).");return PDFNet.messageHandler.sendWithPromise("Page.getDefaultMatrix",{page:this.id,flip_y:flip_y,
box_type:box_type,angle:angle},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Page.prototype.getAnnots=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAnnots'. Expected 0 arguments. Function Signature: getAnnots()");return PDFNet.messageHandler.sendWithPromise("Page.getAnnots",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.getNumAnnots=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumAnnots'. Expected 0 arguments. Function Signature: getNumAnnots()");return PDFNet.messageHandler.sendWithPromise("Page.getNumAnnots",{page:this.id},this.userPriority)};PDFNet.Page.prototype.getAnnot=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAnnot'. Expected 1 argument. Function Signature: getAnnot(number)");if(index instanceof
Promise)throw new TypeError("1st input argument in function 'getAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'getAnnot' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getAnnot(number).");return PDFNet.messageHandler.sendWithPromise("Page.getAnnot",{page:this.id,index:index},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};
PDFNet.Page.prototype.annotInsert=function(pos,annot){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'annotInsert'. Expected 2 arguments. Function Signature: annotInsert(number, Annot)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'annotInsert' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'annotInsert' is of type '"+
typeof pos+"'. Expected type 'number'. Function Signature: annotInsert(number, Annot).");if(annot instanceof Promise)throw new TypeError("2nd input argument in function 'annotInsert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("2nd input argument in function 'annotInsert' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: annotInsert(number, Annot).");throw new TypeError("2nd input argument '"+
annot+"' in function 'annotInsert' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: annotInsert(number, Annot).");}return PDFNet.messageHandler.sendWithPromise("Page.annotInsert",{page:this.id,pos:pos,annot:annot.id},this.userPriority)};PDFNet.Page.prototype.annotPushBack=function(annot){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'annotPushBack'. Expected 1 argument. Function Signature: annotPushBack(Annot)");if(annot instanceof
Promise)throw new TypeError("1st input argument in function 'annotPushBack' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'annotPushBack' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: annotPushBack(Annot).");throw new TypeError("1st input argument '"+annot+"' in function 'annotPushBack' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: annotPushBack(Annot).");
}return PDFNet.messageHandler.sendWithPromise("Page.annotPushBack",{page:this.id,annot:annot.id},this.userPriority)};PDFNet.Page.prototype.annotPushFront=function(annot){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'annotPushFront'. Expected 1 argument. Function Signature: annotPushFront(Annot)");if(annot instanceof Promise)throw new TypeError("1st input argument in function 'annotPushFront' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'annotPushFront' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: annotPushFront(Annot).");throw new TypeError("1st input argument '"+annot+"' in function 'annotPushFront' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: annotPushFront(Annot).");}return PDFNet.messageHandler.sendWithPromise("Page.annotPushFront",{page:this.id,annot:annot.id},
this.userPriority)};PDFNet.Page.prototype.annotRemove=function(annot){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'annotRemove'. Expected 1 argument. Function Signature: annotRemove(Annot)");if(annot instanceof Promise)throw new TypeError("1st input argument in function 'annotRemove' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'annotRemove' is of type '"+
annot.name+"'. Expected type 'Annot'. Function Signature: annotRemove(Annot).");throw new TypeError("1st input argument '"+annot+"' in function 'annotRemove' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: annotRemove(Annot).");}return PDFNet.messageHandler.sendWithPromise("Page.annotRemove",{page:this.id,annot:annot.id},this.userPriority)};PDFNet.Page.prototype.annotRemoveByIndex=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'annotRemoveByIndex'. Expected 1 argument. Function Signature: annotRemoveByIndex(number)");
if(index instanceof Promise)throw new TypeError("1st input argument in function 'annotRemoveByIndex' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'annotRemoveByIndex' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: annotRemoveByIndex(number).");return PDFNet.messageHandler.sendWithPromise("Page.annotRemoveByIndex",{page:this.id,index:index},this.userPriority)};
PDFNet.Page.prototype.scale=function(scale){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'scale'. Expected 1 argument. Function Signature: scale(number)");if(scale instanceof Promise)throw new TypeError("1st input argument in function 'scale' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof scale)throw new TypeError("1st input argument '"+scale+"' in function 'scale' is of type '"+typeof scale+"'. Expected type 'number'. Function Signature: scale(number).");
return PDFNet.messageHandler.sendWithPromise("Page.scale",{page:this.id,scale:scale},this.userPriority)};PDFNet.Page.prototype.flattenField=function(field_to_flatten){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flattenField'. Expected 1 argument. Function Signature: flattenField(Field)");if(field_to_flatten instanceof Promise)throw new TypeError("1st input argument in function 'flattenField' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(field_to_flatten instanceof PDFNet.Field)&&"Field"!=field_to_flatten.name){if("object"==typeof field_to_flatten)throw new TypeError("1st input argument in function 'flattenField' is of type '"+field_to_flatten.name+"'. Expected type 'Field'. Function Signature: flattenField(Field).");throw new TypeError("1st input argument '"+field_to_flatten+"' in function 'flattenField' is of type '"+typeof field_to_flatten+"'. Expected type 'Field'. Function Signature: flattenField(Field).");}if("undefined"!=
typeof field_to_flatten.yieldFunction)throw Error("Function '"+field_to_flatten.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'flattenField'. Perhaps a yield statement is required for '"+field_to_flatten.yieldFunction+"'?");var me=this;this.yieldFunction="Page.flattenField";return PDFNet.messageHandler.sendWithPromise("Page.flattenField",{page:this.id,field_to_flatten:field_to_flatten},this.userPriority).then(function(id){me.yieldFunction=
void 0;copyFunc(id.field_to_flatten,me)})};PDFNet.Page.prototype.hasTransition=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasTransition'. Expected 0 arguments. Function Signature: hasTransition()");return PDFNet.messageHandler.sendWithPromise("Page.hasTransition",{page:this.id},this.userPriority)};PDFNet.Page.prototype.getUserUnitSize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUserUnitSize'. Expected 0 arguments. Function Signature: getUserUnitSize()");
return PDFNet.messageHandler.sendWithPromise("Page.getUserUnitSize",{page:this.id},this.userPriority)};PDFNet.Page.prototype.setUserUnitSize=function(unit_size){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUserUnitSize'. Expected 1 argument. Function Signature: setUserUnitSize(number)");if(unit_size instanceof Promise)throw new TypeError("1st input argument in function 'setUserUnitSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof unit_size)throw new TypeError("1st input argument '"+unit_size+"' in function 'setUserUnitSize' is of type '"+typeof unit_size+"'. Expected type 'number'. Function Signature: setUserUnitSize(number).");return PDFNet.messageHandler.sendWithPromise("Page.setUserUnitSize",{page:this.id,unit_size:unit_size},this.userPriority)};PDFNet.Page.prototype.getResourceDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getResourceDict'. Expected 0 arguments. Function Signature: getResourceDict()");
return PDFNet.messageHandler.sendWithPromise("Page.getResourceDict",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.getContents=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getContents'. Expected 0 arguments. Function Signature: getContents()");return PDFNet.messageHandler.sendWithPromise("Page.getContents",{page:this.id},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.getThumb=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getThumb'. Expected 0 arguments. Function Signature: getThumb()");return PDFNet.messageHandler.sendWithPromise("Page.getThumb",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");
return PDFNet.messageHandler.sendWithPromise("Page.getSDFObj",{page:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Page.prototype.findInheritedAttribute=function(attrib){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'findInheritedAttribute'. Expected 1 argument. Function Signature: findInheritedAttribute(string)");if(attrib instanceof Promise)throw new TypeError("1st input argument in function 'findInheritedAttribute' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof attrib)throw new TypeError("1st input argument '"+attrib+"' in function 'findInheritedAttribute' is of type '"+typeof attrib+"'. Expected type 'string'. Function Signature: findInheritedAttribute(string).");return PDFNet.messageHandler.sendWithPromise("Page.findInheritedAttribute",{page:this.id,attrib:attrib},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.create=function(doc,type,pos){if(3!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 3 arguments. Function Signature: create(SDFDoc, number, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number, Rect).");}if(type instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'create' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: create(SDFDoc, number, Rect).");
if(pos instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("3rd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, number, Rect).");throw new TypeError("3rd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+
"'. Expected type 'Rect'. Function Signature: create(SDFDoc, number, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("annotCreate",{doc:doc.id,type:type,pos:pos},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Annot(id)})};PDFNet.Annot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==
typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("annotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};PDFNet.Annot.prototype.copy=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("Annot.copy",{d:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};PDFNet.Annot.prototype.compare=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(Annot)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Annot)){if("object"==typeof d)throw new TypeError("1st input argument in function 'compare' is of type '"+d.name+"'. Expected type 'Annot'. Function Signature: compare(Annot).");throw new TypeError("1st input argument '"+d+"' in function 'compare' is of type '"+typeof d+"'. Expected type 'Annot'. Function Signature: compare(Annot).");
}return PDFNet.messageHandler.sendWithPromise("Annot.compare",{annot:this.id,d:d.id},this.userPriority)};PDFNet.Annot.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("Annot.isValid",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Annot.getSDFObj",{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Annot.getType",
{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.isMarkup=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isMarkup'. Expected 0 arguments. Function Signature: isMarkup()");return PDFNet.messageHandler.sendWithPromise("Annot.isMarkup",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.getRect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRect'. Expected 0 arguments. Function Signature: getRect()");
return PDFNet.messageHandler.sendWithPromise("Annot.getRect",{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Annot.prototype.getVisibleContentBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVisibleContentBox'. Expected 0 arguments. Function Signature: getVisibleContentBox()");return PDFNet.messageHandler.sendWithPromise("Annot.getVisibleContentBox",{annot:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Rect(id)})};PDFNet.Annot.prototype.setRect=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRect'. Expected 1 argument. Function Signature: setRect(Rect)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'setRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("1st input argument in function 'setRect' is of type '"+
pos.name+"'. Expected type 'Rect'. Function Signature: setRect(Rect).");throw new TypeError("1st input argument '"+pos+"' in function 'setRect' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: setRect(Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setRect'. Perhaps a yield statement is required for '"+pos.yieldFunction+
"'?");return PDFNet.messageHandler.sendWithPromise("Annot.setRect",{annot:this.id,pos:pos},this.userPriority)};PDFNet.Annot.prototype.resize=function(newrect){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'resize'. Expected 1 argument. Function Signature: resize(Rect)");if(newrect instanceof Promise)throw new TypeError("1st input argument in function 'resize' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(newrect instanceof
PDFNet.Rect)&&"Rect"!=newrect.name){if("object"==typeof newrect)throw new TypeError("1st input argument in function 'resize' is of type '"+newrect.name+"'. Expected type 'Rect'. Function Signature: resize(Rect).");throw new TypeError("1st input argument '"+newrect+"' in function 'resize' is of type '"+typeof newrect+"'. Expected type 'Rect'. Function Signature: resize(Rect).");}if("undefined"!=typeof newrect.yieldFunction)throw Error("Function '"+newrect.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'resize'. Perhaps a yield statement is required for '"+
newrect.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Annot.resize",{annot:this.id,newrect:newrect},this.userPriority)};PDFNet.Annot.prototype.setContents=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setContents'. Expected 1 argument. Function Signature: setContents(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setContents' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setContents' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setContents(string).");return PDFNet.messageHandler.sendWithPromise("Annot.setContents",{annot:this.id,contents:contents},this.userPriority)};PDFNet.Annot.prototype.getContents=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getContents'. Expected 0 arguments. Function Signature: getContents()");
return PDFNet.messageHandler.sendWithPromise("Annot.getContents",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.getTriggerAction=function(trigger){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTriggerAction'. Expected 1 argument. Function Signature: getTriggerAction(number)");if(trigger instanceof Promise)throw new TypeError("1st input argument in function 'getTriggerAction' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof trigger)throw new TypeError("1st input argument '"+trigger+"' in function 'getTriggerAction' is of type '"+typeof trigger+"'. Expected type 'number'. Function Signature: getTriggerAction(number).");return PDFNet.messageHandler.sendWithPromise("Annot.getTriggerAction",{annot:this.id,trigger:trigger},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.prototype.getPage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPage'. Expected 0 arguments. Function Signature: getPage()");return PDFNet.messageHandler.sendWithPromise("Annot.getPage",{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.Annot.prototype.setPage=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPage'. Expected 1 argument. Function Signature: setPage(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'setPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'setPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: setPage(Page).");throw new TypeError("1st input argument '"+page+"' in function 'setPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: setPage(Page).");}return PDFNet.messageHandler.sendWithPromise("Annot.setPage",{annot:this.id,page:page.id},this.userPriority)};PDFNet.Annot.prototype.getUniqueID=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUniqueID'. Expected 0 arguments. Function Signature: getUniqueID()");return PDFNet.messageHandler.sendWithPromise("Annot.getUniqueID",{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.prototype.getDate=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDate'. Expected 0 arguments. Function Signature: getDate()");
return PDFNet.messageHandler.sendWithPromise("Annot.getDate",{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Date(id)})};PDFNet.Annot.prototype.setDate=function(date){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDate'. Expected 1 argument. Function Signature: setDate(Date)");if(date instanceof Promise)throw new TypeError("1st input argument in function 'setDate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(date instanceof PDFNet.Date)&&"Date"!=date.name){if("object"==typeof date)throw new TypeError("1st input argument in function 'setDate' is of type '"+date.name+"'. Expected type 'Date'. Function Signature: setDate(Date).");throw new TypeError("1st input argument '"+date+"' in function 'setDate' is of type '"+typeof date+"'. Expected type 'Date'. Function Signature: setDate(Date).");}if("undefined"!=typeof date.yieldFunction)throw Error("Function '"+date.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setDate'. Perhaps a yield statement is required for '"+
date.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Annot.setDate",{annot:this.id,date:date},this.userPriority)};PDFNet.Annot.prototype.getFlag=function(flag){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFlag'. Expected 1 argument. Function Signature: getFlag(number)");if(flag instanceof Promise)throw new TypeError("1st input argument in function 'getFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'getFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: getFlag(number).");return PDFNet.messageHandler.sendWithPromise("Annot.getFlag",{annot:this.id,flag:flag},this.userPriority)};PDFNet.Annot.prototype.setFlag=function(flag,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFlag'. Expected 2 arguments. Function Signature: setFlag(number, boolean)");
if(flag instanceof Promise)throw new TypeError("1st input argument in function 'setFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'setFlag' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: setFlag(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'setFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'setFlag' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: setFlag(number, boolean).");return PDFNet.messageHandler.sendWithPromise("Annot.setFlag",{annot:this.id,flag:flag,value:value},this.userPriority)};PDFNet.AnnotBorderStyle.create=function(s,b_width,b_hr,b_vr){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 4 arguments. Function Signature: create(number, number, number, number)");
if(s instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof s)throw new TypeError("1st input argument '"+s+"' in function 'create' is of type '"+typeof s+"'. Expected type 'number'. Function Signature: create(number, number, number, number).");if(b_width instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof b_width)throw new TypeError("2nd input argument '"+b_width+"' in function 'create' is of type '"+typeof b_width+"'. Expected type 'number'. Function Signature: create(number, number, number, number).");if(b_hr instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b_hr)throw new TypeError("3rd input argument '"+b_hr+"' in function 'create' is of type '"+
typeof b_hr+"'. Expected type 'number'. Function Signature: create(number, number, number, number).");if(b_vr instanceof Promise)throw new TypeError("4th input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b_vr)throw new TypeError("4th input argument '"+b_vr+"' in function 'create' is of type '"+typeof b_vr+"'. Expected type 'number'. Function Signature: create(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("annotBorderStyleCreate",
{s:s,b_width:b_width,b_hr:b_hr,b_vr:b_vr},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.AnnotBorderStyle(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.AnnotBorderStyle.createWithDashPattern=function(s,b_width,b_hr,b_vr,buffer){buffer instanceof Array&&(buffer=new Float64Array(buffer));if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createWithDashPattern'. Expected 5 arguments. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer)");
if(s instanceof Promise)throw new TypeError("1st input argument in function 'createWithDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof s)throw new TypeError("1st input argument '"+s+"' in function 'createWithDashPattern' is of type '"+typeof s+"'. Expected type 'number'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");if(b_width instanceof Promise)throw new TypeError("2nd input argument in function 'createWithDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof b_width)throw new TypeError("2nd input argument '"+b_width+"' in function 'createWithDashPattern' is of type '"+typeof b_width+"'. Expected type 'number'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");if(b_hr instanceof Promise)throw new TypeError("3rd input argument in function 'createWithDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b_hr)throw new TypeError("3rd input argument '"+
b_hr+"' in function 'createWithDashPattern' is of type '"+typeof b_hr+"'. Expected type 'number'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");if(b_vr instanceof Promise)throw new TypeError("4th input argument in function 'createWithDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b_vr)throw new TypeError("4th input argument '"+b_vr+"' in function 'createWithDashPattern' is of type '"+typeof b_vr+
"'. Expected type 'number'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");if(buffer instanceof Promise)throw new TypeError("5th input argument in function 'createWithDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buffer.buffer)){if("object"==typeof buffer)throw new TypeError("5th input argument in function 'createWithDashPattern' is of type '"+buffer.name+"'. Expected type 'ArrayBuffer'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");
throw new TypeError("5th input argument '"+buffer+"' in function 'createWithDashPattern' is of type '"+typeof buffer+"'. Expected type 'ArrayBuffer'. Function Signature: createWithDashPattern(number, number, number, number, ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("annotBorderStyleCreateWithDashPattern",{s:s,b_width:b_width,b_hr:b_hr,b_vr:b_vr,buffer:buffer.buffer},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.AnnotBorderStyle(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.AnnotBorderStyle.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.copy",{bs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.AnnotBorderStyle(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.AnnotBorderStyle.prototype.getStyle=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStyle'. Expected 0 arguments. Function Signature: getStyle()");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.getStyle",{bs:this.id},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.setStyle=function(style){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStyle'. Expected 1 argument. Function Signature: setStyle(number)");
if(style instanceof Promise)throw new TypeError("1st input argument in function 'setStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof style)throw new TypeError("1st input argument '"+style+"' in function 'setStyle' is of type '"+typeof style+"'. Expected type 'number'. Function Signature: setStyle(number).");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.setStyle",{bs:this.id,style:style},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.destroy=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Annot.prototype.getAppearance=function(annot_state,app_state){"undefined"===typeof annot_state&&(annot_state=PDFNet.Annot.State.e_normal);"undefined"===typeof app_state&&(app_state=null);if(2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAppearance'. Expected at most 2 arguments. Function Signature: getAppearance(number, string)");
if(annot_state instanceof Promise)throw new TypeError("1st input argument in function 'getAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof annot_state)throw new TypeError("1st input argument '"+annot_state+"' in function 'getAppearance' is of type '"+typeof annot_state+"'. Expected type 'number'. Function Signature: getAppearance(number, string).");if(app_state instanceof Promise)throw new TypeError("2nd input argument in function 'getAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof app_state&&null!==app_state)throw new TypeError("2nd input argument '"+app_state+"' in function 'getAppearance' is of type '"+typeof app_state+"'. Expected type 'string'. Function Signature: getAppearance(number, string).");return PDFNet.messageHandler.sendWithPromise("Annot.getAppearance",{annot:this.id,annot_state:annot_state,app_state:app_state},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.prototype.setAppearance=function(app_stream,
annot_state,app_state){"undefined"===typeof annot_state&&(annot_state=PDFNet.Annot.State.e_normal);"undefined"===typeof app_state&&(app_state=null);if(1>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAppearance'. Expected 1 to 3 arguments. Function Signature: setAppearance(Obj, number, string)");if(app_stream instanceof Promise)throw new TypeError("1st input argument in function 'setAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(app_stream instanceof PDFNet.Obj)){if("object"==typeof app_stream)throw new TypeError("1st input argument in function 'setAppearance' is of type '"+app_stream.name+"'. Expected type 'Obj'. Function Signature: setAppearance(Obj, number, string).");throw new TypeError("1st input argument '"+app_stream+"' in function 'setAppearance' is of type '"+typeof app_stream+"'. Expected type 'Obj'. Function Signature: setAppearance(Obj, number, string).");}if(annot_state instanceof Promise)throw new TypeError("2nd input argument in function 'setAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof annot_state)throw new TypeError("2nd input argument '"+annot_state+"' in function 'setAppearance' is of type '"+typeof annot_state+"'. Expected type 'number'. Function Signature: setAppearance(Obj, number, string).");if(app_state instanceof Promise)throw new TypeError("3rd input argument in function 'setAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof app_state&&null!==app_state)throw new TypeError("3rd input argument '"+
app_state+"' in function 'setAppearance' is of type '"+typeof app_state+"'. Expected type 'string'. Function Signature: setAppearance(Obj, number, string).");return PDFNet.messageHandler.sendWithPromise("Annot.setAppearance",{annot:this.id,app_stream:app_stream.id,annot_state:annot_state,app_state:app_state},this.userPriority)};PDFNet.Annot.prototype.removeAppearance=function(annot_state,app_state){"undefined"===typeof annot_state&&(annot_state=PDFNet.Annot.State.e_normal);"undefined"===typeof app_state&&
(app_state=null);if(2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeAppearance'. Expected at most 2 arguments. Function Signature: removeAppearance(number, string)");if(annot_state instanceof Promise)throw new TypeError("1st input argument in function 'removeAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof annot_state)throw new TypeError("1st input argument '"+annot_state+"' in function 'removeAppearance' is of type '"+
typeof annot_state+"'. Expected type 'number'. Function Signature: removeAppearance(number, string).");if(app_state instanceof Promise)throw new TypeError("2nd input argument in function 'removeAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof app_state&&null!==app_state)throw new TypeError("2nd input argument '"+app_state+"' in function 'removeAppearance' is of type '"+typeof app_state+"'. Expected type 'string'. Function Signature: removeAppearance(number, string).");
return PDFNet.messageHandler.sendWithPromise("Annot.removeAppearance",{annot:this.id,annot_state:annot_state,app_state:app_state},this.userPriority)};PDFNet.Annot.prototype.flatten=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flatten'. Expected 1 argument. Function Signature: flatten(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'flatten' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'flatten' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: flatten(Page).");throw new TypeError("1st input argument '"+page+"' in function 'flatten' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: flatten(Page).");}return PDFNet.messageHandler.sendWithPromise("Annot.flatten",{annot:this.id,page:page.id},this.userPriority)};PDFNet.Annot.prototype.getActiveAppearanceState=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getActiveAppearanceState'. Expected 0 arguments. Function Signature: getActiveAppearanceState()");return PDFNet.messageHandler.sendWithPromise("Annot.getActiveAppearanceState",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.setActiveAppearanceState=function(astate){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setActiveAppearanceState'. Expected 1 argument. Function Signature: setActiveAppearanceState(string)");
if(astate instanceof Promise)throw new TypeError("1st input argument in function 'setActiveAppearanceState' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof astate)throw new TypeError("1st input argument '"+astate+"' in function 'setActiveAppearanceState' is of type '"+typeof astate+"'. Expected type 'string'. Function Signature: setActiveAppearanceState(string).");return PDFNet.messageHandler.sendWithPromise("Annot.setActiveAppearanceState",{annot:this.id,
astate:astate},this.userPriority)};PDFNet.Annot.prototype.getColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColor'. Expected 0 arguments. Function Signature: getColor()");return PDFNet.messageHandler.sendWithPromise("Annot.getColor",{annot:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Annot.prototype.getColorAsRGB=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorAsRGB'. Expected 0 arguments. Function Signature: getColorAsRGB()");return PDFNet.messageHandler.sendWithPromise("Annot.getColorAsRGB",{annot:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Annot.prototype.getColorAsCMYK=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getColorAsCMYK'. Expected 0 arguments. Function Signature: getColorAsCMYK()");return PDFNet.messageHandler.sendWithPromise("Annot.getColorAsCMYK",{annot:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Annot.prototype.getColorAsGray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorAsGray'. Expected 0 arguments. Function Signature: getColorAsGray()");
return PDFNet.messageHandler.sendWithPromise("Annot.getColorAsGray",{annot:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Annot.prototype.getColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorCompNum'. Expected 0 arguments. Function Signature: getColorCompNum()");return PDFNet.messageHandler.sendWithPromise("Annot.getColorCompNum",
{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.setColorDefault=function(col){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColorDefault'. Expected 1 argument. Function Signature: setColorDefault(ColorPt)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setColorDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==
typeof col)throw new TypeError("1st input argument in function 'setColorDefault' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setColorDefault(ColorPt).");throw new TypeError("1st input argument '"+col+"' in function 'setColorDefault' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setColorDefault(ColorPt).");}if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setColorDefault'. Perhaps a yield statement is required for '"+
col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Annot.setColorDefault",{annot:this.id,col:col.id},this.userPriority)};PDFNet.Annot.prototype.setColor=function(col,numcomp){"undefined"===typeof numcomp&&(numcomp=3);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColor'. Expected 1 to 2 arguments. Function Signature: setColor(ColorPt, number)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setColor' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setColor(ColorPt, number).");}if(numcomp instanceof Promise)throw new TypeError("2nd input argument in function 'setColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof numcomp)throw new TypeError("2nd input argument '"+numcomp+"' in function 'setColor' is of type '"+typeof numcomp+"'. Expected type 'number'. Function Signature: setColor(ColorPt, number).");if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setColor'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");
return PDFNet.messageHandler.sendWithPromise("Annot.setColor",{annot:this.id,col:col.id,numcomp:numcomp},this.userPriority)};PDFNet.Annot.prototype.getStructParent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStructParent'. Expected 0 arguments. Function Signature: getStructParent()");return PDFNet.messageHandler.sendWithPromise("Annot.getStructParent",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.setStructParent=function(parkeyval){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStructParent'. Expected 1 argument. Function Signature: setStructParent(number)");if(parkeyval instanceof Promise)throw new TypeError("1st input argument in function 'setStructParent' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof parkeyval)throw new TypeError("1st input argument '"+parkeyval+"' in function 'setStructParent' is of type '"+typeof parkeyval+
"'. Expected type 'number'. Function Signature: setStructParent(number).");return PDFNet.messageHandler.sendWithPromise("Annot.setStructParent",{annot:this.id,parkeyval:parkeyval},this.userPriority)};PDFNet.Annot.prototype.getOptionalContent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOptionalContent'. Expected 0 arguments. Function Signature: getOptionalContent()");return PDFNet.messageHandler.sendWithPromise("Annot.getOptionalContent",
{annot:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Annot.prototype.setOptionalContent=function(content){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOptionalContent'. Expected 1 argument. Function Signature: setOptionalContent(Obj)");if(content instanceof Promise)throw new TypeError("1st input argument in function 'setOptionalContent' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(content instanceof PDFNet.Obj)){if("object"==typeof content)throw new TypeError("1st input argument in function 'setOptionalContent' is of type '"+content.name+"'. Expected type 'Obj'. Function Signature: setOptionalContent(Obj).");throw new TypeError("1st input argument '"+content+"' in function 'setOptionalContent' is of type '"+typeof content+"'. Expected type 'Obj'. Function Signature: setOptionalContent(Obj).");}return PDFNet.messageHandler.sendWithPromise("Annot.setOptionalContent",{annot:this.id,
content:content.id},this.userPriority)};PDFNet.Annot.prototype.refreshAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'refreshAppearance'. Expected 0 arguments. Function Signature: refreshAppearance()");return PDFNet.messageHandler.sendWithPromise("Annot.refreshAppearance",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.getRotation=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRotation'. Expected 0 arguments. Function Signature: getRotation()");
return PDFNet.messageHandler.sendWithPromise("Annot.getRotation",{annot:this.id},this.userPriority)};PDFNet.Annot.prototype.setRotation=function(angle){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRotation'. Expected 1 argument. Function Signature: setRotation(number)");if(angle instanceof Promise)throw new TypeError("1st input argument in function 'setRotation' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof angle)throw new TypeError("1st input argument '"+angle+"' in function 'setRotation' is of type '"+typeof angle+"'. Expected type 'number'. Function Signature: setRotation(number).");return PDFNet.messageHandler.sendWithPromise("Annot.setRotation",{annot:this.id,angle:angle},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.getWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWidth'. Expected 0 arguments. Function Signature: getWidth()");
return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.getWidth",{bs:this.id},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.setWidth=function(width){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setWidth'. Expected 1 argument. Function Signature: setWidth(number)");if(width instanceof Promise)throw new TypeError("1st input argument in function 'setWidth' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("1st input argument '"+width+"' in function 'setWidth' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: setWidth(number).");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.setWidth",{bs:this.id,width:width},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.getHR=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHR'. Expected 0 arguments. Function Signature: getHR()");
return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.getHR",{bs:this.id},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.setHR=function(horizontal_radius){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHR'. Expected 1 argument. Function Signature: setHR(number)");if(horizontal_radius instanceof Promise)throw new TypeError("1st input argument in function 'setHR' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof horizontal_radius)throw new TypeError("1st input argument '"+horizontal_radius+"' in function 'setHR' is of type '"+typeof horizontal_radius+"'. Expected type 'number'. Function Signature: setHR(number).");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.setHR",{bs:this.id,horizontal_radius:horizontal_radius},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.getVR=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVR'. Expected 0 arguments. Function Signature: getVR()");
return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.getVR",{bs:this.id},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.setVR=function(vertical_radius){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setVR'. Expected 1 argument. Function Signature: setVR(number)");if(vertical_radius instanceof Promise)throw new TypeError("1st input argument in function 'setVR' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof vertical_radius)throw new TypeError("1st input argument '"+vertical_radius+"' in function 'setVR' is of type '"+typeof vertical_radius+"'. Expected type 'number'. Function Signature: setVR(number).");return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.setVR",{bs:this.id,vertical_radius:vertical_radius},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.getDashPattern=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDashPattern'. Expected 0 arguments. Function Signature: getDashPattern()");
return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.getDashPattern",{bs:this.id},this.userPriority).then(function(id){return new Float64Array(id)})};PDFNet.Annot.prototype.getBorderStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderStyle'. Expected 0 arguments. Function Signature: getBorderStyle()");return PDFNet.messageHandler.sendWithPromise("Annot.getBorderStyle",{annot:this.id},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.AnnotBorderStyle(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Annot.prototype.setBorderStyle=function(bs,oldStyleOnly){"undefined"===typeof oldStyleOnly&&(oldStyleOnly=!1);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderStyle'. Expected 1 to 2 arguments. Function Signature: setBorderStyle(AnnotBorderStyle, boolean)");if(bs instanceof Promise)throw new TypeError("1st input argument in function 'setBorderStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(bs instanceof PDFNet.AnnotBorderStyle)){if("object"==typeof bs)throw new TypeError("1st input argument in function 'setBorderStyle' is of type '"+bs.name+"'. Expected type 'AnnotBorderStyle'. Function Signature: setBorderStyle(AnnotBorderStyle, boolean).");throw new TypeError("1st input argument '"+bs+"' in function 'setBorderStyle' is of type '"+typeof bs+"'. Expected type 'AnnotBorderStyle'. Function Signature: setBorderStyle(AnnotBorderStyle, boolean).");}if(oldStyleOnly instanceof Promise)throw new TypeError("2nd input argument in function 'setBorderStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof oldStyleOnly)throw new TypeError("2nd input argument '"+oldStyleOnly+"' in function 'setBorderStyle' is of type '"+typeof oldStyleOnly+"'. Expected type 'boolean'. Function Signature: setBorderStyle(AnnotBorderStyle, boolean).");return PDFNet.messageHandler.sendWithPromise("Annot.setBorderStyle",{annot:this.id,bs:bs.id,oldStyleOnly:oldStyleOnly},this.userPriority)};PDFNet.Annot.getBorderStyleStyle=function(bs){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderStyleStyle'. Expected 1 argument. Function Signature: getBorderStyleStyle(AnnotBorderStyle)");
if(bs instanceof Promise)throw new TypeError("1st input argument in function 'getBorderStyleStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(bs instanceof PDFNet.AnnotBorderStyle)){if("object"==typeof bs)throw new TypeError("1st input argument in function 'getBorderStyleStyle' is of type '"+bs.name+"'. Expected type 'AnnotBorderStyle'. Function Signature: getBorderStyleStyle(AnnotBorderStyle).");throw new TypeError("1st input argument '"+bs+"' in function 'getBorderStyleStyle' is of type '"+
typeof bs+"'. Expected type 'AnnotBorderStyle'. Function Signature: getBorderStyleStyle(AnnotBorderStyle).");}return PDFNet.messageHandler.sendWithPromise("annotGetBorderStyleStyle",{bs:bs.id},this.userPriority)};PDFNet.Annot.setBorderStyleStyle=function(bs,bst){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderStyleStyle'. Expected 2 arguments. Function Signature: setBorderStyleStyle(AnnotBorderStyle, number)");if(bs instanceof Promise)throw new TypeError("1st input argument in function 'setBorderStyleStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(bs instanceof PDFNet.AnnotBorderStyle)){if("object"==typeof bs)throw new TypeError("1st input argument in function 'setBorderStyleStyle' is of type '"+bs.name+"'. Expected type 'AnnotBorderStyle'. Function Signature: setBorderStyleStyle(AnnotBorderStyle, number).");throw new TypeError("1st input argument '"+bs+"' in function 'setBorderStyleStyle' is of type '"+typeof bs+"'. Expected type 'AnnotBorderStyle'. Function Signature: setBorderStyleStyle(AnnotBorderStyle, number).");}if(bst instanceof
Promise)throw new TypeError("2nd input argument in function 'setBorderStyleStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bst)throw new TypeError("2nd input argument '"+bst+"' in function 'setBorderStyleStyle' is of type '"+typeof bst+"'. Expected type 'number'. Function Signature: setBorderStyleStyle(AnnotBorderStyle, number).");return PDFNet.messageHandler.sendWithPromise("annotSetBorderStyleStyle",{bs:bs.id,bst:bst},this.userPriority)};
PDFNet.AnnotBorderStyle.prototype.assign=function(to){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(AnnotBorderStyle)");if(to instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(to instanceof PDFNet.AnnotBorderStyle)){if("object"==typeof to)throw new TypeError("1st input argument in function 'assign' is of type '"+
to.name+"'. Expected type 'AnnotBorderStyle'. Function Signature: assign(AnnotBorderStyle).");throw new TypeError("1st input argument '"+to+"' in function 'assign' is of type '"+typeof to+"'. Expected type 'AnnotBorderStyle'. Function Signature: assign(AnnotBorderStyle).");}return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.assign",{from:this.id,to:to.id},this.userPriority)};PDFNet.AnnotBorderStyle.prototype.compare=function(b){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(AnnotBorderStyle)");if(b instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(b instanceof PDFNet.AnnotBorderStyle)){if("object"==typeof b)throw new TypeError("1st input argument in function 'compare' is of type '"+b.name+"'. Expected type 'AnnotBorderStyle'. Function Signature: compare(AnnotBorderStyle).");
throw new TypeError("1st input argument '"+b+"' in function 'compare' is of type '"+typeof b+"'. Expected type 'AnnotBorderStyle'. Function Signature: compare(AnnotBorderStyle).");}return PDFNet.messageHandler.sendWithPromise("AnnotBorderStyle.compare",{a:this.id,b:b.id},this.userPriority)};PDFNet.CaretAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("caretAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.CaretAnnot(id)})};PDFNet.CaretAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("caretAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.CaretAnnot(id)})};PDFNet.CaretAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==
typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("caretAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.CaretAnnot(id)})};PDFNet.CaretAnnot.prototype.getSymbol=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSymbol'. Expected 0 arguments. Function Signature: getSymbol()");return PDFNet.messageHandler.sendWithPromise("CaretAnnot.getSymbol",{caret:this.id},this.userPriority)};
PDFNet.CaretAnnot.prototype.setSymbol=function(symbol){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSymbol'. Expected 1 argument. Function Signature: setSymbol(string)");if(symbol instanceof Promise)throw new TypeError("1st input argument in function 'setSymbol' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof symbol)throw new TypeError("1st input argument '"+symbol+"' in function 'setSymbol' is of type '"+
typeof symbol+"'. Expected type 'string'. Function Signature: setSymbol(string).");return PDFNet.messageHandler.sendWithPromise("CaretAnnot.setSymbol",{caret:this.id,symbol:symbol},this.userPriority)};PDFNet.LineAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("lineAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.LineAnnot(id)})};PDFNet.LineAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("lineAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.LineAnnot(id)})};PDFNet.LineAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("lineAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.LineAnnot(id)})};PDFNet.LineAnnot.prototype.getStartPoint=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStartPoint'. Expected 0 arguments. Function Signature: getStartPoint()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getStartPoint",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setStartPoint=function(sp){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setStartPoint'. Expected 1 argument. Function Signature: setStartPoint(Point)");if(sp instanceof Promise)throw new TypeError("1st input argument in function 'setStartPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(sp instanceof PDFNet.Point)&&"Point"!=sp.name){if("object"==typeof sp)throw new TypeError("1st input argument in function 'setStartPoint' is of type '"+sp.name+"'. Expected type 'Point'. Function Signature: setStartPoint(Point).");
throw new TypeError("1st input argument '"+sp+"' in function 'setStartPoint' is of type '"+typeof sp+"'. Expected type 'Point'. Function Signature: setStartPoint(Point).");}if("undefined"!=typeof sp.yieldFunction)throw Error("Function '"+sp.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setStartPoint'. Perhaps a yield statement is required for '"+sp.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setStartPoint",
{line:this.id,sp:sp},this.userPriority)};PDFNet.LineAnnot.prototype.getEndPoint=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEndPoint'. Expected 0 arguments. Function Signature: getEndPoint()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getEndPoint",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setEndPoint=function(ep){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEndPoint'. Expected 1 argument. Function Signature: setEndPoint(Point)");
if(ep instanceof Promise)throw new TypeError("1st input argument in function 'setEndPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ep instanceof PDFNet.Point)&&"Point"!=ep.name){if("object"==typeof ep)throw new TypeError("1st input argument in function 'setEndPoint' is of type '"+ep.name+"'. Expected type 'Point'. Function Signature: setEndPoint(Point).");throw new TypeError("1st input argument '"+ep+"' in function 'setEndPoint' is of type '"+typeof ep+
"'. Expected type 'Point'. Function Signature: setEndPoint(Point).");}if("undefined"!=typeof ep.yieldFunction)throw Error("Function '"+ep.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setEndPoint'. Perhaps a yield statement is required for '"+ep.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setEndPoint",{line:this.id,ep:ep},this.userPriority)};PDFNet.LineAnnot.prototype.getStartStyle=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStartStyle'. Expected 0 arguments. Function Signature: getStartStyle()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getStartStyle",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setStartStyle=function(ss){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStartStyle'. Expected 1 argument. Function Signature: setStartStyle(number)");
if(ss instanceof Promise)throw new TypeError("1st input argument in function 'setStartStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof ss)throw new TypeError("1st input argument '"+ss+"' in function 'setStartStyle' is of type '"+typeof ss+"'. Expected type 'number'. Function Signature: setStartStyle(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setStartStyle",{line:this.id,ss:ss},this.userPriority)};PDFNet.LineAnnot.prototype.getEndStyle=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEndStyle'. Expected 0 arguments. Function Signature: getEndStyle()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getEndStyle",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setEndStyle=function(es){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEndStyle'. Expected 1 argument. Function Signature: setEndStyle(number)");
if(es instanceof Promise)throw new TypeError("1st input argument in function 'setEndStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof es)throw new TypeError("1st input argument '"+es+"' in function 'setEndStyle' is of type '"+typeof es+"'. Expected type 'number'. Function Signature: setEndStyle(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setEndStyle",{line:this.id,es:es},this.userPriority)};PDFNet.LineAnnot.prototype.getLeaderLineLength=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLeaderLineLength'. Expected 0 arguments. Function Signature: getLeaderLineLength()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getLeaderLineLength",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setLeaderLineLength=function(length){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLeaderLineLength'. Expected 1 argument. Function Signature: setLeaderLineLength(number)");
if(length instanceof Promise)throw new TypeError("1st input argument in function 'setLeaderLineLength' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof length)throw new TypeError("1st input argument '"+length+"' in function 'setLeaderLineLength' is of type '"+typeof length+"'. Expected type 'number'. Function Signature: setLeaderLineLength(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setLeaderLineLength",{line:this.id,length:length},
this.userPriority)};PDFNet.LineAnnot.prototype.getLeaderLineExtensionLength=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLeaderLineExtensionLength'. Expected 0 arguments. Function Signature: getLeaderLineExtensionLength()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getLeaderLineExtensionLength",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setLeaderLineExtensionLength=function(length){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setLeaderLineExtensionLength'. Expected 1 argument. Function Signature: setLeaderLineExtensionLength(number)");if(length instanceof Promise)throw new TypeError("1st input argument in function 'setLeaderLineExtensionLength' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof length)throw new TypeError("1st input argument '"+length+"' in function 'setLeaderLineExtensionLength' is of type '"+typeof length+"'. Expected type 'number'. Function Signature: setLeaderLineExtensionLength(number).");
return PDFNet.messageHandler.sendWithPromise("LineAnnot.setLeaderLineExtensionLength",{line:this.id,length:length},this.userPriority)};PDFNet.LineAnnot.prototype.getShowCaption=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getShowCaption'. Expected 0 arguments. Function Signature: getShowCaption()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getShowCaption",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setShowCaption=
function(showCaption){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setShowCaption'. Expected 1 argument. Function Signature: setShowCaption(boolean)");if(showCaption instanceof Promise)throw new TypeError("1st input argument in function 'setShowCaption' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof showCaption)throw new TypeError("1st input argument '"+showCaption+"' in function 'setShowCaption' is of type '"+
typeof showCaption+"'. Expected type 'boolean'. Function Signature: setShowCaption(boolean).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setShowCaption",{line:this.id,showCaption:showCaption},this.userPriority)};PDFNet.LineAnnot.prototype.getIntentType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIntentType'. Expected 0 arguments. Function Signature: getIntentType()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getIntentType",
{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setIntentType=function(it){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntentType'. Expected 1 argument. Function Signature: setIntentType(number)");if(it instanceof Promise)throw new TypeError("1st input argument in function 'setIntentType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof it)throw new TypeError("1st input argument '"+
it+"' in function 'setIntentType' is of type '"+typeof it+"'. Expected type 'number'. Function Signature: setIntentType(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setIntentType",{line:this.id,it:it},this.userPriority)};PDFNet.LineAnnot.prototype.getCapPos=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCapPos'. Expected 0 arguments. Function Signature: getCapPos()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getCapPos",
{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setCapPos=function(it){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCapPos'. Expected 1 argument. Function Signature: setCapPos(number)");if(it instanceof Promise)throw new TypeError("1st input argument in function 'setCapPos' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof it)throw new TypeError("1st input argument '"+it+"' in function 'setCapPos' is of type '"+
typeof it+"'. Expected type 'number'. Function Signature: setCapPos(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setCapPos",{line:this.id,it:it},this.userPriority)};PDFNet.LineAnnot.prototype.getLeaderLineOffset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLeaderLineOffset'. Expected 0 arguments. Function Signature: getLeaderLineOffset()");return PDFNet.messageHandler.sendWithPromise("LineAnnot.getLeaderLineOffset",
{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setLeaderLineOffset=function(length){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLeaderLineOffset'. Expected 1 argument. Function Signature: setLeaderLineOffset(number)");if(length instanceof Promise)throw new TypeError("1st input argument in function 'setLeaderLineOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof length)throw new TypeError("1st input argument '"+
length+"' in function 'setLeaderLineOffset' is of type '"+typeof length+"'. Expected type 'number'. Function Signature: setLeaderLineOffset(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setLeaderLineOffset",{line:this.id,length:length},this.userPriority)};PDFNet.LineAnnot.prototype.getTextHOffset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextHOffset'. Expected 0 arguments. Function Signature: getTextHOffset()");
return PDFNet.messageHandler.sendWithPromise("LineAnnot.getTextHOffset",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setTextHOffset=function(offset){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextHOffset'. Expected 1 argument. Function Signature: setTextHOffset(number)");if(offset instanceof Promise)throw new TypeError("1st input argument in function 'setTextHOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof offset)throw new TypeError("1st input argument '"+offset+"' in function 'setTextHOffset' is of type '"+typeof offset+"'. Expected type 'number'. Function Signature: setTextHOffset(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setTextHOffset",{line:this.id,offset:offset},this.userPriority)};PDFNet.LineAnnot.prototype.getTextVOffset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextVOffset'. Expected 0 arguments. Function Signature: getTextVOffset()");
return PDFNet.messageHandler.sendWithPromise("LineAnnot.getTextVOffset",{line:this.id},this.userPriority)};PDFNet.LineAnnot.prototype.setTextVOffset=function(offset){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextVOffset'. Expected 1 argument. Function Signature: setTextVOffset(number)");if(offset instanceof Promise)throw new TypeError("1st input argument in function 'setTextVOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof offset)throw new TypeError("1st input argument '"+offset+"' in function 'setTextVOffset' is of type '"+typeof offset+"'. Expected type 'number'. Function Signature: setTextVOffset(number).");return PDFNet.messageHandler.sendWithPromise("LineAnnot.setTextVOffset",{line:this.id,offset:offset},this.userPriority)};PDFNet.CircleAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("circleAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.CircleAnnot(id)})};PDFNet.CircleAnnot.createFromAnnot=function(circle){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(circle instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(circle instanceof PDFNet.Annot)){if("object"==typeof circle)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+circle.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+circle+"' in function 'createFromAnnot' is of type '"+typeof circle+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("circleAnnotCreateFromAnnot",{circle:circle.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.CircleAnnot(id)})};PDFNet.CircleAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||
doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("circleAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.CircleAnnot(id)})};PDFNet.CircleAnnot.prototype.getInteriorColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColor'. Expected 0 arguments. Function Signature: getInteriorColor()");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.getInteriorColor",
{circle:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.CircleAnnot.prototype.getInteriorColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColorCompNum'. Expected 0 arguments. Function Signature: getInteriorColorCompNum()");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.getInteriorColorCompNum",{circle:this.id},
this.userPriority)};PDFNet.CircleAnnot.prototype.setInteriorColorDefault=function(col){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInteriorColorDefault'. Expected 1 argument. Function Signature: setInteriorColorDefault(ColorPt)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColorDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&
"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setInteriorColorDefault' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorDefault(ColorPt).");throw new TypeError("1st input argument '"+col+"' in function 'setInteriorColorDefault' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorDefault(ColorPt).");}if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColorDefault'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.setInteriorColorDefault",{circle:this.id,col:col.id},this.userPriority)};PDFNet.CircleAnnot.prototype.setInteriorColor=function(col,numcomp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInteriorColor'. Expected 2 arguments. Function Signature: setInteriorColor(ColorPt, number)");
if(col instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setInteriorColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setInteriorColor' is of type '"+
typeof col+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");}if(numcomp instanceof Promise)throw new TypeError("2nd input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof numcomp)throw new TypeError("2nd input argument '"+numcomp+"' in function 'setInteriorColor' is of type '"+typeof numcomp+"'. Expected type 'number'. Function Signature: setInteriorColor(ColorPt, number).");
if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColor'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.setInteriorColor",{circle:this.id,col:col.id,numcomp:numcomp},this.userPriority)};PDFNet.CircleAnnot.prototype.getContentRect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getContentRect'. Expected 0 arguments. Function Signature: getContentRect()");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.getContentRect",{circle:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.CircleAnnot.prototype.setContentRect=function(cr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setContentRect'. Expected 1 argument. Function Signature: setContentRect(Rect)");
if(cr instanceof Promise)throw new TypeError("1st input argument in function 'setContentRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cr instanceof PDFNet.Rect)&&"Rect"!=cr.name){if("object"==typeof cr)throw new TypeError("1st input argument in function 'setContentRect' is of type '"+cr.name+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");throw new TypeError("1st input argument '"+cr+"' in function 'setContentRect' is of type '"+
typeof cr+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");}if("undefined"!=typeof cr.yieldFunction)throw Error("Function '"+cr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setContentRect'. Perhaps a yield statement is required for '"+cr.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.setContentRect",{circle:this.id,cr:cr},this.userPriority)};PDFNet.CircleAnnot.prototype.getPadding=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPadding'. Expected 0 arguments. Function Signature: getPadding()");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.getPadding",{circle:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.CircleAnnot.prototype.setPadding=function(cr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPadding'. Expected 1 argument. Function Signature: setPadding(Rect)");
if(cr instanceof Promise)throw new TypeError("1st input argument in function 'setPadding' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cr instanceof PDFNet.Rect)&&"Rect"!=cr.name){if("object"==typeof cr)throw new TypeError("1st input argument in function 'setPadding' is of type '"+cr.name+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");throw new TypeError("1st input argument '"+cr+"' in function 'setPadding' is of type '"+typeof cr+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");
}if("undefined"!=typeof cr.yieldFunction)throw Error("Function '"+cr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setPadding'. Perhaps a yield statement is required for '"+cr.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("CircleAnnot.setPadding",{circle:this.id,cr:cr},this.userPriority)};PDFNet.FileAttachmentAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));
if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("fileAttachmentAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileAttachmentAnnot(id)})};PDFNet.FileAttachmentAnnot.prototype.export=function(save_as){"undefined"===typeof save_as&&(save_as="");if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'export'. Expected at most 1 arguments. Function Signature: export(string)");if(save_as instanceof Promise)throw new TypeError("1st input argument in function 'export' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof save_as)throw new TypeError("1st input argument '"+save_as+"' in function 'export' is of type '"+typeof save_as+"'. Expected type 'string'. Function Signature: export(string).");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.export",
{fileatt:this.id,save_as:save_as},this.userPriority)};PDFNet.FileAttachmentAnnot.prototype.createFromAnnot=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 0 arguments. Function Signature: createFromAnnot()");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.createFromAnnot",{fileatt:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};PDFNet.FileAttachmentAnnot.createWithFileSpec=
function(doc,pos,fs,icon_name){"undefined"===typeof icon_name&&(icon_name=PDFNet.FileAttachmentAnnot.Icon.e_PushPin);if(3>arguments.length||4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createWithFileSpec'. Expected 3 to 4 arguments. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createWithFileSpec' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createWithFileSpec' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");throw new TypeError("1st input argument '"+doc+"' in function 'createWithFileSpec' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");
}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'createWithFileSpec' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'createWithFileSpec' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");throw new TypeError("2nd input argument '"+pos+
"' in function 'createWithFileSpec' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");}if(fs instanceof Promise)throw new TypeError("3rd input argument in function 'createWithFileSpec' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(fs instanceof PDFNet.FileSpec)){if("object"==typeof fs)throw new TypeError("3rd input argument in function 'createWithFileSpec' is of type '"+fs.name+"'. Expected type 'FileSpec'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");
throw new TypeError("3rd input argument '"+fs+"' in function 'createWithFileSpec' is of type '"+typeof fs+"'. Expected type 'FileSpec'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");}if(icon_name instanceof Promise)throw new TypeError("4th input argument in function 'createWithFileSpec' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof icon_name)throw new TypeError("4th input argument '"+icon_name+"' in function 'createWithFileSpec' is of type '"+
typeof icon_name+"'. Expected type 'number'. Function Signature: createWithFileSpec(SDFDoc, Rect, FileSpec, number).");if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'createWithFileSpec'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("fileAttachmentAnnotCreateWithFileSpec",
{doc:doc.id,pos:pos,fs:fs.id,icon_name:icon_name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileAttachmentAnnot(id)})};PDFNet.FileAttachmentAnnot.createDefault=function(doc,pos,path){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDefault'. Expected 3 arguments. Function Signature: createDefault(SDFDoc, Rect, string)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createDefault' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createDefault(SDFDoc, Rect, string).");throw new TypeError("1st input argument '"+doc+"' in function 'createDefault' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createDefault(SDFDoc, Rect, string).");}if(pos instanceof
Promise)throw new TypeError("2nd input argument in function 'createDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'createDefault' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: createDefault(SDFDoc, Rect, string).");throw new TypeError("2nd input argument '"+pos+"' in function 'createDefault' is of type '"+
typeof pos+"'. Expected type 'Rect'. Function Signature: createDefault(SDFDoc, Rect, string).");}if(path instanceof Promise)throw new TypeError("3rd input argument in function 'createDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("3rd input argument '"+path+"' in function 'createDefault' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: createDefault(SDFDoc, Rect, string).");if("undefined"!=
typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'createDefault'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("fileAttachmentAnnotCreateDefault",{doc:doc.id,pos:pos,path:path},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileAttachmentAnnot(id)})};PDFNet.FileAttachmentAnnot.prototype.getFileSpec=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFileSpec'. Expected 0 arguments. Function Signature: getFileSpec()");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.getFileSpec",{fileatt:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileSpec(id)})};PDFNet.FileAttachmentAnnot.prototype.setFileSpec=function(file){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFileSpec'. Expected 1 argument. Function Signature: setFileSpec(FileSpec)");
if(file instanceof Promise)throw new TypeError("1st input argument in function 'setFileSpec' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(file instanceof PDFNet.FileSpec)){if("object"==typeof file)throw new TypeError("1st input argument in function 'setFileSpec' is of type '"+file.name+"'. Expected type 'FileSpec'. Function Signature: setFileSpec(FileSpec).");throw new TypeError("1st input argument '"+file+"' in function 'setFileSpec' is of type '"+typeof file+
"'. Expected type 'FileSpec'. Function Signature: setFileSpec(FileSpec).");}return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.setFileSpec",{fileatt:this.id,file:file.id},this.userPriority)};PDFNet.FileAttachmentAnnot.prototype.getIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIcon'. Expected 0 arguments. Function Signature: getIcon()");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.getIcon",{fileatt:this.id},
this.userPriority)};PDFNet.FileAttachmentAnnot.prototype.setIcon=function(type){"undefined"===typeof type&&(type=PDFNet.FileAttachmentAnnot.Icon.e_PushPin);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIcon'. Expected at most 1 arguments. Function Signature: setIcon(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'setIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setIcon' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: setIcon(number).");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.setIcon",{fileatt:this.id,type:type},this.userPriority)};PDFNet.FileAttachmentAnnot.prototype.getIconName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIconName'. Expected 0 arguments. Function Signature: getIconName()");
return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.getIconName",{fileatt:this.id},this.userPriority)};PDFNet.FileAttachmentAnnot.prototype.setIconName=function(iname){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconName'. Expected 1 argument. Function Signature: setIconName(string)");if(iname instanceof Promise)throw new TypeError("1st input argument in function 'setIconName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof iname)throw new TypeError("1st input argument '"+iname+"' in function 'setIconName' is of type '"+typeof iname+"'. Expected type 'string'. Function Signature: setIconName(string).");return PDFNet.messageHandler.sendWithPromise("FileAttachmentAnnot.setIconName",{fileatt:this.id,iname:iname},this.userPriority)};PDFNet.FreeTextAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("freeTextAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FreeTextAnnot(id)})};PDFNet.FreeTextAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("freeTextAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.FreeTextAnnot(id)})};PDFNet.FreeTextAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("freeTextAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FreeTextAnnot(id)})};PDFNet.FreeTextAnnot.prototype.getDefaultAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDefaultAppearance'. Expected 0 arguments. Function Signature: getDefaultAppearance()");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getDefaultAppearance",
{ft:this.id},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setDefaultAppearance=function(app_str){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDefaultAppearance'. Expected 1 argument. Function Signature: setDefaultAppearance(string)");if(app_str instanceof Promise)throw new TypeError("1st input argument in function 'setDefaultAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof app_str)throw new TypeError("1st input argument '"+
app_str+"' in function 'setDefaultAppearance' is of type '"+typeof app_str+"'. Expected type 'string'. Function Signature: setDefaultAppearance(string).");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setDefaultAppearance",{ft:this.id,app_str:app_str},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getQuaddingFormat=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuaddingFormat'. Expected 0 arguments. Function Signature: getQuaddingFormat()");
return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getQuaddingFormat",{ft:this.id},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setQuaddingFormat=function(format){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuaddingFormat'. Expected 1 argument. Function Signature: setQuaddingFormat(number)");if(format instanceof Promise)throw new TypeError("1st input argument in function 'setQuaddingFormat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof format)throw new TypeError("1st input argument '"+format+"' in function 'setQuaddingFormat' is of type '"+typeof format+"'. Expected type 'number'. Function Signature: setQuaddingFormat(number).");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setQuaddingFormat",{ft:this.id,format:format},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getCalloutLinePoints=function(p1,p2,p3){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCalloutLinePoints'. Expected 3 arguments. Function Signature: getCalloutLinePoints(Point, Point, Point)");
if(p1 instanceof Promise)throw new TypeError("1st input argument in function 'getCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p1 instanceof PDFNet.Point)&&"Point"!=p1.name){if("object"==typeof p1)throw new TypeError("1st input argument in function 'getCalloutLinePoints' is of type '"+p1.name+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");throw new TypeError("1st input argument '"+p1+"' in function 'getCalloutLinePoints' is of type '"+
typeof p1+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");}if(p2 instanceof Promise)throw new TypeError("2nd input argument in function 'getCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p2 instanceof PDFNet.Point)&&"Point"!=p2.name){if("object"==typeof p2)throw new TypeError("2nd input argument in function 'getCalloutLinePoints' is of type '"+p2.name+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");
throw new TypeError("2nd input argument '"+p2+"' in function 'getCalloutLinePoints' is of type '"+typeof p2+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");}if(p3 instanceof Promise)throw new TypeError("3rd input argument in function 'getCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p3 instanceof PDFNet.Point)&&"Point"!=p3.name){if("object"==typeof p3)throw new TypeError("3rd input argument in function 'getCalloutLinePoints' is of type '"+
p3.name+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");throw new TypeError("3rd input argument '"+p3+"' in function 'getCalloutLinePoints' is of type '"+typeof p3+"'. Expected type 'Point'. Function Signature: getCalloutLinePoints(Point, Point, Point).");}if("undefined"!=typeof p1.yieldFunction)throw Error("Function '"+p1.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'getCalloutLinePoints'. Perhaps a yield statement is required for '"+
p1.yieldFunction+"'?");if("undefined"!=typeof p2.yieldFunction)throw Error("Function '"+p2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'getCalloutLinePoints'. Perhaps a yield statement is required for '"+p2.yieldFunction+"'?");if("undefined"!=typeof p3.yieldFunction)throw Error("Function '"+p3.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'getCalloutLinePoints'. Perhaps a yield statement is required for '"+
p3.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getCalloutLinePoints",{ft:this.id,p1:p1,p2:p2,p3:p3},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setCalloutLinePoints=function(p1,p2,p3){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCalloutLinePoints'. Expected 3 arguments. Function Signature: setCalloutLinePoints(Point, Point, Point)");if(p1 instanceof Promise)throw new TypeError("1st input argument in function 'setCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(p1 instanceof PDFNet.Point)&&"Point"!=p1.name){if("object"==typeof p1)throw new TypeError("1st input argument in function 'setCalloutLinePoints' is of type '"+p1.name+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");throw new TypeError("1st input argument '"+p1+"' in function 'setCalloutLinePoints' is of type '"+typeof p1+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");}if(p2 instanceof Promise)throw new TypeError("2nd input argument in function 'setCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(p2 instanceof PDFNet.Point)&&"Point"!=p2.name){if("object"==typeof p2)throw new TypeError("2nd input argument in function 'setCalloutLinePoints' is of type '"+p2.name+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");throw new TypeError("2nd input argument '"+p2+"' in function 'setCalloutLinePoints' is of type '"+typeof p2+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");}if(p3 instanceof Promise)throw new TypeError("3rd input argument in function 'setCalloutLinePoints' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(p3 instanceof PDFNet.Point)&&"Point"!=p3.name){if("object"==typeof p3)throw new TypeError("3rd input argument in function 'setCalloutLinePoints' is of type '"+p3.name+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");throw new TypeError("3rd input argument '"+p3+"' in function 'setCalloutLinePoints' is of type '"+typeof p3+"'. Expected type 'Point'. Function Signature: setCalloutLinePoints(Point, Point, Point).");}if("undefined"!=typeof p1.yieldFunction)throw Error("Function '"+
p1.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setCalloutLinePoints'. Perhaps a yield statement is required for '"+p1.yieldFunction+"'?");if("undefined"!=typeof p2.yieldFunction)throw Error("Function '"+p2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setCalloutLinePoints'. Perhaps a yield statement is required for '"+
p2.yieldFunction+"'?");if("undefined"!=typeof p3.yieldFunction)throw Error("Function '"+p3.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'setCalloutLinePoints'. Perhaps a yield statement is required for '"+p3.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setCalloutLinePoints",{ft:this.id,p1:p1,p2:p2,p3:p3},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setCalloutLinePointsTwo=
function(p1,p2){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCalloutLinePointsTwo'. Expected 2 arguments. Function Signature: setCalloutLinePointsTwo(Point, Point)");if(p1 instanceof Promise)throw new TypeError("1st input argument in function 'setCalloutLinePointsTwo' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p1 instanceof PDFNet.Point)&&"Point"!=p1.name){if("object"==typeof p1)throw new TypeError("1st input argument in function 'setCalloutLinePointsTwo' is of type '"+
p1.name+"'. Expected type 'Point'. Function Signature: setCalloutLinePointsTwo(Point, Point).");throw new TypeError("1st input argument '"+p1+"' in function 'setCalloutLinePointsTwo' is of type '"+typeof p1+"'. Expected type 'Point'. Function Signature: setCalloutLinePointsTwo(Point, Point).");}if(p2 instanceof Promise)throw new TypeError("2nd input argument in function 'setCalloutLinePointsTwo' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p2 instanceof PDFNet.Point)&&
"Point"!=p2.name){if("object"==typeof p2)throw new TypeError("2nd input argument in function 'setCalloutLinePointsTwo' is of type '"+p2.name+"'. Expected type 'Point'. Function Signature: setCalloutLinePointsTwo(Point, Point).");throw new TypeError("2nd input argument '"+p2+"' in function 'setCalloutLinePointsTwo' is of type '"+typeof p2+"'. Expected type 'Point'. Function Signature: setCalloutLinePointsTwo(Point, Point).");}if("undefined"!=typeof p1.yieldFunction)throw Error("Function '"+p1.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setCalloutLinePointsTwo'. Perhaps a yield statement is required for '"+p1.yieldFunction+"'?");if("undefined"!=typeof p2.yieldFunction)throw Error("Function '"+p2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setCalloutLinePointsTwo'. Perhaps a yield statement is required for '"+
p2.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setCalloutLinePointsTwo",{ft:this.id,p1:p1,p2:p2},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getIntentName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIntentName'. Expected 0 arguments. Function Signature: getIntentName()");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getIntentName",{ft:this.id},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setIntentName=
function(mode){"undefined"===typeof mode&&(mode=PDFNet.FreeTextAnnot.IntentName.e_FreeText);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntentName'. Expected at most 1 arguments. Function Signature: setIntentName(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setIntentName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+
mode+"' in function 'setIntentName' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setIntentName(number).");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setIntentName",{ft:this.id,mode:mode},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setIntentNameDefault=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntentNameDefault'. Expected 0 arguments. Function Signature: setIntentNameDefault()");
return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setIntentNameDefault",{ft:this.id},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getEndingStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEndingStyle'. Expected 0 arguments. Function Signature: getEndingStyle()");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getEndingStyle",{ft:this.id},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setEndingStyle=function(style){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEndingStyle'. Expected 1 argument. Function Signature: setEndingStyle(number)");if(style instanceof Promise)throw new TypeError("1st input argument in function 'setEndingStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof style)throw new TypeError("1st input argument '"+style+"' in function 'setEndingStyle' is of type '"+typeof style+"'. Expected type 'number'. Function Signature: setEndingStyle(number).");
return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setEndingStyle",{ft:this.id,style:style},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setEndingStyleName=function(est){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEndingStyleName'. Expected 1 argument. Function Signature: setEndingStyleName(string)");if(est instanceof Promise)throw new TypeError("1st input argument in function 'setEndingStyleName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof est)throw new TypeError("1st input argument '"+est+"' in function 'setEndingStyleName' is of type '"+typeof est+"'. Expected type 'string'. Function Signature: setEndingStyleName(string).");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setEndingStyleName",{ft:this.id,est:est},this.userPriority)};PDFNet.FreeTextAnnot.prototype.setTextColor=function(color,col_comp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextColor'. Expected 2 arguments. Function Signature: setTextColor(ColorPt, number)");
if(color instanceof Promise)throw new TypeError("1st input argument in function 'setTextColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(color instanceof PDFNet.ColorPt)&&"ColorPt"!=color.name){if("object"==typeof color)throw new TypeError("1st input argument in function 'setTextColor' is of type '"+color.name+"'. Expected type 'ColorPt'. Function Signature: setTextColor(ColorPt, number).");throw new TypeError("1st input argument '"+color+"' in function 'setTextColor' is of type '"+
typeof color+"'. Expected type 'ColorPt'. Function Signature: setTextColor(ColorPt, number).");}if(col_comp instanceof Promise)throw new TypeError("2nd input argument in function 'setTextColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof col_comp)throw new TypeError("2nd input argument '"+col_comp+"' in function 'setTextColor' is of type '"+typeof col_comp+"'. Expected type 'number'. Function Signature: setTextColor(ColorPt, number).");if("undefined"!=
typeof color.yieldFunction)throw Error("Function '"+color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setTextColor'. Perhaps a yield statement is required for '"+color.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setTextColor",{ft:this.id,color:color.id,col_comp:col_comp},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getTextColor=function(col_comp){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTextColor'. Expected 1 argument. Function Signature: getTextColor(number)");if(col_comp instanceof Promise)throw new TypeError("2nd input argument in function 'getTextColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof col_comp)throw new TypeError("2nd input argument '"+col_comp+"' in function 'getTextColor' is of type '"+typeof col_comp+"'. Expected type 'number'. Function Signature: getTextColor(number).");
var me=this;this.yieldFunction="FreeTextAnnot.getTextColor";return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getTextColor",{ft:this.id,col_comp:col_comp},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.FreeTextAnnot.prototype.setLineColor=function(color,col_comp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLineColor'. Expected 2 arguments. Function Signature: setLineColor(ColorPt, number)");
if(color instanceof Promise)throw new TypeError("1st input argument in function 'setLineColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(color instanceof PDFNet.ColorPt)&&"ColorPt"!=color.name){if("object"==typeof color)throw new TypeError("1st input argument in function 'setLineColor' is of type '"+color.name+"'. Expected type 'ColorPt'. Function Signature: setLineColor(ColorPt, number).");throw new TypeError("1st input argument '"+color+"' in function 'setLineColor' is of type '"+
typeof color+"'. Expected type 'ColorPt'. Function Signature: setLineColor(ColorPt, number).");}if(col_comp instanceof Promise)throw new TypeError("2nd input argument in function 'setLineColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof col_comp)throw new TypeError("2nd input argument '"+col_comp+"' in function 'setLineColor' is of type '"+typeof col_comp+"'. Expected type 'number'. Function Signature: setLineColor(ColorPt, number).");if("undefined"!=
typeof color.yieldFunction)throw Error("Function '"+color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setLineColor'. Perhaps a yield statement is required for '"+color.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setLineColor",{ft:this.id,color:color.id,col_comp:col_comp},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getLineColor=function(col_comp){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getLineColor'. Expected 1 argument. Function Signature: getLineColor(number)");if(col_comp instanceof Promise)throw new TypeError("2nd input argument in function 'getLineColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof col_comp)throw new TypeError("2nd input argument '"+col_comp+"' in function 'getLineColor' is of type '"+typeof col_comp+"'. Expected type 'number'. Function Signature: getLineColor(number).");
var me=this;this.yieldFunction="FreeTextAnnot.getLineColor";return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getLineColor",{ft:this.id,col_comp:col_comp},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.FreeTextAnnot.prototype.setFontSize=function(font_size){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFontSize'. Expected 1 argument. Function Signature: setFontSize(number)");if(font_size instanceof
Promise)throw new TypeError("1st input argument in function 'setFontSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof font_size)throw new TypeError("1st input argument '"+font_size+"' in function 'setFontSize' is of type '"+typeof font_size+"'. Expected type 'number'. Function Signature: setFontSize(number).");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.setFontSize",{ft:this.id,font_size:font_size},this.userPriority)};PDFNet.FreeTextAnnot.prototype.getFontSize=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFontSize'. Expected 0 arguments. Function Signature: getFontSize()");return PDFNet.messageHandler.sendWithPromise("FreeTextAnnot.getFontSize",{ft:this.id},this.userPriority)};PDFNet.HighlightAnnot.createFromObj=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("highlightAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.HighlightAnnot(id)})};PDFNet.HighlightAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("highlightAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.HighlightAnnot(id)})};PDFNet.HighlightAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("highlightAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.HighlightAnnot(id)})};PDFNet.InkAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("inkAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.InkAnnot(id)})};PDFNet.InkAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("inkAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.InkAnnot(id)})};PDFNet.InkAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("inkAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.InkAnnot(id)})};PDFNet.InkAnnot.prototype.getPathCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPathCount'. Expected 0 arguments. Function Signature: getPathCount()");return PDFNet.messageHandler.sendWithPromise("InkAnnot.getPathCount",{ink:this.id},this.userPriority)};PDFNet.InkAnnot.prototype.getPointCount=function(pathindex){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPointCount'. Expected 1 argument. Function Signature: getPointCount(number)");if(pathindex instanceof Promise)throw new TypeError("1st input argument in function 'getPointCount' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pathindex)throw new TypeError("1st input argument '"+pathindex+"' in function 'getPointCount' is of type '"+typeof pathindex+"'. Expected type 'number'. Function Signature: getPointCount(number).");
return PDFNet.messageHandler.sendWithPromise("InkAnnot.getPointCount",{ink:this.id,pathindex:pathindex},this.userPriority)};PDFNet.InkAnnot.prototype.getPoint=function(pathindex,pointindex){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPoint'. Expected 2 arguments. Function Signature: getPoint(number, number)");if(pathindex instanceof Promise)throw new TypeError("1st input argument in function 'getPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pathindex)throw new TypeError("1st input argument '"+pathindex+"' in function 'getPoint' is of type '"+typeof pathindex+"'. Expected type 'number'. Function Signature: getPoint(number, number).");if(pointindex instanceof Promise)throw new TypeError("2nd input argument in function 'getPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pointindex)throw new TypeError("2nd input argument '"+pointindex+"' in function 'getPoint' is of type '"+
typeof pointindex+"'. Expected type 'number'. Function Signature: getPoint(number, number).");return PDFNet.messageHandler.sendWithPromise("InkAnnot.getPoint",{ink:this.id,pathindex:pathindex,pointindex:pointindex},this.userPriority)};PDFNet.InkAnnot.prototype.setPoint=function(pathindex,pointindex,pt){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPoint'. Expected 3 arguments. Function Signature: setPoint(number, number, Point)");if(pathindex instanceof
Promise)throw new TypeError("1st input argument in function 'setPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pathindex)throw new TypeError("1st input argument '"+pathindex+"' in function 'setPoint' is of type '"+typeof pathindex+"'. Expected type 'number'. Function Signature: setPoint(number, number, Point).");if(pointindex instanceof Promise)throw new TypeError("2nd input argument in function 'setPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pointindex)throw new TypeError("2nd input argument '"+pointindex+"' in function 'setPoint' is of type '"+typeof pointindex+"'. Expected type 'number'. Function Signature: setPoint(number, number, Point).");if(pt instanceof Promise)throw new TypeError("3rd input argument in function 'setPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pt instanceof PDFNet.Point)&&"Point"!=pt.name){if("object"==typeof pt)throw new TypeError("3rd input argument in function 'setPoint' is of type '"+
pt.name+"'. Expected type 'Point'. Function Signature: setPoint(number, number, Point).");throw new TypeError("3rd input argument '"+pt+"' in function 'setPoint' is of type '"+typeof pt+"'. Expected type 'Point'. Function Signature: setPoint(number, number, Point).");}if("undefined"!=typeof pt.yieldFunction)throw Error("Function '"+pt.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'setPoint'. Perhaps a yield statement is required for '"+
pt.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("InkAnnot.setPoint",{ink:this.id,pathindex:pathindex,pointindex:pointindex,pt:pt},this.userPriority)};PDFNet.InkAnnot.prototype.erase=function(pt1,pt2,width){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'erase'. Expected 3 arguments. Function Signature: erase(Point, Point, number)");if(pt1 instanceof Promise)throw new TypeError("1st input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pt1 instanceof PDFNet.Point)&&"Point"!=pt1.name){if("object"==typeof pt1)throw new TypeError("1st input argument in function 'erase' is of type '"+pt1.name+"'. Expected type 'Point'. Function Signature: erase(Point, Point, number).");throw new TypeError("1st input argument '"+pt1+"' in function 'erase' is of type '"+typeof pt1+"'. Expected type 'Point'. Function Signature: erase(Point, Point, number).");}if(pt2 instanceof Promise)throw new TypeError("2nd input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pt2 instanceof PDFNet.Point)&&"Point"!=pt2.name){if("object"==typeof pt2)throw new TypeError("2nd input argument in function 'erase' is of type '"+pt2.name+"'. Expected type 'Point'. Function Signature: erase(Point, Point, number).");throw new TypeError("2nd input argument '"+pt2+"' in function 'erase' is of type '"+typeof pt2+"'. Expected type 'Point'. Function Signature: erase(Point, Point, number).");}if(width instanceof Promise)throw new TypeError("3rd input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'erase' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: erase(Point, Point, number).");if("undefined"!=typeof pt1.yieldFunction)throw Error("Function '"+pt1.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'erase'. Perhaps a yield statement is required for '"+pt1.yieldFunction+"'?");if("undefined"!=
typeof pt2.yieldFunction)throw Error("Function '"+pt2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'erase'. Perhaps a yield statement is required for '"+pt2.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("InkAnnot.erase",{ink:this.id,pt1:pt1,pt2:pt2,width:width},this.userPriority)};PDFNet.LinkAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("linkAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.LinkAnnot(id)})};PDFNet.LinkAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");
if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+
"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("linkAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.LinkAnnot(id)})};PDFNet.LinkAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("linkAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.LinkAnnot(id)})};PDFNet.LinkAnnot.prototype.removeAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeAction'. Expected 0 arguments. Function Signature: removeAction()");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.removeAction",{link:this.id},this.userPriority)};
PDFNet.LinkAnnot.prototype.getAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAction'. Expected 0 arguments. Function Signature: getAction()");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.getAction",{link:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.LinkAnnot.prototype.setAction=function(action){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAction'. Expected 1 argument. Function Signature: setAction(Action)");
if(action instanceof Promise)throw new TypeError("1st input argument in function 'setAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(action instanceof PDFNet.Action)){if("object"==typeof action)throw new TypeError("1st input argument in function 'setAction' is of type '"+action.name+"'. Expected type 'Action'. Function Signature: setAction(Action).");throw new TypeError("1st input argument '"+action+"' in function 'setAction' is of type '"+typeof action+
"'. Expected type 'Action'. Function Signature: setAction(Action).");}return PDFNet.messageHandler.sendWithPromise("LinkAnnot.setAction",{link:this.id,action:action.id},this.userPriority)};PDFNet.LinkAnnot.prototype.getHighlightingMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHighlightingMode'. Expected 0 arguments. Function Signature: getHighlightingMode()");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.getHighlightingMode",
{link:this.id},this.userPriority)};PDFNet.LinkAnnot.prototype.setHighlightingMode=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHighlightingMode'. Expected 1 argument. Function Signature: setHighlightingMode(number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setHighlightingMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+
value+"' in function 'setHighlightingMode' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: setHighlightingMode(number).");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.setHighlightingMode",{link:this.id,value:value},this.userPriority)};PDFNet.LinkAnnot.prototype.getQuadPointCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadPointCount'. Expected 0 arguments. Function Signature: getQuadPointCount()");
return PDFNet.messageHandler.sendWithPromise("LinkAnnot.getQuadPointCount",{link:this.id},this.userPriority)};PDFNet.LinkAnnot.prototype.getQuadPoint=function(idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadPoint'. Expected 1 argument. Function Signature: getQuadPoint(number)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'getQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'getQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: getQuadPoint(number).");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.getQuadPoint",{link:this.id,idx:idx},this.userPriority)};PDFNet.LinkAnnot.prototype.setQuadPoint=function(idx,qp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuadPoint'. Expected 2 arguments. Function Signature: setQuadPoint(number, QuadPoint)");
if(idx instanceof Promise)throw new TypeError("1st input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'setQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: setQuadPoint(number, QuadPoint).");if(qp instanceof Promise)throw new TypeError("2nd input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(qp instanceof PDFNet.QuadPoint)&&"QuadPoint"!=qp.name){if("object"==typeof qp)throw new TypeError("2nd input argument in function 'setQuadPoint' is of type '"+qp.name+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");throw new TypeError("2nd input argument '"+qp+"' in function 'setQuadPoint' is of type '"+typeof qp+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");}if("undefined"!=typeof qp.yieldFunction)throw Error("Function '"+
qp.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setQuadPoint'. Perhaps a yield statement is required for '"+qp.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("LinkAnnot.setQuadPoint",{link:this.id,idx:idx,qp:qp},this.userPriority)};PDFNet.getNormalizedUrl=function(url){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNormalizedUrl'. Expected 1 argument. Function Signature: getNormalizedUrl(string)");
if(url instanceof Promise)throw new TypeError("1st input argument in function 'getNormalizedUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof url)throw new TypeError("1st input argument '"+url+"' in function 'getNormalizedUrl' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: getNormalizedUrl(string).");return PDFNet.messageHandler.sendWithPromise("getNormalizedUrl",{url:url},this.userPriority)};PDFNet.MarkupAnnot.createFromObj=
function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+
d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("markupAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.MarkupAnnot(id)})};PDFNet.MarkupAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");
throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("markupAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.MarkupAnnot(id)})};PDFNet.MarkupAnnot.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");
return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getTitle",{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setTitle=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTitle'. Expected 1 argument. Function Signature: setTitle(string)");if(title instanceof Promise)throw new TypeError("1st input argument in function 'setTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof title)throw new TypeError("1st input argument '"+title+"' in function 'setTitle' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitle(string).");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setTitle",{markup:this.id,title:title},this.userPriority)};PDFNet.MarkupAnnot.prototype.setTitleUString=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTitleUString'. Expected 1 argument. Function Signature: setTitleUString(string)");
if(title instanceof Promise)throw new TypeError("1st input argument in function 'setTitleUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof title)throw new TypeError("1st input argument '"+title+"' in function 'setTitleUString' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitleUString(string).");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setTitleUString",{markup:this.id,title:title},this.userPriority)};
PDFNet.MarkupAnnot.prototype.getPopup=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPopup'. Expected 0 arguments. Function Signature: getPopup()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getPopup",{markup:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};PDFNet.MarkupAnnot.prototype.setPopup=function(ppup){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPopup'. Expected 1 argument. Function Signature: setPopup(Annot)");
if(ppup instanceof Promise)throw new TypeError("1st input argument in function 'setPopup' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ppup instanceof PDFNet.Annot)){if("object"==typeof ppup)throw new TypeError("1st input argument in function 'setPopup' is of type '"+ppup.name+"'. Expected type 'Annot'. Function Signature: setPopup(Annot).");throw new TypeError("1st input argument '"+ppup+"' in function 'setPopup' is of type '"+typeof ppup+"'. Expected type 'Annot'. Function Signature: setPopup(Annot).");
}return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setPopup",{markup:this.id,ppup:ppup.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.getOpacity=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOpacity'. Expected 0 arguments. Function Signature: getOpacity()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getOpacity",{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setOpacity=function(op){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOpacity'. Expected 1 argument. Function Signature: setOpacity(number)");if(op instanceof Promise)throw new TypeError("1st input argument in function 'setOpacity' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof op)throw new TypeError("1st input argument '"+op+"' in function 'setOpacity' is of type '"+typeof op+"'. Expected type 'number'. Function Signature: setOpacity(number).");
return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setOpacity",{markup:this.id,op:op},this.userPriority)};PDFNet.MarkupAnnot.prototype.getSubject=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSubject'. Expected 0 arguments. Function Signature: getSubject()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getSubject",{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setSubject=function(contents){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSubject'. Expected 1 argument. Function Signature: setSubject(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setSubject' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setSubject' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setSubject(string).");
return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setSubject",{markup:this.id,contents:contents},this.userPriority)};PDFNet.MarkupAnnot.prototype.getCreationDates=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCreationDates'. Expected 0 arguments. Function Signature: getCreationDates()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getCreationDates",{markup:this.id},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Date(id)})};PDFNet.MarkupAnnot.prototype.getBorderEffect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderEffect'. Expected 0 arguments. Function Signature: getBorderEffect()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getBorderEffect",{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setBorderEffect=function(effect){"undefined"===typeof effect&&(effect=PDFNet.MarkupAnnot.BorderEffect.e_None);
if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderEffect'. Expected at most 1 arguments. Function Signature: setBorderEffect(number)");if(effect instanceof Promise)throw new TypeError("1st input argument in function 'setBorderEffect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof effect)throw new TypeError("1st input argument '"+effect+"' in function 'setBorderEffect' is of type '"+typeof effect+
"'. Expected type 'number'. Function Signature: setBorderEffect(number).");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setBorderEffect",{markup:this.id,effect:effect},this.userPriority)};PDFNet.MarkupAnnot.prototype.getBorderEffectIntensity=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderEffectIntensity'. Expected 0 arguments. Function Signature: getBorderEffectIntensity()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getBorderEffectIntensity",
{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setBorderEffectIntensity=function(intensity){"undefined"===typeof intensity&&(intensity=0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderEffectIntensity'. Expected at most 1 arguments. Function Signature: setBorderEffectIntensity(number)");if(intensity instanceof Promise)throw new TypeError("1st input argument in function 'setBorderEffectIntensity' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof intensity)throw new TypeError("1st input argument '"+intensity+"' in function 'setBorderEffectIntensity' is of type '"+typeof intensity+"'. Expected type 'number'. Function Signature: setBorderEffectIntensity(number).");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setBorderEffectIntensity",{markup:this.id,intensity:intensity},this.userPriority)};PDFNet.MarkupAnnot.prototype.setCreationDates=function(dt){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setCreationDates'. Expected 1 argument. Function Signature: setCreationDates(Date)");if(dt instanceof Promise)throw new TypeError("1st input argument in function 'setCreationDates' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dt instanceof PDFNet.Date)&&"Date"!=dt.name){if("object"==typeof dt)throw new TypeError("1st input argument in function 'setCreationDates' is of type '"+dt.name+"'. Expected type 'Date'. Function Signature: setCreationDates(Date).");
throw new TypeError("1st input argument '"+dt+"' in function 'setCreationDates' is of type '"+typeof dt+"'. Expected type 'Date'. Function Signature: setCreationDates(Date).");}if("undefined"!=typeof dt.yieldFunction)throw Error("Function '"+dt.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setCreationDates'. Perhaps a yield statement is required for '"+dt.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setCreationDates",
{markup:this.id,dt:dt},this.userPriority)};PDFNet.MarkupAnnot.prototype.getInteriorColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColor'. Expected 0 arguments. Function Signature: getInteriorColor()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getInteriorColor",{markup:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});
return id})};PDFNet.MarkupAnnot.prototype.getInteriorColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColorCompNum'. Expected 0 arguments. Function Signature: getInteriorColorCompNum()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getInteriorColorCompNum",{markup:this.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setInteriorColorRGB=function(col){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setInteriorColorRGB'. Expected 1 argument. Function Signature: setInteriorColorRGB(ColorPt)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColorRGB' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setInteriorColorRGB' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorRGB(ColorPt).");
throw new TypeError("1st input argument '"+col+"' in function 'setInteriorColorRGB' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorRGB(ColorPt).");}if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColorRGB'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setInteriorColorRGB",
{markup:this.id,col:col.id},this.userPriority)};PDFNet.MarkupAnnot.prototype.setInteriorColor=function(c,compnum){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInteriorColor'. Expected 2 arguments. Function Signature: setInteriorColor(ColorPt, number)");if(c instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(c instanceof
PDFNet.ColorPt)&&"ColorPt"!=c.name){if("object"==typeof c)throw new TypeError("1st input argument in function 'setInteriorColor' is of type '"+c.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");throw new TypeError("1st input argument '"+c+"' in function 'setInteriorColor' is of type '"+typeof c+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");}if(compnum instanceof Promise)throw new TypeError("2nd input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof compnum)throw new TypeError("2nd input argument '"+compnum+"' in function 'setInteriorColor' is of type '"+typeof compnum+"'. Expected type 'number'. Function Signature: setInteriorColor(ColorPt, number).");if("undefined"!=typeof c.yieldFunction)throw Error("Function '"+c.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColor'. Perhaps a yield statement is required for '"+c.yieldFunction+
"'?");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setInteriorColor",{markup:this.id,c:c.id,compnum:compnum},this.userPriority)};PDFNet.MarkupAnnot.prototype.getContentRect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getContentRect'. Expected 0 arguments. Function Signature: getContentRect()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getContentRect",{markup:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Rect(id)})};PDFNet.MarkupAnnot.prototype.setContentRect=function(cr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setContentRect'. Expected 1 argument. Function Signature: setContentRect(Rect)");if(cr instanceof Promise)throw new TypeError("1st input argument in function 'setContentRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cr instanceof PDFNet.Rect)&&"Rect"!=cr.name){if("object"==
typeof cr)throw new TypeError("1st input argument in function 'setContentRect' is of type '"+cr.name+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");throw new TypeError("1st input argument '"+cr+"' in function 'setContentRect' is of type '"+typeof cr+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");}if("undefined"!=typeof cr.yieldFunction)throw Error("Function '"+cr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setContentRect'. Perhaps a yield statement is required for '"+
cr.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setContentRect",{markup:this.id,cr:cr},this.userPriority)};PDFNet.MarkupAnnot.prototype.getPadding=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPadding'. Expected 0 arguments. Function Signature: getPadding()");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.getPadding",{markup:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};
PDFNet.MarkupAnnot.prototype.setPadding=function(rd){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPadding'. Expected 1 argument. Function Signature: setPadding(Rect)");if(rd instanceof Promise)throw new TypeError("1st input argument in function 'setPadding' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(rd instanceof PDFNet.Rect)&&"Rect"!=rd.name){if("object"==typeof rd)throw new TypeError("1st input argument in function 'setPadding' is of type '"+
rd.name+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");throw new TypeError("1st input argument '"+rd+"' in function 'setPadding' is of type '"+typeof rd+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");}if("undefined"!=typeof rd.yieldFunction)throw Error("Function '"+rd.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setPadding'. Perhaps a yield statement is required for '"+
rd.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("MarkupAnnot.setPadding",{markup:this.id,rd:rd},this.userPriority)};PDFNet.MovieAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("movieAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.MovieAnnot(id)})};PDFNet.MovieAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("movieAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.MovieAnnot(id)})};PDFNet.MovieAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("movieAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.MovieAnnot(id)})};PDFNet.MovieAnnot.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");return PDFNet.messageHandler.sendWithPromise("MovieAnnot.getTitle",{movie:this.id},this.userPriority)};PDFNet.MovieAnnot.prototype.setTitle=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setTitle'. Expected 1 argument. Function Signature: setTitle(string)");if(title instanceof Promise)throw new TypeError("1st input argument in function 'setTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof title)throw new TypeError("1st input argument '"+title+"' in function 'setTitle' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitle(string).");return PDFNet.messageHandler.sendWithPromise("MovieAnnot.setTitle",
{movie:this.id,title:title},this.userPriority)};PDFNet.MovieAnnot.prototype.isToBePlayed=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isToBePlayed'. Expected 0 arguments. Function Signature: isToBePlayed()");return PDFNet.messageHandler.sendWithPromise("MovieAnnot.isToBePlayed",{movie:this.id},this.userPriority)};PDFNet.MovieAnnot.prototype.setToBePlayed=function(isplay){"undefined"===typeof isplay&&(isplay=!0);if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setToBePlayed'. Expected at most 1 arguments. Function Signature: setToBePlayed(boolean)");if(isplay instanceof Promise)throw new TypeError("1st input argument in function 'setToBePlayed' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof isplay)throw new TypeError("1st input argument '"+isplay+"' in function 'setToBePlayed' is of type '"+typeof isplay+"'. Expected type 'boolean'. Function Signature: setToBePlayed(boolean).");
return PDFNet.messageHandler.sendWithPromise("MovieAnnot.setToBePlayed",{movie:this.id,isplay:isplay},this.userPriority)};PDFNet.PolyLineAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("polyLineAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.PolyLineAnnot(id)})};PDFNet.PolyLineAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("polyLineAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PolyLineAnnot(id)})};PDFNet.PolyLineAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("polyLineAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PolyLineAnnot(id)})};PDFNet.PolyLineAnnot.prototype.getVertexCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVertexCount'. Expected 0 arguments. Function Signature: getVertexCount()");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.getVertexCount",{polyline:this.id},this.userPriority)};PDFNet.PolyLineAnnot.prototype.getVertex=function(idx){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVertex'. Expected 1 argument. Function Signature: getVertex(number)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'getVertex' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'getVertex' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: getVertex(number).");
return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.getVertex",{polyline:this.id,idx:idx},this.userPriority)};PDFNet.PolyLineAnnot.prototype.setVertex=function(idx,pt){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setVertex'. Expected 2 arguments. Function Signature: setVertex(number, Point)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'setVertex' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'setVertex' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: setVertex(number, Point).");if(pt instanceof Promise)throw new TypeError("2nd input argument in function 'setVertex' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pt instanceof PDFNet.Point)&&"Point"!=pt.name){if("object"==typeof pt)throw new TypeError("2nd input argument in function 'setVertex' is of type '"+
pt.name+"'. Expected type 'Point'. Function Signature: setVertex(number, Point).");throw new TypeError("2nd input argument '"+pt+"' in function 'setVertex' is of type '"+typeof pt+"'. Expected type 'Point'. Function Signature: setVertex(number, Point).");}if("undefined"!=typeof pt.yieldFunction)throw Error("Function '"+pt.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setVertex'. Perhaps a yield statement is required for '"+
pt.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.setVertex",{polyline:this.id,idx:idx,pt:pt},this.userPriority)};PDFNet.PolyLineAnnot.prototype.getStartStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStartStyle'. Expected 0 arguments. Function Signature: getStartStyle()");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.getStartStyle",{polyline:this.id},this.userPriority)};PDFNet.PolyLineAnnot.prototype.setStartStyle=
function(style){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStartStyle'. Expected 1 argument. Function Signature: setStartStyle(number)");if(style instanceof Promise)throw new TypeError("1st input argument in function 'setStartStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof style)throw new TypeError("1st input argument '"+style+"' in function 'setStartStyle' is of type '"+typeof style+
"'. Expected type 'number'. Function Signature: setStartStyle(number).");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.setStartStyle",{polyline:this.id,style:style},this.userPriority)};PDFNet.PolyLineAnnot.prototype.getEndStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEndStyle'. Expected 0 arguments. Function Signature: getEndStyle()");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.getEndStyle",{polyline:this.id},
this.userPriority)};PDFNet.PolyLineAnnot.prototype.setEndStyle=function(style){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEndStyle'. Expected 1 argument. Function Signature: setEndStyle(number)");if(style instanceof Promise)throw new TypeError("1st input argument in function 'setEndStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof style)throw new TypeError("1st input argument '"+style+
"' in function 'setEndStyle' is of type '"+typeof style+"'. Expected type 'number'. Function Signature: setEndStyle(number).");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.setEndStyle",{polyline:this.id,style:style},this.userPriority)};PDFNet.PolyLineAnnot.prototype.getIntentName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIntentName'. Expected 0 arguments. Function Signature: getIntentName()");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.getIntentName",
{polyline:this.id},this.userPriority)};PDFNet.PolyLineAnnot.prototype.setIntentName=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIntentName'. Expected 1 argument. Function Signature: setIntentName(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setIntentName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+
mode+"' in function 'setIntentName' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setIntentName(number).");return PDFNet.messageHandler.sendWithPromise("PolyLineAnnot.setIntentName",{polyline:this.id,mode:mode},this.userPriority)};PDFNet.PolygonAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("polygonAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PolygonAnnot(id)})};PDFNet.PolygonAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("polygonAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.PolygonAnnot(id)})};PDFNet.PolygonAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("polygonAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PolygonAnnot(id)})};PDFNet.PopupAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("popupAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.PopupAnnot(id)})};PDFNet.PopupAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("popupAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PopupAnnot(id)})};PDFNet.PopupAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("popupAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PopupAnnot(id)})};PDFNet.PopupAnnot.prototype.getParent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParent'. Expected 0 arguments. Function Signature: getParent()");return PDFNet.messageHandler.sendWithPromise("PopupAnnot.getParent",{popup:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Annot(id)})};PDFNet.PopupAnnot.prototype.setParent=
function(parent){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setParent'. Expected 1 argument. Function Signature: setParent(Annot)");if(parent instanceof Promise)throw new TypeError("1st input argument in function 'setParent' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(parent instanceof PDFNet.Annot)){if("object"==typeof parent)throw new TypeError("1st input argument in function 'setParent' is of type '"+
parent.name+"'. Expected type 'Annot'. Function Signature: setParent(Annot).");throw new TypeError("1st input argument '"+parent+"' in function 'setParent' is of type '"+typeof parent+"'. Expected type 'Annot'. Function Signature: setParent(Annot).");}return PDFNet.messageHandler.sendWithPromise("PopupAnnot.setParent",{popup:this.id,parent:parent.id},this.userPriority)};PDFNet.PopupAnnot.prototype.isOpen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isOpen'. Expected 0 arguments. Function Signature: isOpen()");
return PDFNet.messageHandler.sendWithPromise("PopupAnnot.isOpen",{popup:this.id},this.userPriority)};PDFNet.PopupAnnot.prototype.setOpen=function(isopen){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOpen'. Expected 1 argument. Function Signature: setOpen(boolean)");if(isopen instanceof Promise)throw new TypeError("1st input argument in function 'setOpen' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=
typeof isopen)throw new TypeError("1st input argument '"+isopen+"' in function 'setOpen' is of type '"+typeof isopen+"'. Expected type 'boolean'. Function Signature: setOpen(boolean).");return PDFNet.messageHandler.sendWithPromise("PopupAnnot.setOpen",{popup:this.id,isopen:isopen},this.userPriority)};PDFNet.RedactionAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("redactionAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RedactionAnnot(id)})};PDFNet.RedactionAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("redactionAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.RedactionAnnot(id)})};PDFNet.RedactionAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("redactionAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RedactionAnnot(id)})};PDFNet.RedactionAnnot.prototype.getQuadPointCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadPointCount'. Expected 0 arguments. Function Signature: getQuadPointCount()");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getQuadPointCount",
{redaction:this.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.getQuadPoint=function(idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadPoint'. Expected 1 argument. Function Signature: getQuadPoint(number)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'getQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+
idx+"' in function 'getQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: getQuadPoint(number).");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getQuadPoint",{redaction:this.id,idx:idx},this.userPriority)};PDFNet.RedactionAnnot.prototype.setQuadPoint=function(idx,qp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuadPoint'. Expected 2 arguments. Function Signature: setQuadPoint(number, QuadPoint)");
if(idx instanceof Promise)throw new TypeError("1st input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'setQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: setQuadPoint(number, QuadPoint).");if(qp instanceof Promise)throw new TypeError("2nd input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(qp instanceof PDFNet.QuadPoint)&&"QuadPoint"!=qp.name){if("object"==typeof qp)throw new TypeError("2nd input argument in function 'setQuadPoint' is of type '"+qp.name+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");throw new TypeError("2nd input argument '"+qp+"' in function 'setQuadPoint' is of type '"+typeof qp+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");}if("undefined"!=typeof qp.yieldFunction)throw Error("Function '"+
qp.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setQuadPoint'. Perhaps a yield statement is required for '"+qp.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setQuadPoint",{redaction:this.id,idx:idx,qp:qp},this.userPriority)};PDFNet.RedactionAnnot.prototype.setAppFormXO=function(formxo){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAppFormXO'. Expected 1 argument. Function Signature: setAppFormXO(Obj)");
if(formxo instanceof Promise)throw new TypeError("1st input argument in function 'setAppFormXO' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(formxo instanceof PDFNet.Obj)){if("object"==typeof formxo)throw new TypeError("1st input argument in function 'setAppFormXO' is of type '"+formxo.name+"'. Expected type 'Obj'. Function Signature: setAppFormXO(Obj).");throw new TypeError("1st input argument '"+formxo+"' in function 'setAppFormXO' is of type '"+typeof formxo+
"'. Expected type 'Obj'. Function Signature: setAppFormXO(Obj).");}return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setAppFormXO",{redaction:this.id,formxo:formxo.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.getOverlayText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOverlayText'. Expected 0 arguments. Function Signature: getOverlayText()");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getOverlayText",
{redaction:this.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.setOverlayText=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOverlayText'. Expected 1 argument. Function Signature: setOverlayText(string)");if(title instanceof Promise)throw new TypeError("1st input argument in function 'setOverlayText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof title)throw new TypeError("1st input argument '"+
title+"' in function 'setOverlayText' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setOverlayText(string).");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setOverlayText",{redaction:this.id,title:title},this.userPriority)};PDFNet.RedactionAnnot.prototype.getUseRepeat=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUseRepeat'. Expected 0 arguments. Function Signature: getUseRepeat()");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getUseRepeat",
{redaction:this.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.setUseRepeat=function(userepeat){"undefined"===typeof userepeat&&(userepeat=!1);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUseRepeat'. Expected at most 1 arguments. Function Signature: setUseRepeat(boolean)");if(userepeat instanceof Promise)throw new TypeError("1st input argument in function 'setUseRepeat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof userepeat)throw new TypeError("1st input argument '"+userepeat+"' in function 'setUseRepeat' is of type '"+typeof userepeat+"'. Expected type 'boolean'. Function Signature: setUseRepeat(boolean).");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setUseRepeat",{redaction:this.id,userepeat:userepeat},this.userPriority)};PDFNet.RedactionAnnot.prototype.getOverlayTextAppearance=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOverlayTextAppearance'. Expected 0 arguments. Function Signature: getOverlayTextAppearance()");
return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getOverlayTextAppearance",{redaction:this.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.setOverlayTextAppearance=function(app){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOverlayTextAppearance'. Expected 1 argument. Function Signature: setOverlayTextAppearance(string)");if(app instanceof Promise)throw new TypeError("1st input argument in function 'setOverlayTextAppearance' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof app)throw new TypeError("1st input argument '"+app+"' in function 'setOverlayTextAppearance' is of type '"+typeof app+"'. Expected type 'string'. Function Signature: setOverlayTextAppearance(string).");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setOverlayTextAppearance",{redaction:this.id,app:app},this.userPriority)};PDFNet.RedactionAnnot.prototype.getQuadForm=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadForm'. Expected 0 arguments. Function Signature: getQuadForm()");
return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getQuadForm",{redaction:this.id},this.userPriority)};PDFNet.RedactionAnnot.prototype.setQuadForm=function(form){"undefined"===typeof form&&(form=PDFNet.RedactionAnnot.QuadForm.e_LeftJustified);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuadForm'. Expected at most 1 arguments. Function Signature: setQuadForm(number)");if(form instanceof Promise)throw new TypeError("1st input argument in function 'setQuadForm' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof form)throw new TypeError("1st input argument '"+form+"' in function 'setQuadForm' is of type '"+typeof form+"'. Expected type 'number'. Function Signature: setQuadForm(number).");return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.setQuadForm",{redaction:this.id,form:form},this.userPriority)};PDFNet.RedactionAnnot.prototype.getAppFormXO=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAppFormXO'. Expected 0 arguments. Function Signature: getAppFormXO()");
return PDFNet.messageHandler.sendWithPromise("RedactionAnnot.getAppFormXO",{redaction:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.RubberStampAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("rubberStampAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.RubberStampAnnot(id)})};PDFNet.RubberStampAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==
typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("rubberStampAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:
new PDFNet.RubberStampAnnot(id)})};PDFNet.RubberStampAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("rubberStampAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.RubberStampAnnot(id)})};PDFNet.RubberStampAnnot.prototype.getIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIcon'. Expected 0 arguments. Function Signature: getIcon()");return PDFNet.messageHandler.sendWithPromise("RubberStampAnnot.getIcon",{stamp:this.id},
this.userPriority)};PDFNet.RubberStampAnnot.prototype.setIcon=function(type){"undefined"===typeof type&&(type=PDFNet.RubberStampAnnot.Icon.e_Draft);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIcon'. Expected at most 1 arguments. Function Signature: setIcon(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'setIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setIcon' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: setIcon(number).");return PDFNet.messageHandler.sendWithPromise("RubberStampAnnot.setIcon",{stamp:this.id,type:type},this.userPriority)};PDFNet.RubberStampAnnot.prototype.setIconDefault=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconDefault'. Expected 0 arguments. Function Signature: setIconDefault()");
return PDFNet.messageHandler.sendWithPromise("RubberStampAnnot.setIconDefault",{stamp:this.id},this.userPriority)};PDFNet.RubberStampAnnot.prototype.getIconName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIconName'. Expected 0 arguments. Function Signature: getIconName()");return PDFNet.messageHandler.sendWithPromise("RubberStampAnnot.getIconName",{stamp:this.id},this.userPriority)};PDFNet.RubberStampAnnot.prototype.setIconName=function(iconstring){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconName'. Expected 1 argument. Function Signature: setIconName(string)");if(iconstring instanceof Promise)throw new TypeError("1st input argument in function 'setIconName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof iconstring)throw new TypeError("1st input argument '"+iconstring+"' in function 'setIconName' is of type '"+typeof iconstring+"'. Expected type 'string'. Function Signature: setIconName(string).");
return PDFNet.messageHandler.sendWithPromise("RubberStampAnnot.setIconName",{stamp:this.id,iconstring:iconstring},this.userPriority)};PDFNet.ScreenAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("screenAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.ScreenAnnot(id)})};PDFNet.ScreenAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("screenAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ScreenAnnot(id)})};PDFNet.ScreenAnnot.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getTitle",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setTitle=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTitle'. Expected 1 argument. Function Signature: setTitle(string)");if(title instanceof Promise)throw new TypeError("1st input argument in function 'setTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof title)throw new TypeError("1st input argument '"+title+"' in function 'setTitle' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitle(string).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setTitle",{s:this.id,title:title},this.userPriority)};PDFNet.ScreenAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+
typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+
pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("screenAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.ScreenAnnot(id)})};PDFNet.ScreenAnnot.prototype.getAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAction'. Expected 0 arguments. Function Signature: getAction()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getAction",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.ScreenAnnot.prototype.setAction=function(action){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setAction'. Expected 1 argument. Function Signature: setAction(Action)");if(action instanceof Promise)throw new TypeError("1st input argument in function 'setAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(action instanceof PDFNet.Action)){if("object"==typeof action)throw new TypeError("1st input argument in function 'setAction' is of type '"+action.name+"'. Expected type 'Action'. Function Signature: setAction(Action).");
throw new TypeError("1st input argument '"+action+"' in function 'setAction' is of type '"+typeof action+"'. Expected type 'Action'. Function Signature: setAction(Action).");}return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setAction",{s:this.id,action:action.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.getBorderColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderColor'. Expected 0 arguments. Function Signature: getBorderColor()");
return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getBorderColor",{s:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ScreenAnnot.prototype.setBorderColor=function(col,numcomp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderColor'. Expected 2 arguments. Function Signature: setBorderColor(ColorPt, number)");if(col instanceof
Promise)throw new TypeError("1st input argument in function 'setBorderColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setBorderColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setBorderColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setBorderColor' is of type '"+
typeof col+"'. Expected type 'ColorPt'. Function Signature: setBorderColor(ColorPt, number).");}if(numcomp instanceof Promise)throw new TypeError("2nd input argument in function 'setBorderColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof numcomp)throw new TypeError("2nd input argument '"+numcomp+"' in function 'setBorderColor' is of type '"+typeof numcomp+"'. Expected type 'number'. Function Signature: setBorderColor(ColorPt, number).");
if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setBorderColor'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setBorderColor",{s:this.id,col:col.id,numcomp:numcomp},this.userPriority)};PDFNet.ScreenAnnot.prototype.getBorderColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getBorderColorCompNum'. Expected 0 arguments. Function Signature: getBorderColorCompNum()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getBorderColorCompNum",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.getBackgroundColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBackgroundColorCompNum'. Expected 0 arguments. Function Signature: getBackgroundColorCompNum()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getBackgroundColorCompNum",
{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.getBackgroundColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBackgroundColor'. Expected 0 arguments. Function Signature: getBackgroundColor()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getBackgroundColor",{s:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};
PDFNet.ScreenAnnot.prototype.setBackgroundColor=function(col,numcomp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBackgroundColor'. Expected 2 arguments. Function Signature: setBackgroundColor(ColorPt, number)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setBackgroundColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==
typeof col)throw new TypeError("1st input argument in function 'setBackgroundColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setBackgroundColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setBackgroundColor' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setBackgroundColor(ColorPt, number).");}if(numcomp instanceof Promise)throw new TypeError("2nd input argument in function 'setBackgroundColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof numcomp)throw new TypeError("2nd input argument '"+numcomp+"' in function 'setBackgroundColor' is of type '"+typeof numcomp+"'. Expected type 'number'. Function Signature: setBackgroundColor(ColorPt, number).");if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setBackgroundColor'. Perhaps a yield statement is required for '"+
col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setBackgroundColor",{s:this.id,col:col.id,numcomp:numcomp},this.userPriority)};PDFNet.ScreenAnnot.prototype.getStaticCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStaticCaptionText'. Expected 0 arguments. Function Signature: getStaticCaptionText()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getStaticCaptionText",{s:this.id},this.userPriority)};
PDFNet.ScreenAnnot.prototype.setStaticCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStaticCaptionText'. Expected 1 argument. Function Signature: setStaticCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setStaticCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof contents)throw new TypeError("1st input argument '"+
contents+"' in function 'setStaticCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setStaticCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setStaticCaptionText",{s:this.id,contents:contents},this.userPriority)};PDFNet.ScreenAnnot.prototype.getRolloverCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRolloverCaptionText'. Expected 0 arguments. Function Signature: getRolloverCaptionText()");
return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getRolloverCaptionText",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setRolloverCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRolloverCaptionText'. Expected 1 argument. Function Signature: setRolloverCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setRolloverCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setRolloverCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setRolloverCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setRolloverCaptionText",{s:this.id,contents:contents},this.userPriority)};PDFNet.ScreenAnnot.prototype.getMouseDownCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMouseDownCaptionText'. Expected 0 arguments. Function Signature: getMouseDownCaptionText()");
return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getMouseDownCaptionText",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setMouseDownCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMouseDownCaptionText'. Expected 1 argument. Function Signature: setMouseDownCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setMouseDownCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setMouseDownCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setMouseDownCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setMouseDownCaptionText",{s:this.id,contents:contents},this.userPriority)};PDFNet.ScreenAnnot.prototype.getStaticIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStaticIcon'. Expected 0 arguments. Function Signature: getStaticIcon()");
return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getStaticIcon",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ScreenAnnot.prototype.setStaticIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStaticIcon'. Expected 1 argument. Function Signature: setStaticIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setStaticIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setStaticIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setStaticIcon(Obj).");throw new TypeError("1st input argument '"+icon+"' in function 'setStaticIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setStaticIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setStaticIcon",{s:this.id,icon:icon.id},this.userPriority)};
PDFNet.ScreenAnnot.prototype.getRolloverIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRolloverIcon'. Expected 0 arguments. Function Signature: getRolloverIcon()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getRolloverIcon",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ScreenAnnot.prototype.setRolloverIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setRolloverIcon'. Expected 1 argument. Function Signature: setRolloverIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setRolloverIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setRolloverIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setRolloverIcon(Obj).");
throw new TypeError("1st input argument '"+icon+"' in function 'setRolloverIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setRolloverIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setRolloverIcon",{s:this.id,icon:icon.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.getMouseDownIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMouseDownIcon'. Expected 0 arguments. Function Signature: getMouseDownIcon()");
return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getMouseDownIcon",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ScreenAnnot.prototype.setMouseDownIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMouseDownIcon'. Expected 1 argument. Function Signature: setMouseDownIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setMouseDownIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setMouseDownIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setMouseDownIcon(Obj).");throw new TypeError("1st input argument '"+icon+"' in function 'setMouseDownIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setMouseDownIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setMouseDownIcon",{s:this.id,icon:icon.id},
this.userPriority)};PDFNet.ScreenAnnot.prototype.getScaleType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getScaleType'. Expected 0 arguments. Function Signature: getScaleType()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getScaleType",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setScaleType=function(st){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setScaleType'. Expected 1 argument. Function Signature: setScaleType(number)");
if(st instanceof Promise)throw new TypeError("1st input argument in function 'setScaleType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof st)throw new TypeError("1st input argument '"+st+"' in function 'setScaleType' is of type '"+typeof st+"'. Expected type 'number'. Function Signature: setScaleType(number).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setScaleType",{s:this.id,st:st},this.userPriority)};PDFNet.ScreenAnnot.prototype.getIconCaptionRelation=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIconCaptionRelation'. Expected 0 arguments. Function Signature: getIconCaptionRelation()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getIconCaptionRelation",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setIconCaptionRelation=function(icr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconCaptionRelation'. Expected 1 argument. Function Signature: setIconCaptionRelation(number)");
if(icr instanceof Promise)throw new TypeError("1st input argument in function 'setIconCaptionRelation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof icr)throw new TypeError("1st input argument '"+icr+"' in function 'setIconCaptionRelation' is of type '"+typeof icr+"'. Expected type 'number'. Function Signature: setIconCaptionRelation(number).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setIconCaptionRelation",{s:this.id,icr:icr},
this.userPriority)};PDFNet.ScreenAnnot.prototype.getScaleCondition=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getScaleCondition'. Expected 0 arguments. Function Signature: getScaleCondition()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getScaleCondition",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setScaleCondition=function(sc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setScaleCondition'. Expected 1 argument. Function Signature: setScaleCondition(number)");
if(sc instanceof Promise)throw new TypeError("1st input argument in function 'setScaleCondition' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof sc)throw new TypeError("1st input argument '"+sc+"' in function 'setScaleCondition' is of type '"+typeof sc+"'. Expected type 'number'. Function Signature: setScaleCondition(number).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setScaleCondition",{s:this.id,sc:sc},this.userPriority)};PDFNet.ScreenAnnot.prototype.getFitFull=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFitFull'. Expected 0 arguments. Function Signature: getFitFull()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getFitFull",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setFitFull=function(ff){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFitFull'. Expected 1 argument. Function Signature: setFitFull(boolean)");
if(ff instanceof Promise)throw new TypeError("1st input argument in function 'setFitFull' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof ff)throw new TypeError("1st input argument '"+ff+"' in function 'setFitFull' is of type '"+typeof ff+"'. Expected type 'boolean'. Function Signature: setFitFull(boolean).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setFitFull",{s:this.id,ff:ff},this.userPriority)};PDFNet.ScreenAnnot.prototype.getHIconLeftOver=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHIconLeftOver'. Expected 0 arguments. Function Signature: getHIconLeftOver()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getHIconLeftOver",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setHIconLeftOver=function(hl){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHIconLeftOver'. Expected 1 argument. Function Signature: setHIconLeftOver(number)");
if(hl instanceof Promise)throw new TypeError("1st input argument in function 'setHIconLeftOver' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof hl)throw new TypeError("1st input argument '"+hl+"' in function 'setHIconLeftOver' is of type '"+typeof hl+"'. Expected type 'number'. Function Signature: setHIconLeftOver(number).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setHIconLeftOver",{s:this.id,hl:hl},this.userPriority)};PDFNet.ScreenAnnot.prototype.getVIconLeftOver=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVIconLeftOver'. Expected 0 arguments. Function Signature: getVIconLeftOver()");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.getVIconLeftOver",{s:this.id},this.userPriority)};PDFNet.ScreenAnnot.prototype.setVIconLeftOver=function(vl){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setVIconLeftOver'. Expected 1 argument. Function Signature: setVIconLeftOver(number)");
if(vl instanceof Promise)throw new TypeError("1st input argument in function 'setVIconLeftOver' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vl)throw new TypeError("1st input argument '"+vl+"' in function 'setVIconLeftOver' is of type '"+typeof vl+"'. Expected type 'number'. Function Signature: setVIconLeftOver(number).");return PDFNet.messageHandler.sendWithPromise("ScreenAnnot.setVIconLeftOver",{s:this.id,vl:vl},this.userPriority)};PDFNet.SoundAnnot.createFromObj=
function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+
d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("soundAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SoundAnnot(id)})};PDFNet.SoundAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");
throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("soundAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SoundAnnot(id)})};PDFNet.SoundAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+
typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+
pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("soundAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.SoundAnnot(id)})};PDFNet.SoundAnnot.createAtPoint=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createAtPoint'. Expected 2 arguments. Function Signature: createAtPoint(SDFDoc, Point)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createAtPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||
doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createAtPoint' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createAtPoint(SDFDoc, Point).");throw new TypeError("1st input argument '"+doc+"' in function 'createAtPoint' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createAtPoint(SDFDoc, Point).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'createAtPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Point)&&"Point"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'createAtPoint' is of type '"+pos.name+"'. Expected type 'Point'. Function Signature: createAtPoint(SDFDoc, Point).");throw new TypeError("2nd input argument '"+pos+"' in function 'createAtPoint' is of type '"+typeof pos+"'. Expected type 'Point'. Function Signature: createAtPoint(SDFDoc, Point).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'createAtPoint'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("soundAnnotCreateAtPoint",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SoundAnnot(id)})};PDFNet.SoundAnnot.prototype.getSoundStream=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getSoundStream'. Expected 0 arguments. Function Signature: getSoundStream()");return PDFNet.messageHandler.sendWithPromise("SoundAnnot.getSoundStream",{sound:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SoundAnnot.prototype.setSoundStream=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSoundStream'. Expected 1 argument. Function Signature: setSoundStream(Obj)");
if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setSoundStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setSoundStream' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setSoundStream(Obj).");throw new TypeError("1st input argument '"+icon+"' in function 'setSoundStream' is of type '"+typeof icon+
"'. Expected type 'Obj'. Function Signature: setSoundStream(Obj).");}return PDFNet.messageHandler.sendWithPromise("SoundAnnot.setSoundStream",{sound:this.id,icon:icon.id},this.userPriority)};PDFNet.SoundAnnot.prototype.getIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIcon'. Expected 0 arguments. Function Signature: getIcon()");return PDFNet.messageHandler.sendWithPromise("SoundAnnot.getIcon",{sound:this.id},this.userPriority)};PDFNet.SoundAnnot.prototype.setIcon=
function(type){"undefined"===typeof type&&(type=PDFNet.SoundAnnot.Icon.e_Speaker);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIcon'. Expected at most 1 arguments. Function Signature: setIcon(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'setIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setIcon' is of type '"+
typeof type+"'. Expected type 'number'. Function Signature: setIcon(number).");return PDFNet.messageHandler.sendWithPromise("SoundAnnot.setIcon",{sound:this.id,type:type},this.userPriority)};PDFNet.SoundAnnot.prototype.getIconName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIconName'. Expected 0 arguments. Function Signature: getIconName()");return PDFNet.messageHandler.sendWithPromise("SoundAnnot.getIconName",{sound:this.id},this.userPriority)};
PDFNet.SoundAnnot.prototype.setIconName=function(type){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconName'. Expected 1 argument. Function Signature: setIconName(string)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'setIconName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setIconName' is of type '"+
typeof type+"'. Expected type 'string'. Function Signature: setIconName(string).");return PDFNet.messageHandler.sendWithPromise("SoundAnnot.setIconName",{sound:this.id,type:type},this.userPriority)};PDFNet.SquareAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("squareAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.SquareAnnot(id)})};PDFNet.SquareAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("squareAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SquareAnnot(id)})};PDFNet.SquareAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("squareAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SquareAnnot(id)})};PDFNet.SquareAnnot.prototype.getInteriorColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColor'. Expected 0 arguments. Function Signature: getInteriorColor()");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.getInteriorColor",{square:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.SquareAnnot.prototype.getInteriorColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInteriorColorCompNum'. Expected 0 arguments. Function Signature: getInteriorColorCompNum()");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.getInteriorColorCompNum",{square:this.id},this.userPriority)};PDFNet.SquareAnnot.prototype.setInteriorColorDefault=function(col){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInteriorColorDefault'. Expected 1 argument. Function Signature: setInteriorColorDefault(ColorPt)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColorDefault' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setInteriorColorDefault' is of type '"+
col.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorDefault(ColorPt).");throw new TypeError("1st input argument '"+col+"' in function 'setInteriorColorDefault' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setInteriorColorDefault(ColorPt).");}if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColorDefault'. Perhaps a yield statement is required for '"+
col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.setInteriorColorDefault",{square:this.id,col:col.id},this.userPriority)};PDFNet.SquareAnnot.prototype.setInteriorColor=function(col,numcomp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInteriorColor'. Expected 2 arguments. Function Signature: setInteriorColor(ColorPt, number)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setInteriorColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setInteriorColor' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setInteriorColor(ColorPt, number).");}if(numcomp instanceof Promise)throw new TypeError("2nd input argument in function 'setInteriorColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof numcomp)throw new TypeError("2nd input argument '"+numcomp+"' in function 'setInteriorColor' is of type '"+typeof numcomp+"'. Expected type 'number'. Function Signature: setInteriorColor(ColorPt, number).");if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setInteriorColor'. Perhaps a yield statement is required for '"+
col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.setInteriorColor",{square:this.id,col:col.id,numcomp:numcomp},this.userPriority)};PDFNet.SquareAnnot.prototype.getContentRect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getContentRect'. Expected 0 arguments. Function Signature: getContentRect()");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.getContentRect",{square:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Rect(id)})};PDFNet.SquareAnnot.prototype.setContentRect=function(cr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setContentRect'. Expected 1 argument. Function Signature: setContentRect(Rect)");if(cr instanceof Promise)throw new TypeError("1st input argument in function 'setContentRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cr instanceof PDFNet.Rect)&&"Rect"!=cr.name){if("object"==
typeof cr)throw new TypeError("1st input argument in function 'setContentRect' is of type '"+cr.name+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");throw new TypeError("1st input argument '"+cr+"' in function 'setContentRect' is of type '"+typeof cr+"'. Expected type 'Rect'. Function Signature: setContentRect(Rect).");}if("undefined"!=typeof cr.yieldFunction)throw Error("Function '"+cr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setContentRect'. Perhaps a yield statement is required for '"+
cr.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.setContentRect",{square:this.id,cr:cr},this.userPriority)};PDFNet.SquareAnnot.prototype.getPadding=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPadding'. Expected 0 arguments. Function Signature: getPadding()");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.getPadding",{square:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};
PDFNet.SquareAnnot.prototype.setPadding=function(cr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPadding'. Expected 1 argument. Function Signature: setPadding(Rect)");if(cr instanceof Promise)throw new TypeError("1st input argument in function 'setPadding' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cr instanceof PDFNet.Rect)&&"Rect"!=cr.name){if("object"==typeof cr)throw new TypeError("1st input argument in function 'setPadding' is of type '"+
cr.name+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");throw new TypeError("1st input argument '"+cr+"' in function 'setPadding' is of type '"+typeof cr+"'. Expected type 'Rect'. Function Signature: setPadding(Rect).");}if("undefined"!=typeof cr.yieldFunction)throw Error("Function '"+cr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setPadding'. Perhaps a yield statement is required for '"+
cr.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("SquareAnnot.setPadding",{square:this.id,cr:cr},this.userPriority)};PDFNet.SquigglyAnnot.createFromObj=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("squigglyAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.SquigglyAnnot(id)})};PDFNet.SquigglyAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("squigglyAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SquigglyAnnot(id)})};PDFNet.SquigglyAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("squigglyAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SquigglyAnnot(id)})};PDFNet.StrikeOutAnnot.createFromObj=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("strikeOutAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.StrikeOutAnnot(id)})};PDFNet.StrikeOutAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("strikeOutAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.StrikeOutAnnot(id)})};PDFNet.StrikeOutAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("strikeOutAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.StrikeOutAnnot(id)})};PDFNet.TextAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("textAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.TextAnnot(id)})};PDFNet.TextAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("textAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextAnnot(id)})};PDFNet.TextAnnot.createAtPoint=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createAtPoint'. Expected 2 arguments. Function Signature: createAtPoint(SDFDoc, Point)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createAtPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createAtPoint' is of type '"+
doc.name+"'. Expected type 'SDFDoc'. Function Signature: createAtPoint(SDFDoc, Point).");throw new TypeError("1st input argument '"+doc+"' in function 'createAtPoint' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createAtPoint(SDFDoc, Point).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'createAtPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Point)&&"Point"!=pos.name){if("object"==
typeof pos)throw new TypeError("2nd input argument in function 'createAtPoint' is of type '"+pos.name+"'. Expected type 'Point'. Function Signature: createAtPoint(SDFDoc, Point).");throw new TypeError("2nd input argument '"+pos+"' in function 'createAtPoint' is of type '"+typeof pos+"'. Expected type 'Point'. Function Signature: createAtPoint(SDFDoc, Point).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'createAtPoint'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("textAnnotCreateAtPoint",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextAnnot(id)})};PDFNet.TextAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("textAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextAnnot(id)})};PDFNet.TextAnnot.prototype.isOpen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isOpen'. Expected 0 arguments. Function Signature: isOpen()");return PDFNet.messageHandler.sendWithPromise("TextAnnot.isOpen",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.setOpen=
function(isopen){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOpen'. Expected 1 argument. Function Signature: setOpen(boolean)");if(isopen instanceof Promise)throw new TypeError("1st input argument in function 'setOpen' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof isopen)throw new TypeError("1st input argument '"+isopen+"' in function 'setOpen' is of type '"+typeof isopen+"'. Expected type 'boolean'. Function Signature: setOpen(boolean).");
return PDFNet.messageHandler.sendWithPromise("TextAnnot.setOpen",{text:this.id,isopen:isopen},this.userPriority)};PDFNet.TextAnnot.prototype.getIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIcon'. Expected 0 arguments. Function Signature: getIcon()");return PDFNet.messageHandler.sendWithPromise("TextAnnot.getIcon",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.setIcon=function(icon){"undefined"===typeof icon&&(icon=
PDFNet.TextAnnot.Icon.e_Note);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIcon'. Expected at most 1 arguments. Function Signature: setIcon(number)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof icon)throw new TypeError("1st input argument '"+icon+"' in function 'setIcon' is of type '"+typeof icon+"'. Expected type 'number'. Function Signature: setIcon(number).");
return PDFNet.messageHandler.sendWithPromise("TextAnnot.setIcon",{text:this.id,icon:icon},this.userPriority)};PDFNet.TextAnnot.prototype.setIconDefault=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconDefault'. Expected 0 arguments. Function Signature: setIconDefault()");return PDFNet.messageHandler.sendWithPromise("TextAnnot.setIconDefault",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.getIconName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getIconName'. Expected 0 arguments. Function Signature: getIconName()");return PDFNet.messageHandler.sendWithPromise("TextAnnot.getIconName",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.setIconName=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconName'. Expected 1 argument. Function Signature: setIconName(string)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setIconName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof icon)throw new TypeError("1st input argument '"+icon+"' in function 'setIconName' is of type '"+typeof icon+"'. Expected type 'string'. Function Signature: setIconName(string).");return PDFNet.messageHandler.sendWithPromise("TextAnnot.setIconName",{text:this.id,icon:icon},this.userPriority)};PDFNet.TextAnnot.prototype.getState=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getState'. Expected 0 arguments. Function Signature: getState()");
return PDFNet.messageHandler.sendWithPromise("TextAnnot.getState",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.setState=function(state){"undefined"===typeof state&&(state="");if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setState'. Expected at most 1 arguments. Function Signature: setState(string)");if(state instanceof Promise)throw new TypeError("1st input argument in function 'setState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof state)throw new TypeError("1st input argument '"+state+"' in function 'setState' is of type '"+typeof state+"'. Expected type 'string'. Function Signature: setState(string).");return PDFNet.messageHandler.sendWithPromise("TextAnnot.setState",{text:this.id,state:state},this.userPriority)};PDFNet.TextAnnot.prototype.getStateModel=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStateModel'. Expected 0 arguments. Function Signature: getStateModel()");
return PDFNet.messageHandler.sendWithPromise("TextAnnot.getStateModel",{text:this.id},this.userPriority)};PDFNet.TextAnnot.prototype.setStateModel=function(sm){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStateModel'. Expected 1 argument. Function Signature: setStateModel(string)");if(sm instanceof Promise)throw new TypeError("1st input argument in function 'setStateModel' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof sm)throw new TypeError("1st input argument '"+sm+"' in function 'setStateModel' is of type '"+typeof sm+"'. Expected type 'string'. Function Signature: setStateModel(string).");return PDFNet.messageHandler.sendWithPromise("TextAnnot.setStateModel",{text:this.id,sm:sm},this.userPriority)};PDFNet.UnderlineAnnot.createFromObj=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("underlineAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.UnderlineAnnot(id)})};PDFNet.UnderlineAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("underlineAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.UnderlineAnnot(id)})};PDFNet.UnderlineAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+
pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("underlineAnnotCreate",{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.UnderlineAnnot(id)})};PDFNet.WatermarkAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("watermarkAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.WatermarkAnnot(id)})};PDFNet.WatermarkAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+
ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("watermarkAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.WatermarkAnnot(id)})};PDFNet.WatermarkAnnot.create=function(doc,pos){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, Rect)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");
throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("watermarkAnnotCreate",
{doc:doc.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.WatermarkAnnot(id)})};PDFNet.TextMarkupAnnot.createFromObj=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("textMarkupAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.TextMarkupAnnot(id)})};PDFNet.TextMarkupAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ann instanceof PDFNet.Annot)){if("object"==
typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("textMarkupAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==id?null:
new PDFNet.TextMarkupAnnot(id)})};PDFNet.TextMarkupAnnot.prototype.getQuadPointCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuadPointCount'. Expected 0 arguments. Function Signature: getQuadPointCount()");return PDFNet.messageHandler.sendWithPromise("TextMarkupAnnot.getQuadPointCount",{textmarkup:this.id},this.userPriority)};PDFNet.TextMarkupAnnot.prototype.getQuadPoint=function(idx){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getQuadPoint'. Expected 1 argument. Function Signature: getQuadPoint(number)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'getQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+idx+"' in function 'getQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: getQuadPoint(number).");return PDFNet.messageHandler.sendWithPromise("TextMarkupAnnot.getQuadPoint",
{textmarkup:this.id,idx:idx},this.userPriority)};PDFNet.TextMarkupAnnot.prototype.setQuadPoint=function(idx,qp){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuadPoint'. Expected 2 arguments. Function Signature: setQuadPoint(number, QuadPoint)");if(idx instanceof Promise)throw new TypeError("1st input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof idx)throw new TypeError("1st input argument '"+
idx+"' in function 'setQuadPoint' is of type '"+typeof idx+"'. Expected type 'number'. Function Signature: setQuadPoint(number, QuadPoint).");if(qp instanceof Promise)throw new TypeError("2nd input argument in function 'setQuadPoint' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(qp instanceof PDFNet.QuadPoint)&&"QuadPoint"!=qp.name){if("object"==typeof qp)throw new TypeError("2nd input argument in function 'setQuadPoint' is of type '"+qp.name+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");
throw new TypeError("2nd input argument '"+qp+"' in function 'setQuadPoint' is of type '"+typeof qp+"'. Expected type 'QuadPoint'. Function Signature: setQuadPoint(number, QuadPoint).");}if("undefined"!=typeof qp.yieldFunction)throw Error("Function '"+qp.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setQuadPoint'. Perhaps a yield statement is required for '"+qp.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("TextMarkupAnnot.setQuadPoint",
{textmarkup:this.id,idx:idx,qp:qp},this.userPriority)};PDFNet.WidgetAnnot.create=function(doc,pos,field){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 3 arguments. Function Signature: create(SDFDoc, Rect, Field)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||
doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect, Field).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, Rect, Field).");}if(pos instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(pos instanceof PDFNet.Rect)&&"Rect"!=pos.name){if("object"==typeof pos)throw new TypeError("2nd input argument in function 'create' is of type '"+pos.name+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect, Field).");throw new TypeError("2nd input argument '"+pos+"' in function 'create' is of type '"+typeof pos+"'. Expected type 'Rect'. Function Signature: create(SDFDoc, Rect, Field).");}if(field instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(field instanceof PDFNet.Field)&&"Field"!=field.name){if("object"==typeof field)throw new TypeError("3rd input argument in function 'create' is of type '"+field.name+"'. Expected type 'Field'. Function Signature: create(SDFDoc, Rect, Field).");throw new TypeError("3rd input argument '"+field+"' in function 'create' is of type '"+typeof field+"'. Expected type 'Field'. Function Signature: create(SDFDoc, Rect, Field).");}if("undefined"!=typeof pos.yieldFunction)throw Error("Function '"+pos.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'create'. Perhaps a yield statement is required for '"+pos.yieldFunction+"'?");if("undefined"!=typeof field.yieldFunction)throw Error("Function '"+field.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'create'. Perhaps a yield statement is required for '"+field.yieldFunction+"'?");var me=
this;this.yieldFunction="WidgetAnnot.create";return PDFNet.messageHandler.sendWithPromise("widgetAnnotCreate",{doc:doc.id,pos:pos,field:field},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.field,me);return new PDFNet.WidgetAnnot(id.result)})};PDFNet.WidgetAnnot.createFromObj=function(d){"undefined"===typeof d&&(d=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'createFromObj' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
}return PDFNet.messageHandler.sendWithPromise("widgetAnnotCreateFromObj",{d:d.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.WidgetAnnot(id)})};PDFNet.WidgetAnnot.createFromAnnot=function(ann){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromAnnot'. Expected 1 argument. Function Signature: createFromAnnot(Annot)");if(ann instanceof Promise)throw new TypeError("1st input argument in function 'createFromAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ann instanceof PDFNet.Annot)){if("object"==typeof ann)throw new TypeError("1st input argument in function 'createFromAnnot' is of type '"+ann.name+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");throw new TypeError("1st input argument '"+ann+"' in function 'createFromAnnot' is of type '"+typeof ann+"'. Expected type 'Annot'. Function Signature: createFromAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("widgetAnnotCreateFromAnnot",{ann:ann.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.WidgetAnnot(id)})};PDFNet.WidgetAnnot.prototype.getField=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getField'. Expected 0 arguments. Function Signature: getField()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getField",{widget:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Field(id)})};PDFNet.WidgetAnnot.prototype.getHighlightingMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getHighlightingMode'. Expected 0 arguments. Function Signature: getHighlightingMode()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getHighlightingMode",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setHighlightingMode=function(value){"undefined"===typeof value&&(value=PDFNet.WidgetAnnot.HighlightingMode.e_invert);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHighlightingMode'. Expected at most 1 arguments. Function Signature: setHighlightingMode(number)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'setHighlightingMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setHighlightingMode' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: setHighlightingMode(number).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setHighlightingMode",{widget:this.id,value:value},
this.userPriority)};PDFNet.WidgetAnnot.prototype.getAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAction'. Expected 0 arguments. Function Signature: getAction()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getAction",{widget:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.WidgetAnnot.prototype.setAction=function(action){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setAction'. Expected 1 argument. Function Signature: setAction(Action)");if(action instanceof Promise)throw new TypeError("1st input argument in function 'setAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(action instanceof PDFNet.Action)){if("object"==typeof action)throw new TypeError("1st input argument in function 'setAction' is of type '"+action.name+"'. Expected type 'Action'. Function Signature: setAction(Action).");
throw new TypeError("1st input argument '"+action+"' in function 'setAction' is of type '"+typeof action+"'. Expected type 'Action'. Function Signature: setAction(Action).");}return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setAction",{widget:this.id,action:action.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.getBorderColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderColor'. Expected 0 arguments. Function Signature: getBorderColor()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getBorderColor",{widget:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.WidgetAnnot.prototype.setBorderColor=function(col,compnum){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBorderColor'. Expected 2 arguments. Function Signature: setBorderColor(ColorPt, number)");if(col instanceof
Promise)throw new TypeError("1st input argument in function 'setBorderColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setBorderColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setBorderColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setBorderColor' is of type '"+
typeof col+"'. Expected type 'ColorPt'. Function Signature: setBorderColor(ColorPt, number).");}if(compnum instanceof Promise)throw new TypeError("2nd input argument in function 'setBorderColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof compnum)throw new TypeError("2nd input argument '"+compnum+"' in function 'setBorderColor' is of type '"+typeof compnum+"'. Expected type 'number'. Function Signature: setBorderColor(ColorPt, number).");
if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setBorderColor'. Perhaps a yield statement is required for '"+col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setBorderColor",{widget:this.id,col:col.id,compnum:compnum},this.userPriority)};PDFNet.WidgetAnnot.prototype.getBorderColorCompNum=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBorderColorCompNum'. Expected 0 arguments. Function Signature: getBorderColorCompNum()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getBorderColorCompNum",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.getBackgroundColorCompNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBackgroundColorCompNum'. Expected 0 arguments. Function Signature: getBackgroundColorCompNum()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getBackgroundColorCompNum",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.getBackgroundColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBackgroundColor'. Expected 0 arguments. Function Signature: getBackgroundColor()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getBackgroundColor",{widget:this.id},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.WidgetAnnot.prototype.setBackgroundColor=function(col,compnum){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBackgroundColor'. Expected 2 arguments. Function Signature: setBackgroundColor(ColorPt, number)");if(col instanceof Promise)throw new TypeError("1st input argument in function 'setBackgroundColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(col instanceof PDFNet.ColorPt)&&"ColorPt"!=col.name){if("object"==typeof col)throw new TypeError("1st input argument in function 'setBackgroundColor' is of type '"+col.name+"'. Expected type 'ColorPt'. Function Signature: setBackgroundColor(ColorPt, number).");throw new TypeError("1st input argument '"+col+"' in function 'setBackgroundColor' is of type '"+typeof col+"'. Expected type 'ColorPt'. Function Signature: setBackgroundColor(ColorPt, number).");}if(compnum instanceof Promise)throw new TypeError("2nd input argument in function 'setBackgroundColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof compnum)throw new TypeError("2nd input argument '"+compnum+"' in function 'setBackgroundColor' is of type '"+typeof compnum+"'. Expected type 'number'. Function Signature: setBackgroundColor(ColorPt, number).");if("undefined"!=typeof col.yieldFunction)throw Error("Function '"+col.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setBackgroundColor'. Perhaps a yield statement is required for '"+
col.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setBackgroundColor",{widget:this.id,col:col.id,compnum:compnum},this.userPriority)};PDFNet.WidgetAnnot.prototype.getStaticCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStaticCaptionText'. Expected 0 arguments. Function Signature: getStaticCaptionText()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getStaticCaptionText",{widget:this.id},
this.userPriority)};PDFNet.WidgetAnnot.prototype.setStaticCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStaticCaptionText'. Expected 1 argument. Function Signature: setStaticCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setStaticCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof contents)throw new TypeError("1st input argument '"+
contents+"' in function 'setStaticCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setStaticCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setStaticCaptionText",{widget:this.id,contents:contents},this.userPriority)};PDFNet.WidgetAnnot.prototype.getRolloverCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRolloverCaptionText'. Expected 0 arguments. Function Signature: getRolloverCaptionText()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getRolloverCaptionText",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setRolloverCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRolloverCaptionText'. Expected 1 argument. Function Signature: setRolloverCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setRolloverCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setRolloverCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setRolloverCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setRolloverCaptionText",{widget:this.id,contents:contents},this.userPriority)};PDFNet.WidgetAnnot.prototype.getMouseDownCaptionText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMouseDownCaptionText'. Expected 0 arguments. Function Signature: getMouseDownCaptionText()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getMouseDownCaptionText",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setMouseDownCaptionText=function(contents){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMouseDownCaptionText'. Expected 1 argument. Function Signature: setMouseDownCaptionText(string)");if(contents instanceof Promise)throw new TypeError("1st input argument in function 'setMouseDownCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof contents)throw new TypeError("1st input argument '"+contents+"' in function 'setMouseDownCaptionText' is of type '"+typeof contents+"'. Expected type 'string'. Function Signature: setMouseDownCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setMouseDownCaptionText",{widget:this.id,contents:contents},this.userPriority)};PDFNet.WidgetAnnot.prototype.getStaticIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStaticIcon'. Expected 0 arguments. Function Signature: getStaticIcon()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getStaticIcon",{widget:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.WidgetAnnot.prototype.setStaticIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStaticIcon'. Expected 1 argument. Function Signature: setStaticIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setStaticIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setStaticIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setStaticIcon(Obj).");throw new TypeError("1st input argument '"+icon+"' in function 'setStaticIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setStaticIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setStaticIcon",{widget:this.id,icon:icon.id},this.userPriority)};
PDFNet.WidgetAnnot.prototype.getRolloverIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRolloverIcon'. Expected 0 arguments. Function Signature: getRolloverIcon()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getRolloverIcon",{widget:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.WidgetAnnot.prototype.setRolloverIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setRolloverIcon'. Expected 1 argument. Function Signature: setRolloverIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setRolloverIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setRolloverIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setRolloverIcon(Obj).");
throw new TypeError("1st input argument '"+icon+"' in function 'setRolloverIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setRolloverIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setRolloverIcon",{widget:this.id,icon:icon.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.getMouseDownIcon=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMouseDownIcon'. Expected 0 arguments. Function Signature: getMouseDownIcon()");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getMouseDownIcon",{widget:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.WidgetAnnot.prototype.setMouseDownIcon=function(icon){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMouseDownIcon'. Expected 1 argument. Function Signature: setMouseDownIcon(Obj)");if(icon instanceof Promise)throw new TypeError("1st input argument in function 'setMouseDownIcon' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(icon instanceof PDFNet.Obj)){if("object"==typeof icon)throw new TypeError("1st input argument in function 'setMouseDownIcon' is of type '"+icon.name+"'. Expected type 'Obj'. Function Signature: setMouseDownIcon(Obj).");throw new TypeError("1st input argument '"+icon+"' in function 'setMouseDownIcon' is of type '"+typeof icon+"'. Expected type 'Obj'. Function Signature: setMouseDownIcon(Obj).");}return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setMouseDownIcon",{widget:this.id,icon:icon.id},
this.userPriority)};PDFNet.WidgetAnnot.prototype.getScaleType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getScaleType'. Expected 0 arguments. Function Signature: getScaleType()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getScaleType",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setScaleType=function(st){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setScaleType'. Expected 1 argument. Function Signature: setScaleType(number)");
if(st instanceof Promise)throw new TypeError("1st input argument in function 'setScaleType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof st)throw new TypeError("1st input argument '"+st+"' in function 'setScaleType' is of type '"+typeof st+"'. Expected type 'number'. Function Signature: setScaleType(number).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setScaleType",{widget:this.id,st:st},this.userPriority)};PDFNet.WidgetAnnot.prototype.getIconCaptionRelation=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIconCaptionRelation'. Expected 0 arguments. Function Signature: getIconCaptionRelation()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getIconCaptionRelation",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setIconCaptionRelation=function(icr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIconCaptionRelation'. Expected 1 argument. Function Signature: setIconCaptionRelation(number)");
if(icr instanceof Promise)throw new TypeError("1st input argument in function 'setIconCaptionRelation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof icr)throw new TypeError("1st input argument '"+icr+"' in function 'setIconCaptionRelation' is of type '"+typeof icr+"'. Expected type 'number'. Function Signature: setIconCaptionRelation(number).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setIconCaptionRelation",{widget:this.id,
icr:icr},this.userPriority)};PDFNet.WidgetAnnot.prototype.getScaleCondition=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getScaleCondition'. Expected 0 arguments. Function Signature: getScaleCondition()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getScaleCondition",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setScaleCondition=function(sd){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setScaleCondition'. Expected 1 argument. Function Signature: setScaleCondition(number)");if(sd instanceof Promise)throw new TypeError("1st input argument in function 'setScaleCondition' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof sd)throw new TypeError("1st input argument '"+sd+"' in function 'setScaleCondition' is of type '"+typeof sd+"'. Expected type 'number'. Function Signature: setScaleCondition(number).");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setScaleCondition",{widget:this.id,sd:sd},this.userPriority)};PDFNet.WidgetAnnot.prototype.getFitFull=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFitFull'. Expected 0 arguments. Function Signature: getFitFull()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getFitFull",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setFitFull=function(ff){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFitFull'. Expected 1 argument. Function Signature: setFitFull(boolean)");if(ff instanceof Promise)throw new TypeError("1st input argument in function 'setFitFull' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof ff)throw new TypeError("1st input argument '"+ff+"' in function 'setFitFull' is of type '"+typeof ff+"'. Expected type 'boolean'. Function Signature: setFitFull(boolean).");
return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setFitFull",{widget:this.id,ff:ff},this.userPriority)};PDFNet.WidgetAnnot.prototype.getHIconLeftOver=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHIconLeftOver'. Expected 0 arguments. Function Signature: getHIconLeftOver()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getHIconLeftOver",{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setHIconLeftOver=
function(hl){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHIconLeftOver'. Expected 1 argument. Function Signature: setHIconLeftOver(number)");if(hl instanceof Promise)throw new TypeError("1st input argument in function 'setHIconLeftOver' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof hl)throw new TypeError("1st input argument '"+hl+"' in function 'setHIconLeftOver' is of type '"+typeof hl+
"'. Expected type 'number'. Function Signature: setHIconLeftOver(number).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setHIconLeftOver",{widget:this.id,hl:hl},this.userPriority)};PDFNet.WidgetAnnot.prototype.getVIconLeftOver=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVIconLeftOver'. Expected 0 arguments. Function Signature: getVIconLeftOver()");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.getVIconLeftOver",
{widget:this.id},this.userPriority)};PDFNet.WidgetAnnot.prototype.setVIconLeftOver=function(vl){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setVIconLeftOver'. Expected 1 argument. Function Signature: setVIconLeftOver(number)");if(vl instanceof Promise)throw new TypeError("1st input argument in function 'setVIconLeftOver' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vl)throw new TypeError("1st input argument '"+
vl+"' in function 'setVIconLeftOver' is of type '"+typeof vl+"'. Expected type 'number'. Function Signature: setVIconLeftOver(number).");return PDFNet.messageHandler.sendWithPromise("WidgetAnnot.setVIconLeftOver",{widget:this.id,vl:vl},this.userPriority)};PDFNet.Bookmark.create=function(in_doc,in_title){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(PDFDoc, string)");if(in_doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_doc instanceof PDFNet.PDFDoc||in_doc instanceof PDFNet.SDFDoc||in_doc instanceof PDFNet.FDFDoc)){if("object"==typeof in_doc)throw new TypeError("1st input argument in function 'create' is of type '"+in_doc.name+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, string).");throw new TypeError("1st input argument '"+in_doc+"' in function 'create' is of type '"+typeof in_doc+"'. Expected type 'PDFDoc'. Function Signature: create(PDFDoc, string).");}if(in_title instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof in_title)throw new TypeError("2nd input argument '"+in_title+"' in function 'create' is of type '"+typeof in_title+"'. Expected type 'string'. Function Signature: create(PDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("bookmarkCreate",{in_doc:in_doc.id,in_title:in_title},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.createFromObj=function(in_bookmark_dict){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(in_bookmark_dict instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_bookmark_dict instanceof PDFNet.Obj)){if("object"==typeof in_bookmark_dict)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+in_bookmark_dict.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");
throw new TypeError("1st input argument '"+in_bookmark_dict+"' in function 'createFromObj' is of type '"+typeof in_bookmark_dict+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("bookmarkCreateFromObj",{in_bookmark_dict:in_bookmark_dict.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");
return PDFNet.messageHandler.sendWithPromise("Bookmark.copy",{in_bookmark:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.compare=function(in_bookmark){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(Bookmark)");if(in_bookmark instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_bookmark instanceof PDFNet.Bookmark)){if("object"==typeof in_bookmark)throw new TypeError("1st input argument in function 'compare' is of type '"+in_bookmark.name+"'. Expected type 'Bookmark'. Function Signature: compare(Bookmark).");throw new TypeError("1st input argument '"+in_bookmark+"' in function 'compare' is of type '"+typeof in_bookmark+"'. Expected type 'Bookmark'. Function Signature: compare(Bookmark).");}return PDFNet.messageHandler.sendWithPromise("Bookmark.compare",{bm:this.id,
in_bookmark:in_bookmark.id},this.userPriority)};PDFNet.Bookmark.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("Bookmark.isValid",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.hasChildren=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasChildren'. Expected 0 arguments. Function Signature: hasChildren()");
return PDFNet.messageHandler.sendWithPromise("Bookmark.hasChildren",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.getNext=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNext'. Expected 0 arguments. Function Signature: getNext()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getNext",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.getPrev=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPrev'. Expected 0 arguments. Function Signature: getPrev()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getPrev",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.getFirstChild=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFirstChild'. Expected 0 arguments. Function Signature: getFirstChild()");
return PDFNet.messageHandler.sendWithPromise("Bookmark.getFirstChild",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.getLastChild=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLastChild'. Expected 0 arguments. Function Signature: getLastChild()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getLastChild",{bm:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.getParent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParent'. Expected 0 arguments. Function Signature: getParent()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getParent",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.find=function(in_title){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'find'. Expected 1 argument. Function Signature: find(string)");if(in_title instanceof Promise)throw new TypeError("1st input argument in function 'find' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof in_title)throw new TypeError("1st input argument '"+in_title+"' in function 'find' is of type '"+typeof in_title+"'. Expected type 'string'. Function Signature: find(string).");return PDFNet.messageHandler.sendWithPromise("Bookmark.find",
{bm:this.id,in_title:in_title},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.addNewChild=function(in_title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addNewChild'. Expected 1 argument. Function Signature: addNewChild(string)");if(in_title instanceof Promise)throw new TypeError("1st input argument in function 'addNewChild' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof in_title)throw new TypeError("1st input argument '"+in_title+"' in function 'addNewChild' is of type '"+typeof in_title+"'. Expected type 'string'. Function Signature: addNewChild(string).");return PDFNet.messageHandler.sendWithPromise("Bookmark.addNewChild",{bm:this.id,in_title:in_title},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.addChild=function(in_bookmark){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'addChild'. Expected 1 argument. Function Signature: addChild(Bookmark)");if(in_bookmark instanceof Promise)throw new TypeError("1st input argument in function 'addChild' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_bookmark instanceof PDFNet.Bookmark)){if("object"==typeof in_bookmark)throw new TypeError("1st input argument in function 'addChild' is of type '"+in_bookmark.name+"'. Expected type 'Bookmark'. Function Signature: addChild(Bookmark).");
throw new TypeError("1st input argument '"+in_bookmark+"' in function 'addChild' is of type '"+typeof in_bookmark+"'. Expected type 'Bookmark'. Function Signature: addChild(Bookmark).");}return PDFNet.messageHandler.sendWithPromise("Bookmark.addChild",{bm:this.id,in_bookmark:in_bookmark.id},this.userPriority)};PDFNet.Bookmark.prototype.addNewNext=function(in_title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addNewNext'. Expected 1 argument. Function Signature: addNewNext(string)");
if(in_title instanceof Promise)throw new TypeError("1st input argument in function 'addNewNext' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof in_title)throw new TypeError("1st input argument '"+in_title+"' in function 'addNewNext' is of type '"+typeof in_title+"'. Expected type 'string'. Function Signature: addNewNext(string).");return PDFNet.messageHandler.sendWithPromise("Bookmark.addNewNext",{bm:this.id,in_title:in_title},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.addNext=function(in_bookmark){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addNext'. Expected 1 argument. Function Signature: addNext(Bookmark)");if(in_bookmark instanceof Promise)throw new TypeError("1st input argument in function 'addNext' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_bookmark instanceof PDFNet.Bookmark)){if("object"==typeof in_bookmark)throw new TypeError("1st input argument in function 'addNext' is of type '"+
in_bookmark.name+"'. Expected type 'Bookmark'. Function Signature: addNext(Bookmark).");throw new TypeError("1st input argument '"+in_bookmark+"' in function 'addNext' is of type '"+typeof in_bookmark+"'. Expected type 'Bookmark'. Function Signature: addNext(Bookmark).");}return PDFNet.messageHandler.sendWithPromise("Bookmark.addNext",{bm:this.id,in_bookmark:in_bookmark.id},this.userPriority)};PDFNet.Bookmark.prototype.addNewPrev=function(in_title){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'addNewPrev'. Expected 1 argument. Function Signature: addNewPrev(string)");if(in_title instanceof Promise)throw new TypeError("1st input argument in function 'addNewPrev' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof in_title)throw new TypeError("1st input argument '"+in_title+"' in function 'addNewPrev' is of type '"+typeof in_title+"'. Expected type 'string'. Function Signature: addNewPrev(string).");return PDFNet.messageHandler.sendWithPromise("Bookmark.addNewPrev",
{bm:this.id,in_title:in_title},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.Bookmark.prototype.addPrev=function(in_bookmark){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addPrev'. Expected 1 argument. Function Signature: addPrev(Bookmark)");if(in_bookmark instanceof Promise)throw new TypeError("1st input argument in function 'addPrev' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_bookmark instanceof PDFNet.Bookmark)){if("object"==typeof in_bookmark)throw new TypeError("1st input argument in function 'addPrev' is of type '"+in_bookmark.name+"'. Expected type 'Bookmark'. Function Signature: addPrev(Bookmark).");throw new TypeError("1st input argument '"+in_bookmark+"' in function 'addPrev' is of type '"+typeof in_bookmark+"'. Expected type 'Bookmark'. Function Signature: addPrev(Bookmark).");}return PDFNet.messageHandler.sendWithPromise("Bookmark.addPrev",{bm:this.id,
in_bookmark:in_bookmark.id},this.userPriority)};PDFNet.Bookmark.prototype.delete=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'delete'. Expected 0 arguments. Function Signature: delete()");return PDFNet.messageHandler.sendWithPromise("Bookmark.delete",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.unlink=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'unlink'. Expected 0 arguments. Function Signature: unlink()");
return PDFNet.messageHandler.sendWithPromise("Bookmark.unlink",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.getIndent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIndent'. Expected 0 arguments. Function Signature: getIndent()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getIndent",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.isOpen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isOpen'. Expected 0 arguments. Function Signature: isOpen()");return PDFNet.messageHandler.sendWithPromise("Bookmark.isOpen",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.setOpen=function(in_open){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOpen'. Expected 1 argument. Function Signature: setOpen(boolean)");if(in_open instanceof Promise)throw new TypeError("1st input argument in function 'setOpen' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof in_open)throw new TypeError("1st input argument '"+in_open+"' in function 'setOpen' is of type '"+typeof in_open+"'. Expected type 'boolean'. Function Signature: setOpen(boolean).");return PDFNet.messageHandler.sendWithPromise("Bookmark.setOpen",{bm:this.id,in_open:in_open},this.userPriority)};PDFNet.Bookmark.prototype.getOpenCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOpenCount'. Expected 0 arguments. Function Signature: getOpenCount()");
return PDFNet.messageHandler.sendWithPromise("Bookmark.getOpenCount",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getTitle",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.getTitleObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTitleObj'. Expected 0 arguments. Function Signature: getTitleObj()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getTitleObj",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Bookmark.prototype.setTitle=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTitle'. Expected 1 argument. Function Signature: setTitle(string)");if(title instanceof
Promise)throw new TypeError("1st input argument in function 'setTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof title)throw new TypeError("1st input argument '"+title+"' in function 'setTitle' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitle(string).");return PDFNet.messageHandler.sendWithPromise("Bookmark.setTitle",{bm:this.id,title:title},this.userPriority)};PDFNet.Bookmark.prototype.getAction=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAction'. Expected 0 arguments. Function Signature: getAction()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getAction",{bm:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.Bookmark.prototype.setAction=function(in_action){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAction'. Expected 1 argument. Function Signature: setAction(Action)");
if(in_action instanceof Promise)throw new TypeError("1st input argument in function 'setAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_action instanceof PDFNet.Action)){if("object"==typeof in_action)throw new TypeError("1st input argument in function 'setAction' is of type '"+in_action.name+"'. Expected type 'Action'. Function Signature: setAction(Action).");throw new TypeError("1st input argument '"+in_action+"' in function 'setAction' is of type '"+
typeof in_action+"'. Expected type 'Action'. Function Signature: setAction(Action).");}return PDFNet.messageHandler.sendWithPromise("Bookmark.setAction",{bm:this.id,in_action:in_action.id},this.userPriority)};PDFNet.Bookmark.prototype.removeAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeAction'. Expected 0 arguments. Function Signature: removeAction()");return PDFNet.messageHandler.sendWithPromise("Bookmark.removeAction",{bm:this.id},
this.userPriority)};PDFNet.Bookmark.prototype.getFlags=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFlags'. Expected 0 arguments. Function Signature: getFlags()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getFlags",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.setFlags=function(in_flags){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFlags'. Expected 1 argument. Function Signature: setFlags(number)");
if(in_flags instanceof Promise)throw new TypeError("1st input argument in function 'setFlags' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof in_flags)throw new TypeError("1st input argument '"+in_flags+"' in function 'setFlags' is of type '"+typeof in_flags+"'. Expected type 'number'. Function Signature: setFlags(number).");return PDFNet.messageHandler.sendWithPromise("Bookmark.setFlags",{bm:this.id,in_flags:in_flags},this.userPriority)};PDFNet.Bookmark.prototype.getColor=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColor'. Expected 0 arguments. Function Signature: getColor()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getColor",{bm:this.id},this.userPriority)};PDFNet.Bookmark.prototype.setColor=function(in_r,in_g,in_b){"undefined"===typeof in_r&&(in_r=0);"undefined"===typeof in_g&&(in_g=0);"undefined"===typeof in_b&&(in_b=0);if(3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColor'. Expected at most 3 arguments. Function Signature: setColor(number, number, number)");
if(in_r instanceof Promise)throw new TypeError("1st input argument in function 'setColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof in_r)throw new TypeError("1st input argument '"+in_r+"' in function 'setColor' is of type '"+typeof in_r+"'. Expected type 'number'. Function Signature: setColor(number, number, number).");if(in_g instanceof Promise)throw new TypeError("2nd input argument in function 'setColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof in_g)throw new TypeError("2nd input argument '"+in_g+"' in function 'setColor' is of type '"+typeof in_g+"'. Expected type 'number'. Function Signature: setColor(number, number, number).");if(in_b instanceof Promise)throw new TypeError("3rd input argument in function 'setColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof in_b)throw new TypeError("3rd input argument '"+in_b+"' in function 'setColor' is of type '"+typeof in_b+
"'. Expected type 'number'. Function Signature: setColor(number, number, number).");return PDFNet.messageHandler.sendWithPromise("Bookmark.setColor",{bm:this.id,in_r:in_r,in_g:in_g,in_b:in_b},this.userPriority)};PDFNet.Bookmark.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Bookmark.getSDFObj",{bm:this.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ColorPt.init=function(x,y,z,w){"undefined"===typeof x&&(x=0);"undefined"===typeof y&&(y=0);"undefined"===typeof z&&(z=0);"undefined"===typeof w&&(w=0);if(4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'init'. Expected at most 4 arguments. Function Signature: init(number, number, number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'init' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'init' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");
if(z instanceof Promise)throw new TypeError("3rd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof z)throw new TypeError("3rd input argument '"+z+"' in function 'init' is of type '"+typeof z+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");if(w instanceof Promise)throw new TypeError("4th input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof w)throw new TypeError("4th input argument '"+w+"' in function 'init' is of type '"+typeof w+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("colorPtInit",{x:x,y:y,z:z,w:w},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorPt.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(ColorPt)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.ColorPt)&&"ColorPt"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'ColorPt'. Function Signature: assign(ColorPt).");
throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'ColorPt'. Function Signature: assign(ColorPt).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+right.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="ColorPt.assign";return PDFNet.messageHandler.sendWithPromise("ColorPt.assign",{left:this.id,right:right.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.ColorPt.prototype.compare=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(ColorPt)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.ColorPt)&&"ColorPt"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'compare' is of type '"+right.name+"'. Expected type 'ColorPt'. Function Signature: compare(ColorPt).");
throw new TypeError("1st input argument '"+right+"' in function 'compare' is of type '"+typeof right+"'. Expected type 'ColorPt'. Function Signature: compare(ColorPt).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'compare'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+
right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'compare'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("ColorPt.compare",{left:this.id,right:right.id},this.userPriority)};PDFNet.ColorPt.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'destroy'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="ColorPt.destroy";for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-
1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("ColorPt.destroy",{auto_dealloc_obj:this.id},this.userPriority).then(function(id){me.yieldFunction=void 0})};PDFNet.ColorPt.prototype.set=function(x,y,z,w){"undefined"===typeof x&&(x=0);"undefined"===typeof y&&(y=0);"undefined"===typeof z&&(z=0);
"undefined"===typeof w&&(w=0);if(4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'set'. Expected at most 4 arguments. Function Signature: set(number, number, number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'set' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");
if(y instanceof Promise)throw new TypeError("2nd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'set' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");if(z instanceof Promise)throw new TypeError("3rd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof z)throw new TypeError("3rd input argument '"+z+"' in function 'set' is of type '"+typeof z+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");if(w instanceof Promise)throw new TypeError("4th input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof w)throw new TypeError("4th input argument '"+w+"' in function 'set' is of type '"+typeof w+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'set'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="ColorPt.set";return PDFNet.messageHandler.sendWithPromise("ColorPt.set",{cp:this.id,x:x,y:y,z:z,w:w},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.cp,me)})};PDFNet.ColorPt.prototype.setByIndex=
function(colorant_index,colorant_value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setByIndex'. Expected 2 arguments. Function Signature: setByIndex(number, number)");if(colorant_index instanceof Promise)throw new TypeError("1st input argument in function 'setByIndex' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof colorant_index)throw new TypeError("1st input argument '"+colorant_index+"' in function 'setByIndex' is of type '"+
typeof colorant_index+"'. Expected type 'number'. Function Signature: setByIndex(number, number).");if(colorant_value instanceof Promise)throw new TypeError("2nd input argument in function 'setByIndex' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof colorant_value)throw new TypeError("2nd input argument '"+colorant_value+"' in function 'setByIndex' is of type '"+typeof colorant_value+"'. Expected type 'number'. Function Signature: setByIndex(number, number).");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setByIndex'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="ColorPt.setByIndex";return PDFNet.messageHandler.sendWithPromise("ColorPt.setByIndex",{cp:this.id,colorant_index:colorant_index,colorant_value:colorant_value},this.userPriority).then(function(id){me.yieldFunction=
void 0;copyFunc(id.cp,me)})};PDFNet.ColorPt.prototype.get=function(colorant_index){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'get'. Expected 1 argument. Function Signature: get(number)");if(colorant_index instanceof Promise)throw new TypeError("1st input argument in function 'get' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof colorant_index)throw new TypeError("1st input argument '"+colorant_index+
"' in function 'get' is of type '"+typeof colorant_index+"'. Expected type 'number'. Function Signature: get(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'get'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("ColorPt.get",{cp:this.id,colorant_index:colorant_index},this.userPriority)};
PDFNet.ColorPt.prototype.setColorantNum=function(num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColorantNum'. Expected 1 argument. Function Signature: setColorantNum(number)");if(num instanceof Promise)throw new TypeError("1st input argument in function 'setColorantNum' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof num)throw new TypeError("1st input argument '"+num+"' in function 'setColorantNum' is of type '"+
typeof num+"'. Expected type 'number'. Function Signature: setColorantNum(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setColorantNum'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="ColorPt.setColorantNum";return PDFNet.messageHandler.sendWithPromise("ColorPt.setColorantNum",{cp:this.id,num:num},
this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.cp,me)})};PDFNet.ColorSpace.createDeviceGray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDeviceGray'. Expected 0 arguments. Function Signature: createDeviceGray()");return PDFNet.messageHandler.sendWithPromise("colorSpaceCreateDeviceGray",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.ColorSpace.createDeviceRGB=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDeviceRGB'. Expected 0 arguments. Function Signature: createDeviceRGB()");return PDFNet.messageHandler.sendWithPromise("colorSpaceCreateDeviceRGB",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.createDeviceCMYK=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDeviceCMYK'. Expected 0 arguments. Function Signature: createDeviceCMYK()");return PDFNet.messageHandler.sendWithPromise("colorSpaceCreateDeviceCMYK",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.createPattern=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createPattern'. Expected 0 arguments. Function Signature: createPattern()");return PDFNet.messageHandler.sendWithPromise("colorSpaceCreatePattern",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.create=function(color_space){"undefined"===typeof color_space&&(color_space=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(color_space instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(color_space instanceof PDFNet.Obj)){if("object"==typeof color_space)throw new TypeError("1st input argument in function 'create' is of type '"+color_space.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");
throw new TypeError("1st input argument '"+color_space+"' in function 'create' is of type '"+typeof color_space+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("colorSpaceCreate",{color_space:color_space.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.createICCFromFilter=function(doc,no_own_filter){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createICCFromFilter'. Expected 2 arguments. Function Signature: createICCFromFilter(SDFDoc, Filter)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createICCFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createICCFromFilter' is of type '"+
doc.name+"'. Expected type 'SDFDoc'. Function Signature: createICCFromFilter(SDFDoc, Filter).");throw new TypeError("1st input argument '"+doc+"' in function 'createICCFromFilter' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createICCFromFilter(SDFDoc, Filter).");}if(no_own_filter instanceof Promise)throw new TypeError("2nd input argument in function 'createICCFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter instanceof
PDFNet.Filter)){if("object"==typeof no_own_filter)throw new TypeError("2nd input argument in function 'createICCFromFilter' is of type '"+no_own_filter.name+"'. Expected type 'Filter'. Function Signature: createICCFromFilter(SDFDoc, Filter).");throw new TypeError("2nd input argument '"+no_own_filter+"' in function 'createICCFromFilter' is of type '"+typeof no_own_filter+"'. Expected type 'Filter'. Function Signature: createICCFromFilter(SDFDoc, Filter).");}var ownedObjIndex=-1;if(0!=no_own_filter.id){for(var i=
createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_filter.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("colorSpaceCreateICCFromFilter",{doc:doc.id,
no_own_filter:no_own_filter.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.createICCFromBuffer=function(doc,buf){buf instanceof Array&&(buf=new Float64Array(buf));if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createICCFromBuffer'. Expected 2 arguments. Function Signature: createICCFromBuffer(SDFDoc, ArrayBuffer)");if(doc instanceof
Promise)throw new TypeError("1st input argument in function 'createICCFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createICCFromBuffer' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createICCFromBuffer(SDFDoc, ArrayBuffer).");throw new TypeError("1st input argument '"+
doc+"' in function 'createICCFromBuffer' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createICCFromBuffer(SDFDoc, ArrayBuffer).");}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createICCFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createICCFromBuffer' is of type '"+buf.name+
"'. Expected type 'ArrayBuffer'. Function Signature: createICCFromBuffer(SDFDoc, ArrayBuffer).");throw new TypeError("2nd input argument '"+buf+"' in function 'createICCFromBuffer' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createICCFromBuffer(SDFDoc, ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("colorSpaceCreateICCFromBuffer",{doc:doc.id,buf:buf.buffer},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.ColorSpace.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(ColorSpace)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.ColorSpace)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+
right.name+"'. Expected type 'ColorSpace'. Function Signature: assign(ColorSpace).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'ColorSpace'. Function Signature: assign(ColorSpace).");}return PDFNet.messageHandler.sendWithPromise("ColorSpace.assign",{left:this.id,right:right.id},this.userPriority)};PDFNet.ColorSpace.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");
for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("ColorSpace.destroy",{auto_dealloc_obj:this.id},this.userPriority)};
PDFNet.ColorSpace.getComponentNumFromObj=function(cs_type,cs_obj){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getComponentNumFromObj'. Expected 2 arguments. Function Signature: getComponentNumFromObj(number, Obj)");if(cs_type instanceof Promise)throw new TypeError("1st input argument in function 'getComponentNumFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof cs_type)throw new TypeError("1st input argument '"+
cs_type+"' in function 'getComponentNumFromObj' is of type '"+typeof cs_type+"'. Expected type 'number'. Function Signature: getComponentNumFromObj(number, Obj).");if(cs_obj instanceof Promise)throw new TypeError("2nd input argument in function 'getComponentNumFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cs_obj instanceof PDFNet.Obj)){if("object"==typeof cs_obj)throw new TypeError("2nd input argument in function 'getComponentNumFromObj' is of type '"+
cs_obj.name+"'. Expected type 'Obj'. Function Signature: getComponentNumFromObj(number, Obj).");throw new TypeError("2nd input argument '"+cs_obj+"' in function 'getComponentNumFromObj' is of type '"+typeof cs_obj+"'. Expected type 'Obj'. Function Signature: getComponentNumFromObj(number, Obj).");}return PDFNet.messageHandler.sendWithPromise("colorSpaceGetComponentNumFromObj",{cs_type:cs_type,cs_obj:cs_obj.id},this.userPriority)};PDFNet.ColorSpace.getTypeFromObj=function(cs_obj){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTypeFromObj'. Expected 1 argument. Function Signature: getTypeFromObj(Obj)");if(cs_obj instanceof Promise)throw new TypeError("1st input argument in function 'getTypeFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cs_obj instanceof PDFNet.Obj)){if("object"==typeof cs_obj)throw new TypeError("1st input argument in function 'getTypeFromObj' is of type '"+cs_obj.name+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");
throw new TypeError("1st input argument '"+cs_obj+"' in function 'getTypeFromObj' is of type '"+typeof cs_obj+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("colorSpaceGetTypeFromObj",{cs_obj:cs_obj.id},this.userPriority)};PDFNet.ColorSpace.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getType",
{cs:this.id},this.userPriority)};PDFNet.ColorSpace.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getSDFObj",{cs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ColorSpace.prototype.getComponentNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getComponentNum'. Expected 0 arguments. Function Signature: getComponentNum()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getComponentNum",{cs:this.id},this.userPriority)};PDFNet.ColorSpace.prototype.initColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initColor'. Expected 0 arguments. Function Signature: initColor()");var me=this;this.yieldFunction="ColorSpace.initColor";return PDFNet.messageHandler.sendWithPromise("ColorSpace.initColor",
{cs:this.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_colorants,me)})};PDFNet.ColorSpace.prototype.initComponentRanges=function(num_comps){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initComponentRanges'. Expected 1 argument. Function Signature: initComponentRanges(number)");if(num_comps instanceof Promise)throw new TypeError("3rd input argument in function 'initComponentRanges' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof num_comps)throw new TypeError("3rd input argument '"+num_comps+"' in function 'initComponentRanges' is of type '"+typeof num_comps+"'. Expected type 'number'. Function Signature: initComponentRanges(number).");return PDFNet.messageHandler.sendWithPromise("ColorSpace.initComponentRanges",{cs:this.id,num_comps:num_comps},this.userPriority)};PDFNet.ColorSpace.prototype.convert2Gray=function(in_color){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'convert2Gray'. Expected 1 argument. Function Signature: convert2Gray(ColorPt)");
if(in_color instanceof Promise)throw new TypeError("1st input argument in function 'convert2Gray' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_color instanceof PDFNet.ColorPt)&&"ColorPt"!=in_color.name){if("object"==typeof in_color)throw new TypeError("1st input argument in function 'convert2Gray' is of type '"+in_color.name+"'. Expected type 'ColorPt'. Function Signature: convert2Gray(ColorPt).");throw new TypeError("1st input argument '"+in_color+"' in function 'convert2Gray' is of type '"+
typeof in_color+"'. Expected type 'ColorPt'. Function Signature: convert2Gray(ColorPt).");}if("undefined"!=typeof in_color.yieldFunction)throw Error("Function '"+in_color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'convert2Gray'. Perhaps a yield statement is required for '"+in_color.yieldFunction+"'?");var me=this;this.yieldFunction="ColorSpace.convert2Gray";return PDFNet.messageHandler.sendWithPromise("ColorSpace.convert2Gray",
{cs:this.id,in_color:in_color.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.ColorSpace.prototype.convert2RGB=function(in_color){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'convert2RGB'. Expected 1 argument. Function Signature: convert2RGB(ColorPt)");if(in_color instanceof Promise)throw new TypeError("1st input argument in function 'convert2RGB' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_color instanceof PDFNet.ColorPt)&&"ColorPt"!=in_color.name){if("object"==typeof in_color)throw new TypeError("1st input argument in function 'convert2RGB' is of type '"+in_color.name+"'. Expected type 'ColorPt'. Function Signature: convert2RGB(ColorPt).");throw new TypeError("1st input argument '"+in_color+"' in function 'convert2RGB' is of type '"+typeof in_color+"'. Expected type 'ColorPt'. Function Signature: convert2RGB(ColorPt).");}if("undefined"!=typeof in_color.yieldFunction)throw Error("Function '"+
in_color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'convert2RGB'. Perhaps a yield statement is required for '"+in_color.yieldFunction+"'?");var me=this;this.yieldFunction="ColorSpace.convert2RGB";return PDFNet.messageHandler.sendWithPromise("ColorSpace.convert2RGB",{cs:this.id,in_color:in_color.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.ColorSpace.prototype.convert2CMYK=
function(in_color){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'convert2CMYK'. Expected 1 argument. Function Signature: convert2CMYK(ColorPt)");if(in_color instanceof Promise)throw new TypeError("1st input argument in function 'convert2CMYK' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_color instanceof PDFNet.ColorPt)&&"ColorPt"!=in_color.name){if("object"==typeof in_color)throw new TypeError("1st input argument in function 'convert2CMYK' is of type '"+
in_color.name+"'. Expected type 'ColorPt'. Function Signature: convert2CMYK(ColorPt).");throw new TypeError("1st input argument '"+in_color+"' in function 'convert2CMYK' is of type '"+typeof in_color+"'. Expected type 'ColorPt'. Function Signature: convert2CMYK(ColorPt).");}if("undefined"!=typeof in_color.yieldFunction)throw Error("Function '"+in_color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'convert2CMYK'. Perhaps a yield statement is required for '"+
in_color.yieldFunction+"'?");var me=this;this.yieldFunction="ColorSpace.convert2CMYK";return PDFNet.messageHandler.sendWithPromise("ColorSpace.convert2CMYK",{cs:this.id,in_color:in_color.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.ColorSpace.prototype.getAlternateColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAlternateColorSpace'. Expected 0 arguments. Function Signature: getAlternateColorSpace()");
return PDFNet.messageHandler.sendWithPromise("ColorSpace.getAlternateColorSpace",{cs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.prototype.getBaseColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBaseColorSpace'. Expected 0 arguments. Function Signature: getBaseColorSpace()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getBaseColorSpace",
{cs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.prototype.getHighVal=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHighVal'. Expected 0 arguments. Function Signature: getHighVal()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getHighVal",{cs:this.id},this.userPriority)};PDFNet.ColorSpace.prototype.getLookupTable=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLookupTable'. Expected 0 arguments. Function Signature: getLookupTable()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getLookupTable",{cs:this.id},this.userPriority)};PDFNet.ColorSpace.prototype.getBaseColor=function(color_idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBaseColor'. Expected 1 argument. Function Signature: getBaseColor(number)");
if(color_idx instanceof Promise)throw new TypeError("1st input argument in function 'getBaseColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof color_idx)throw new TypeError("1st input argument '"+color_idx+"' in function 'getBaseColor' is of type '"+typeof color_idx+"'. Expected type 'number'. Function Signature: getBaseColor(number).");var me=this;this.yieldFunction="ColorSpace.getBaseColor";return PDFNet.messageHandler.sendWithPromise("ColorSpace.getBaseColor",
{cs:this.id,color_idx:color_idx},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.ColorSpace.prototype.getTintFunction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTintFunction'. Expected 0 arguments. Function Signature: getTintFunction()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.getTintFunction",{cs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=
new PDFNet.Function(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ColorSpace.prototype.isAll=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isAll'. Expected 0 arguments. Function Signature: isAll()");return PDFNet.messageHandler.sendWithPromise("ColorSpace.isAll",{cs:this.id},this.userPriority)};PDFNet.ColorSpace.prototype.isNone=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isNone'. Expected 0 arguments. Function Signature: isNone()");
return PDFNet.messageHandler.sendWithPromise("ColorSpace.isNone",{cs:this.id},this.userPriority)};PDFNet.ContentReplacer.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("contentReplacerCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ContentReplacer(id);createdObjects.push({name:id.name,id:id.id});
return id})};PDFNet.ContentReplacer.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("ContentReplacer.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.ContentReplacer.prototype.addImage=function(target_region,replacement_image){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addImage'. Expected 2 arguments. Function Signature: addImage(Rect, Obj)");if(target_region instanceof Promise)throw new TypeError("1st input argument in function 'addImage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(target_region instanceof PDFNet.Rect)&&"Rect"!=target_region.name){if("object"==typeof target_region)throw new TypeError("1st input argument in function 'addImage' is of type '"+target_region.name+"'. Expected type 'Rect'. Function Signature: addImage(Rect, Obj).");throw new TypeError("1st input argument '"+target_region+"' in function 'addImage' is of type '"+typeof target_region+"'. Expected type 'Rect'. Function Signature: addImage(Rect, Obj).");}if(replacement_image instanceof Promise)throw new TypeError("2nd input argument in function 'addImage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(replacement_image instanceof PDFNet.Obj)){if("object"==typeof replacement_image)throw new TypeError("2nd input argument in function 'addImage' is of type '"+replacement_image.name+"'. Expected type 'Obj'. Function Signature: addImage(Rect, Obj).");throw new TypeError("2nd input argument '"+replacement_image+"' in function 'addImage' is of type '"+typeof replacement_image+"'. Expected type 'Obj'. Function Signature: addImage(Rect, Obj).");}if("undefined"!=typeof target_region.yieldFunction)throw Error("Function '"+
target_region.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'addImage'. Perhaps a yield statement is required for '"+target_region.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("ContentReplacer.addImage",{cr:this.id,target_region:target_region,replacement_image:replacement_image.id},this.userPriority)};PDFNet.ContentReplacer.prototype.addText=function(target_region,replacement_text){if(2!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addText'. Expected 2 arguments. Function Signature: addText(Rect, string)");if(target_region instanceof Promise)throw new TypeError("1st input argument in function 'addText' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(target_region instanceof PDFNet.Rect)&&"Rect"!=target_region.name){if("object"==typeof target_region)throw new TypeError("1st input argument in function 'addText' is of type '"+
target_region.name+"'. Expected type 'Rect'. Function Signature: addText(Rect, string).");throw new TypeError("1st input argument '"+target_region+"' in function 'addText' is of type '"+typeof target_region+"'. Expected type 'Rect'. Function Signature: addText(Rect, string).");}if(replacement_text instanceof Promise)throw new TypeError("2nd input argument in function 'addText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof replacement_text)throw new TypeError("2nd input argument '"+
replacement_text+"' in function 'addText' is of type '"+typeof replacement_text+"'. Expected type 'string'. Function Signature: addText(Rect, string).");if("undefined"!=typeof target_region.yieldFunction)throw Error("Function '"+target_region.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'addText'. Perhaps a yield statement is required for '"+target_region.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("ContentReplacer.addText",
{cr:this.id,target_region:target_region,replacement_text:replacement_text},this.userPriority)};PDFNet.ContentReplacer.prototype.addString=function(template_text,replacement_text){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addString'. Expected 2 arguments. Function Signature: addString(string, string)");if(template_text instanceof Promise)throw new TypeError("1st input argument in function 'addString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof template_text)throw new TypeError("1st input argument '"+template_text+"' in function 'addString' is of type '"+typeof template_text+"'. Expected type 'string'. Function Signature: addString(string, string).");if(replacement_text instanceof Promise)throw new TypeError("2nd input argument in function 'addString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof replacement_text)throw new TypeError("2nd input argument '"+replacement_text+
"' in function 'addString' is of type '"+typeof replacement_text+"'. Expected type 'string'. Function Signature: addString(string, string).");return PDFNet.messageHandler.sendWithPromise("ContentReplacer.addString",{cr:this.id,template_text:template_text,replacement_text:replacement_text},this.userPriority)};PDFNet.ContentReplacer.prototype.setMatchStrings=function(start_str,end_str){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMatchStrings'. Expected 2 arguments. Function Signature: setMatchStrings(string, string)");
if(start_str instanceof Promise)throw new TypeError("1st input argument in function 'setMatchStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof start_str)throw new TypeError("1st input argument '"+start_str+"' in function 'setMatchStrings' is of type '"+typeof start_str+"'. Expected type 'string'. Function Signature: setMatchStrings(string, string).");if(end_str instanceof Promise)throw new TypeError("2nd input argument in function 'setMatchStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof end_str)throw new TypeError("2nd input argument '"+end_str+"' in function 'setMatchStrings' is of type '"+typeof end_str+"'. Expected type 'string'. Function Signature: setMatchStrings(string, string).");return PDFNet.messageHandler.sendWithPromise("ContentReplacer.setMatchStrings",{cr:this.id,start_str:start_str,end_str:end_str},this.userPriority)};PDFNet.ContentReplacer.prototype.process=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'process'. Expected 1 argument. Function Signature: process(Page)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'process' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'process' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: process(Page).");throw new TypeError("1st input argument '"+page+"' in function 'process' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: process(Page).");
}return PDFNet.messageHandler.sendWithPromise("ContentReplacer.process",{cr:this.id,page:page.id},this.userPriority)};PDFNet.getFullMessage=function(e){if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFullMessage'. Expected at most 1 arguments. Function Signature: getFullMessage(void*)");return PDFNet.messageHandler.sendWithPromise("getFullMessage",{e:e},this.userPriority)};PDFNet.DocumentConversion.prototype.getDoc=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getDoc'. Expected 0 arguments. Function Signature: getDoc()");return PDFNet.messageHandler.sendWithPromise("DocumentConversion.getDoc",{self:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.DocumentConversion.prototype.isCancelled=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isCancelled'. Expected 0 arguments. Function Signature: isCancelled()");
return PDFNet.messageHandler.sendWithPromise("DocumentConversion.isCancelled",{self:this.id},this.userPriority)};PDFNet.DocumentConversion.prototype.getNumConvertedPages=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumConvertedPages'. Expected 0 arguments. Function Signature: getNumConvertedPages()");return PDFNet.messageHandler.sendWithPromise("DocumentConversion.getNumConvertedPages",{self:this.id},this.userPriority)};PDFNet.Convert.fromXpsMem=
function(in_pdfdoc,buf){buf instanceof Array&&(buf=new Float64Array(buf));if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fromXpsMem'. Expected 2 arguments. Function Signature: fromXpsMem(PDFDoc, ArrayBuffer)");if(in_pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'fromXpsMem' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_pdfdoc instanceof PDFNet.PDFDoc||in_pdfdoc instanceof PDFNet.SDFDoc||
in_pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof in_pdfdoc)throw new TypeError("1st input argument in function 'fromXpsMem' is of type '"+in_pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: fromXpsMem(PDFDoc, ArrayBuffer).");throw new TypeError("1st input argument '"+in_pdfdoc+"' in function 'fromXpsMem' is of type '"+typeof in_pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: fromXpsMem(PDFDoc, ArrayBuffer).");}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'fromXpsMem' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'fromXpsMem' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: fromXpsMem(PDFDoc, ArrayBuffer).");throw new TypeError("2nd input argument '"+buf+"' in function 'fromXpsMem' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: fromXpsMem(PDFDoc, ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("convertFromXpsMem",{in_pdfdoc:in_pdfdoc.id,
buf:buf.buffer},this.userPriority)};PDFNet.ConversionMonitor.prototype.next=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'next'. Expected 0 arguments. Function Signature: next()");return PDFNet.messageHandler.sendWithPromise("ConversionMonitor.next",{conversionMonitor:this.id},this.userPriority)};PDFNet.ConversionMonitor.prototype.ready=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'ready'. Expected 0 arguments. Function Signature: ready()");
return PDFNet.messageHandler.sendWithPromise("ConversionMonitor.ready",{conversionMonitor:this.id},this.userPriority)};PDFNet.ConversionMonitor.prototype.progress=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'progress'. Expected 0 arguments. Function Signature: progress()");return PDFNet.messageHandler.sendWithPromise("ConversionMonitor.progress",{conversionMonitor:this.id},this.userPriority)};PDFNet.ConversionMonitor.prototype.filter=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'filter'. Expected 0 arguments. Function Signature: filter()");return PDFNet.messageHandler.sendWithPromise("ConversionMonitor.filter",{conversionMonitor:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ConversionMonitor.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("ConversionMonitor.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Convert.officeToPdfWithPath=function(in_pdfdoc,in_filename,options){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'officeToPdfWithPath'. Expected 3 arguments. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj)");if(in_pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'officeToPdfWithPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_pdfdoc instanceof PDFNet.PDFDoc||in_pdfdoc instanceof PDFNet.SDFDoc||in_pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof in_pdfdoc)throw new TypeError("1st input argument in function 'officeToPdfWithPath' is of type '"+in_pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj).");throw new TypeError("1st input argument '"+in_pdfdoc+"' in function 'officeToPdfWithPath' is of type '"+typeof in_pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj).");
}if(in_filename instanceof Promise)throw new TypeError("2nd input argument in function 'officeToPdfWithPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof in_filename)throw new TypeError("2nd input argument '"+in_filename+"' in function 'officeToPdfWithPath' is of type '"+typeof in_filename+"'. Expected type 'string'. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj).");if(options instanceof Promise)throw new TypeError("3rd input argument in function 'officeToPdfWithPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(options instanceof PDFNet.Obj)){if("object"==typeof options)throw new TypeError("3rd input argument in function 'officeToPdfWithPath' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj).");throw new TypeError("3rd input argument '"+options+"' in function 'officeToPdfWithPath' is of type '"+typeof options+"'. Expected type 'Obj'. Function Signature: officeToPdfWithPath(PDFDoc, string, Obj).");}return PDFNet.messageHandler.sendWithPromise("convertOfficeToPdfWithPath",
{in_pdfdoc:in_pdfdoc.id,in_filename:in_filename,options:options.id},this.userPriority)};PDFNet.Convert.streamingPdfConversionWithPath=function(in_filename,options){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'streamingPdfConversionWithPath'. Expected 2 arguments. Function Signature: streamingPdfConversionWithPath(string, Obj)");if(in_filename instanceof Promise)throw new TypeError("1st input argument in function 'streamingPdfConversionWithPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof in_filename)throw new TypeError("1st input argument '"+in_filename+"' in function 'streamingPdfConversionWithPath' is of type '"+typeof in_filename+"'. Expected type 'string'. Function Signature: streamingPdfConversionWithPath(string, Obj).");if(options instanceof Promise)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(options instanceof PDFNet.Obj)){if("object"==
typeof options)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithPath' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPath(string, Obj).");throw new TypeError("2nd input argument '"+options+"' in function 'streamingPdfConversionWithPath' is of type '"+typeof options+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPath(string, Obj).");}return PDFNet.messageHandler.sendWithPromise("convertStreamingPdfConversionWithPath",
{in_filename:in_filename,options:options.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.DocumentConversion(id)})};PDFNet.Convert.streamingPdfConversionWithPdfAndPath=function(in_pdfdoc,in_filename,options){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'streamingPdfConversionWithPdfAndPath'. Expected 3 arguments. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj)");if(in_pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'streamingPdfConversionWithPdfAndPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(in_pdfdoc instanceof PDFNet.PDFDoc||in_pdfdoc instanceof PDFNet.SDFDoc||in_pdfdoc instanceof PDFNet.FDFDoc)){if("object"==typeof in_pdfdoc)throw new TypeError("1st input argument in function 'streamingPdfConversionWithPdfAndPath' is of type '"+in_pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj).");throw new TypeError("1st input argument '"+in_pdfdoc+"' in function 'streamingPdfConversionWithPdfAndPath' is of type '"+typeof in_pdfdoc+
"'. Expected type 'PDFDoc'. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj).");}if(in_filename instanceof Promise)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithPdfAndPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof in_filename)throw new TypeError("2nd input argument '"+in_filename+"' in function 'streamingPdfConversionWithPdfAndPath' is of type '"+typeof in_filename+"'. Expected type 'string'. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj).");
if(options instanceof Promise)throw new TypeError("3rd input argument in function 'streamingPdfConversionWithPdfAndPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(options instanceof PDFNet.Obj)){if("object"==typeof options)throw new TypeError("3rd input argument in function 'streamingPdfConversionWithPdfAndPath' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj).");throw new TypeError("3rd input argument '"+
options+"' in function 'streamingPdfConversionWithPdfAndPath' is of type '"+typeof options+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPdfAndPath(PDFDoc, string, Obj).");}return PDFNet.messageHandler.sendWithPromise("convertStreamingPdfConversionWithPdfAndPath",{in_pdfdoc:in_pdfdoc,in_filename:in_filename,options:options.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.DocumentConversion(id)})};PDFNet.Convert.officeToPdfWithFilter=function(in_pdfdoc,
no_own_in_data,options){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'officeToPdfWithFilter'. Expected 3 arguments. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj)");if(in_pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'officeToPdfWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_pdfdoc instanceof PDFNet.PDFDoc||in_pdfdoc instanceof PDFNet.SDFDoc||in_pdfdoc instanceof
PDFNet.FDFDoc)){if("object"==typeof in_pdfdoc)throw new TypeError("1st input argument in function 'officeToPdfWithFilter' is of type '"+in_pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");throw new TypeError("1st input argument '"+in_pdfdoc+"' in function 'officeToPdfWithFilter' is of type '"+typeof in_pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");}if(no_own_in_data instanceof Promise)throw new TypeError("2nd input argument in function 'officeToPdfWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(no_own_in_data instanceof PDFNet.Filter)){if("object"==typeof no_own_in_data)throw new TypeError("2nd input argument in function 'officeToPdfWithFilter' is of type '"+no_own_in_data.name+"'. Expected type 'Filter'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");throw new TypeError("2nd input argument '"+no_own_in_data+"' in function 'officeToPdfWithFilter' is of type '"+typeof no_own_in_data+"'. Expected type 'Filter'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");
}if(options instanceof Promise)throw new TypeError("3rd input argument in function 'officeToPdfWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(options instanceof PDFNet.Obj)){if("object"==typeof options)throw new TypeError("3rd input argument in function 'officeToPdfWithFilter' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");throw new TypeError("3rd input argument '"+options+"' in function 'officeToPdfWithFilter' is of type '"+
typeof options+"'. Expected type 'Obj'. Function Signature: officeToPdfWithFilter(PDFDoc, Filter, Obj).");}var ownedObjIndex=-1;if(0!=no_own_in_data.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_in_data.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("convertOfficeToPdfWithFilter",
{in_pdfdoc:in_pdfdoc.id,no_own_in_data:no_own_in_data.id,options:options.id},this.userPriority)};PDFNet.Convert.streamingPdfConversionWithFilter=function(no_own_in_data,options){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'streamingPdfConversionWithFilter'. Expected 2 arguments. Function Signature: streamingPdfConversionWithFilter(Filter, Obj)");if(no_own_in_data instanceof Promise)throw new TypeError("1st input argument in function 'streamingPdfConversionWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(no_own_in_data instanceof PDFNet.Filter)){if("object"==typeof no_own_in_data)throw new TypeError("1st input argument in function 'streamingPdfConversionWithFilter' is of type '"+no_own_in_data.name+"'. Expected type 'Filter'. Function Signature: streamingPdfConversionWithFilter(Filter, Obj).");throw new TypeError("1st input argument '"+no_own_in_data+"' in function 'streamingPdfConversionWithFilter' is of type '"+typeof no_own_in_data+"'. Expected type 'Filter'. Function Signature: streamingPdfConversionWithFilter(Filter, Obj).");
}if(options instanceof Promise)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(options instanceof PDFNet.Obj)){if("object"==typeof options)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithFilter' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithFilter(Filter, Obj).");throw new TypeError("2nd input argument '"+
options+"' in function 'streamingPdfConversionWithFilter' is of type '"+typeof options+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithFilter(Filter, Obj).");}var ownedObjIndex=-1;if(0!=no_own_in_data.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_in_data.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];
else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("convertStreamingPdfConversionWithFilter",{no_own_in_data:no_own_in_data.id,options:options.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.DocumentConversion(id)})};PDFNet.Convert.streamingPdfConversionWithPdfAndFilter=function(in_pdfdoc,no_own_in_data,options){if(3!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'streamingPdfConversionWithPdfAndFilter'. Expected 3 arguments. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj)");if(in_pdfdoc instanceof Promise)throw new TypeError("1st input argument in function 'streamingPdfConversionWithPdfAndFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(in_pdfdoc instanceof PDFNet.PDFDoc||in_pdfdoc instanceof PDFNet.SDFDoc||in_pdfdoc instanceof PDFNet.FDFDoc)){if("object"==
typeof in_pdfdoc)throw new TypeError("1st input argument in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+in_pdfdoc.name+"'. Expected type 'PDFDoc'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");throw new TypeError("1st input argument '"+in_pdfdoc+"' in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+typeof in_pdfdoc+"'. Expected type 'PDFDoc'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");
}if(no_own_in_data instanceof Promise)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithPdfAndFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_in_data instanceof PDFNet.Filter)){if("object"==typeof no_own_in_data)throw new TypeError("2nd input argument in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+no_own_in_data.name+"'. Expected type 'Filter'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");
throw new TypeError("2nd input argument '"+no_own_in_data+"' in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+typeof no_own_in_data+"'. Expected type 'Filter'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");}if(options instanceof Promise)throw new TypeError("3rd input argument in function 'streamingPdfConversionWithPdfAndFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(options instanceof PDFNet.Obj)){if("object"==
typeof options)throw new TypeError("3rd input argument in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+options.name+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");throw new TypeError("3rd input argument '"+options+"' in function 'streamingPdfConversionWithPdfAndFilter' is of type '"+typeof options+"'. Expected type 'Obj'. Function Signature: streamingPdfConversionWithPdfAndFilter(PDFDoc, Filter, Obj).");}var ownedObjIndex=
-1;if(0!=no_own_in_data.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_in_data.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("convertStreamingPdfConversionWithPdfAndFilter",
{in_pdfdoc:in_pdfdoc,no_own_in_data:no_own_in_data.id,options:options.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.DocumentConversion(id)})};PDFNet.Date.init=function(year,month,day,hour,minute,second){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'init'. Expected 6 arguments. Function Signature: init(number, number, number, number, number, number)");if(year instanceof Promise)throw new TypeError("1st input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof year)throw new TypeError("1st input argument '"+year+"' in function 'init' is of type '"+typeof year+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");if(month instanceof Promise)throw new TypeError("2nd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof month)throw new TypeError("2nd input argument '"+month+"' in function 'init' is of type '"+
typeof month+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");if(day instanceof Promise)throw new TypeError("3rd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof day)throw new TypeError("3rd input argument '"+day+"' in function 'init' is of type '"+typeof day+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");
if(hour instanceof Promise)throw new TypeError("4th input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof hour)throw new TypeError("4th input argument '"+hour+"' in function 'init' is of type '"+typeof hour+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");if(minute instanceof Promise)throw new TypeError("5th input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof minute)throw new TypeError("5th input argument '"+minute+"' in function 'init' is of type '"+typeof minute+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");if(second instanceof Promise)throw new TypeError("6th input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof second)throw new TypeError("6th input argument '"+second+"' in function 'init' is of type '"+
typeof second+"'. Expected type 'number'. Function Signature: init(number, number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("dateInit",{year:year,month:month,day:day,hour:hour,minute:minute,second:second},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Date(id)})};PDFNet.Date.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Date)");
if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.Date)&&"Date"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'Date'. Function Signature: assign(Date).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+
"'. Expected type 'Date'. Function Signature: assign(Date).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+
right.yieldFunction+"'?");var me=this;this.yieldFunction="Date.assign";return PDFNet.messageHandler.sendWithPromise("Date.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.Date.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Date.isValid",{date:this},this.userPriority)};PDFNet.Date.prototype.attach=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'attach'. Expected 1 argument. Function Signature: attach(Obj)");if(d instanceof
Promise)throw new TypeError("1st input argument in function 'attach' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'attach' is of type '"+d.name+"'. Expected type 'Obj'. Function Signature: attach(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'attach' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: attach(Obj).");}if("undefined"!==
typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'attach'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Date.attach";return PDFNet.messageHandler.sendWithPromise("Date.attach",{date:this,d:d.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.date,me)})};PDFNet.Date.prototype.update=function(d){"undefined"===
typeof d&&(d=new PDFNet.Obj("__null"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'update'. Expected at most 1 arguments. Function Signature: update(Obj)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'update' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.Obj)){if("object"==typeof d)throw new TypeError("1st input argument in function 'update' is of type '"+
d.name+"'. Expected type 'Obj'. Function Signature: update(Obj).");throw new TypeError("1st input argument '"+d+"' in function 'update' is of type '"+typeof d+"'. Expected type 'Obj'. Function Signature: update(Obj).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'update'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"Date.update";return PDFNet.messageHandler.sendWithPromise("Date.update",{date:this,d:d.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.date,me);return id.result})};PDFNet.Destination.createXYZ=function(page,left,top,zoom){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createXYZ'. Expected 4 arguments. Function Signature: createXYZ(Page, number, number, number)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createXYZ' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createXYZ' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createXYZ(Page, number, number, number).");throw new TypeError("1st input argument '"+page+"' in function 'createXYZ' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createXYZ(Page, number, number, number).");}if(left instanceof Promise)throw new TypeError("2nd input argument in function 'createXYZ' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof left)throw new TypeError("2nd input argument '"+left+"' in function 'createXYZ' is of type '"+typeof left+"'. Expected type 'number'. Function Signature: createXYZ(Page, number, number, number).");if(top instanceof Promise)throw new TypeError("3rd input argument in function 'createXYZ' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof top)throw new TypeError("3rd input argument '"+top+"' in function 'createXYZ' is of type '"+
typeof top+"'. Expected type 'number'. Function Signature: createXYZ(Page, number, number, number).");if(zoom instanceof Promise)throw new TypeError("4th input argument in function 'createXYZ' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof zoom)throw new TypeError("4th input argument '"+zoom+"' in function 'createXYZ' is of type '"+typeof zoom+"'. Expected type 'number'. Function Signature: createXYZ(Page, number, number, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateXYZ",
{page:page.id,left:left,top:top,zoom:zoom},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFit=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFit'. Expected 1 argument. Function Signature: createFit(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFit' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFit' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFit(Page).");throw new TypeError("1st input argument '"+page+"' in function 'createFit' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFit(Page).");}return PDFNet.messageHandler.sendWithPromise("destinationCreateFit",{page:page.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFitH=function(page,top){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitH'. Expected 2 arguments. Function Signature: createFitH(Page, number)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitH' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitH' is of type '"+
page.name+"'. Expected type 'Page'. Function Signature: createFitH(Page, number).");throw new TypeError("1st input argument '"+page+"' in function 'createFitH' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFitH(Page, number).");}if(top instanceof Promise)throw new TypeError("2nd input argument in function 'createFitH' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof top)throw new TypeError("2nd input argument '"+
top+"' in function 'createFitH' is of type '"+typeof top+"'. Expected type 'number'. Function Signature: createFitH(Page, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateFitH",{page:page.id,top:top},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFitV=function(page,left){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitV'. Expected 2 arguments. Function Signature: createFitV(Page, number)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitV' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitV' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFitV(Page, number).");throw new TypeError("1st input argument '"+page+"' in function 'createFitV' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFitV(Page, number).");
}if(left instanceof Promise)throw new TypeError("2nd input argument in function 'createFitV' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof left)throw new TypeError("2nd input argument '"+left+"' in function 'createFitV' is of type '"+typeof left+"'. Expected type 'number'. Function Signature: createFitV(Page, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateFitV",{page:page.id,left:left},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFitR=function(page,left,bottom,right,top){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitR'. Expected 5 arguments. Function Signature: createFitR(Page, number, number, number, number)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitR' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof
PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitR' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFitR(Page, number, number, number, number).");throw new TypeError("1st input argument '"+page+"' in function 'createFitR' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFitR(Page, number, number, number, number).");}if(left instanceof Promise)throw new TypeError("2nd input argument in function 'createFitR' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof left)throw new TypeError("2nd input argument '"+left+"' in function 'createFitR' is of type '"+typeof left+"'. Expected type 'number'. Function Signature: createFitR(Page, number, number, number, number).");if(bottom instanceof Promise)throw new TypeError("3rd input argument in function 'createFitR' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bottom)throw new TypeError("3rd input argument '"+bottom+"' in function 'createFitR' is of type '"+
typeof bottom+"'. Expected type 'number'. Function Signature: createFitR(Page, number, number, number, number).");if(right instanceof Promise)throw new TypeError("4th input argument in function 'createFitR' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof right)throw new TypeError("4th input argument '"+right+"' in function 'createFitR' is of type '"+typeof right+"'. Expected type 'number'. Function Signature: createFitR(Page, number, number, number, number).");
if(top instanceof Promise)throw new TypeError("5th input argument in function 'createFitR' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof top)throw new TypeError("5th input argument '"+top+"' in function 'createFitR' is of type '"+typeof top+"'. Expected type 'number'. Function Signature: createFitR(Page, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateFitR",{page:page.id,left:left,bottom:bottom,
right:right,top:top},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFitB=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitB'. Expected 1 argument. Function Signature: createFitB(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitB' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof
PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitB' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFitB(Page).");throw new TypeError("1st input argument '"+page+"' in function 'createFitB' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFitB(Page).");}return PDFNet.messageHandler.sendWithPromise("destinationCreateFitB",{page:page.id},this.userPriority).then(function(id){return"0"==id?null:
new PDFNet.Destination(id)})};PDFNet.Destination.createFitBH=function(page,top){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitBH'. Expected 2 arguments. Function Signature: createFitBH(Page, number)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitBH' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitBH' is of type '"+
page.name+"'. Expected type 'Page'. Function Signature: createFitBH(Page, number).");throw new TypeError("1st input argument '"+page+"' in function 'createFitBH' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFitBH(Page, number).");}if(top instanceof Promise)throw new TypeError("2nd input argument in function 'createFitBH' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof top)throw new TypeError("2nd input argument '"+
top+"' in function 'createFitBH' is of type '"+typeof top+"'. Expected type 'number'. Function Signature: createFitBH(Page, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateFitBH",{page:page.id,top:top},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.createFitBV=function(page,left){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFitBV'. Expected 2 arguments. Function Signature: createFitBV(Page, number)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFitBV' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'createFitBV' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFitBV(Page, number).");throw new TypeError("1st input argument '"+page+"' in function 'createFitBV' is of type '"+typeof page+
"'. Expected type 'Page'. Function Signature: createFitBV(Page, number).");}if(left instanceof Promise)throw new TypeError("2nd input argument in function 'createFitBV' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof left)throw new TypeError("2nd input argument '"+left+"' in function 'createFitBV' is of type '"+typeof left+"'. Expected type 'number'. Function Signature: createFitBV(Page, number).");return PDFNet.messageHandler.sendWithPromise("destinationCreateFitBV",
{page:page.id,left:left},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.create=function(dest){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(dest instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest instanceof
PDFNet.Obj)){if("object"==typeof dest)throw new TypeError("1st input argument in function 'create' is of type '"+dest.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+dest+"' in function 'create' is of type '"+typeof dest+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("destinationCreate",{dest:dest.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};
PDFNet.Destination.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("Destination.copy",{d:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Destination(id)})};PDFNet.Destination.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");
return PDFNet.messageHandler.sendWithPromise("Destination.isValid",{dest:this.id},this.userPriority)};PDFNet.Destination.prototype.getFitType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFitType'. Expected 0 arguments. Function Signature: getFitType()");return PDFNet.messageHandler.sendWithPromise("Destination.getFitType",{dest:this.id},this.userPriority)};PDFNet.Destination.prototype.getPage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPage'. Expected 0 arguments. Function Signature: getPage()");return PDFNet.messageHandler.sendWithPromise("Destination.getPage",{dest:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.Destination.prototype.setPage=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPage'. Expected 1 argument. Function Signature: setPage(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'setPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'setPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: setPage(Page).");throw new TypeError("1st input argument '"+page+"' in function 'setPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: setPage(Page).");}return PDFNet.messageHandler.sendWithPromise("Destination.setPage",{dest:this.id,page:page.id},this.userPriority)};PDFNet.Destination.prototype.getSDFObj=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Destination.getSDFObj",{dest:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Destination.prototype.getExplicitDestObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getExplicitDestObj'. Expected 0 arguments. Function Signature: getExplicitDestObj()");
return PDFNet.messageHandler.sendWithPromise("Destination.getExplicitDestObj",{dest:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.getTransform=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTransform'. Expected 0 arguments. Function Signature: getTransform()");return PDFNet.messageHandler.sendWithPromise("GState.getTransform",{gs:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Matrix2D(id)})};PDFNet.GState.prototype.getStrokeColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStrokeColorSpace'. Expected 0 arguments. Function Signature: getStrokeColorSpace()");return PDFNet.messageHandler.sendWithPromise("GState.getStrokeColorSpace",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};
PDFNet.GState.prototype.getFillColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFillColorSpace'. Expected 0 arguments. Function Signature: getFillColorSpace()");return PDFNet.messageHandler.sendWithPromise("GState.getFillColorSpace",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.GState.prototype.getStrokeColor=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStrokeColor'. Expected 0 arguments. Function Signature: getStrokeColor()");return PDFNet.messageHandler.sendWithPromise("GState.getStrokeColor",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.GState.prototype.getStrokePattern=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getStrokePattern'. Expected 0 arguments. Function Signature: getStrokePattern()");return PDFNet.messageHandler.sendWithPromise("GState.getStrokePattern",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PatternColor(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.GState.prototype.getFillColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFillColor'. Expected 0 arguments. Function Signature: getFillColor()");
return PDFNet.messageHandler.sendWithPromise("GState.getFillColor",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.GState.prototype.getFillPattern=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFillPattern'. Expected 0 arguments. Function Signature: getFillPattern()");return PDFNet.messageHandler.sendWithPromise("GState.getFillPattern",
{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PatternColor(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.GState.prototype.getFlatness=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFlatness'. Expected 0 arguments. Function Signature: getFlatness()");return PDFNet.messageHandler.sendWithPromise("GState.getFlatness",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getLineCap=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLineCap'. Expected 0 arguments. Function Signature: getLineCap()");return PDFNet.messageHandler.sendWithPromise("GState.getLineCap",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getLineJoin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLineJoin'. Expected 0 arguments. Function Signature: getLineJoin()");return PDFNet.messageHandler.sendWithPromise("GState.getLineJoin",
{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getLineWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLineWidth'. Expected 0 arguments. Function Signature: getLineWidth()");return PDFNet.messageHandler.sendWithPromise("GState.getLineWidth",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getMiterLimit=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMiterLimit'. Expected 0 arguments. Function Signature: getMiterLimit()");
return PDFNet.messageHandler.sendWithPromise("GState.getMiterLimit",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getPhase=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPhase'. Expected 0 arguments. Function Signature: getPhase()");return PDFNet.messageHandler.sendWithPromise("GState.getPhase",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getCharSpacing=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getCharSpacing'. Expected 0 arguments. Function Signature: getCharSpacing()");return PDFNet.messageHandler.sendWithPromise("GState.getCharSpacing",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getWordSpacing=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWordSpacing'. Expected 0 arguments. Function Signature: getWordSpacing()");return PDFNet.messageHandler.sendWithPromise("GState.getWordSpacing",
{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getHorizontalScale=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHorizontalScale'. Expected 0 arguments. Function Signature: getHorizontalScale()");return PDFNet.messageHandler.sendWithPromise("GState.getHorizontalScale",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getLeading=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLeading'. Expected 0 arguments. Function Signature: getLeading()");
return PDFNet.messageHandler.sendWithPromise("GState.getLeading",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getFont=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFont'. Expected 0 arguments. Function Signature: getFont()");return PDFNet.messageHandler.sendWithPromise("GState.getFont",{gs:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});
return id})};PDFNet.GState.prototype.getFontSize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFontSize'. Expected 0 arguments. Function Signature: getFontSize()");return PDFNet.messageHandler.sendWithPromise("GState.getFontSize",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getTextRenderMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextRenderMode'. Expected 0 arguments. Function Signature: getTextRenderMode()");
return PDFNet.messageHandler.sendWithPromise("GState.getTextRenderMode",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getTextRise=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextRise'. Expected 0 arguments. Function Signature: getTextRise()");return PDFNet.messageHandler.sendWithPromise("GState.getTextRise",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.isTextKnockout=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isTextKnockout'. Expected 0 arguments. Function Signature: isTextKnockout()");return PDFNet.messageHandler.sendWithPromise("GState.isTextKnockout",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getRenderingIntent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRenderingIntent'. Expected 0 arguments. Function Signature: getRenderingIntent()");return PDFNet.messageHandler.sendWithPromise("GState.getRenderingIntent",
{gs:this.id},this.userPriority)};PDFNet.GState.getRenderingIntentType=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRenderingIntentType'. Expected 1 argument. Function Signature: getRenderingIntentType(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'getRenderingIntentType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+
name+"' in function 'getRenderingIntentType' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getRenderingIntentType(string).");return PDFNet.messageHandler.sendWithPromise("gStateGetRenderingIntentType",{name:name},this.userPriority)};PDFNet.GState.prototype.getBlendMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBlendMode'. Expected 0 arguments. Function Signature: getBlendMode()");return PDFNet.messageHandler.sendWithPromise("GState.getBlendMode",
{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getFillOpacity=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFillOpacity'. Expected 0 arguments. Function Signature: getFillOpacity()");return PDFNet.messageHandler.sendWithPromise("GState.getFillOpacity",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getStrokeOpacity=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStrokeOpacity'. Expected 0 arguments. Function Signature: getStrokeOpacity()");
return PDFNet.messageHandler.sendWithPromise("GState.getStrokeOpacity",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getAISFlag=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAISFlag'. Expected 0 arguments. Function Signature: getAISFlag()");return PDFNet.messageHandler.sendWithPromise("GState.getAISFlag",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getSoftMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getSoftMask'. Expected 0 arguments. Function Signature: getSoftMask()");return PDFNet.messageHandler.sendWithPromise("GState.getSoftMask",{gs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.getSoftMaskTransform=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSoftMaskTransform'. Expected 0 arguments. Function Signature: getSoftMaskTransform()");
return PDFNet.messageHandler.sendWithPromise("GState.getSoftMaskTransform",{gs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.GState.prototype.getStrokeOverprint=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStrokeOverprint'. Expected 0 arguments. Function Signature: getStrokeOverprint()");return PDFNet.messageHandler.sendWithPromise("GState.getStrokeOverprint",{gs:this.id},this.userPriority)};
PDFNet.GState.prototype.getFillOverprint=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFillOverprint'. Expected 0 arguments. Function Signature: getFillOverprint()");return PDFNet.messageHandler.sendWithPromise("GState.getFillOverprint",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getOverprintMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOverprintMode'. Expected 0 arguments. Function Signature: getOverprintMode()");
return PDFNet.messageHandler.sendWithPromise("GState.getOverprintMode",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getAutoStrokeAdjust=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAutoStrokeAdjust'. Expected 0 arguments. Function Signature: getAutoStrokeAdjust()");return PDFNet.messageHandler.sendWithPromise("GState.getAutoStrokeAdjust",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getSmoothnessTolerance=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSmoothnessTolerance'. Expected 0 arguments. Function Signature: getSmoothnessTolerance()");return PDFNet.messageHandler.sendWithPromise("GState.getSmoothnessTolerance",{gs:this.id},this.userPriority)};PDFNet.GState.prototype.getTransferFunct=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTransferFunct'. Expected 0 arguments. Function Signature: getTransferFunct()");
return PDFNet.messageHandler.sendWithPromise("GState.getTransferFunct",{gs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.getBlackGenFunct=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBlackGenFunct'. Expected 0 arguments. Function Signature: getBlackGenFunct()");return PDFNet.messageHandler.sendWithPromise("GState.getBlackGenFunct",{gs:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.getUCRFunct=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUCRFunct'. Expected 0 arguments. Function Signature: getUCRFunct()");return PDFNet.messageHandler.sendWithPromise("GState.getUCRFunct",{gs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.getHalftone=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getHalftone'. Expected 0 arguments. Function Signature: getHalftone()");return PDFNet.messageHandler.sendWithPromise("GState.getHalftone",{gs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.GState.prototype.setTransformMatrix=function(mtx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTransformMatrix'. Expected 1 argument. Function Signature: setTransformMatrix(Matrix2D)");
if(mtx instanceof Promise)throw new TypeError("1st input argument in function 'setTransformMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("1st input argument in function 'setTransformMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: setTransformMatrix(Matrix2D).");throw new TypeError("1st input argument '"+mtx+"' in function 'setTransformMatrix' is of type '"+
typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: setTransformMatrix(Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setTransformMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.setTransformMatrix",{gs:this.id,mtx:mtx},this.userPriority)};
PDFNet.GState.prototype.setTransform=function(a,b,c,d,h,v){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTransform'. Expected 6 arguments. Function Signature: setTransform(number, number, number, number, number, number)");if(a instanceof Promise)throw new TypeError("1st input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof a)throw new TypeError("1st input argument '"+
a+"' in function 'setTransform' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("2nd input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'setTransform' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");
if(c instanceof Promise)throw new TypeError("3rd input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'setTransform' is of type '"+typeof c+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");if(d instanceof Promise)throw new TypeError("4th input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'setTransform' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");if(h instanceof Promise)throw new TypeError("5th input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'setTransform' is of type '"+
typeof h+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");if(v instanceof Promise)throw new TypeError("6th input argument in function 'setTransform' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'setTransform' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: setTransform(number, number, number, number, number, number).");
return PDFNet.messageHandler.sendWithPromise("GState.setTransform",{gs:this.id,a:a,b:b,c:c,d:d,h:h,v:v},this.userPriority)};PDFNet.GState.prototype.concatMatrix=function(mtx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'concatMatrix'. Expected 1 argument. Function Signature: concatMatrix(Matrix2D)");if(mtx instanceof Promise)throw new TypeError("1st input argument in function 'concatMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("1st input argument in function 'concatMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: concatMatrix(Matrix2D).");throw new TypeError("1st input argument '"+mtx+"' in function 'concatMatrix' is of type '"+typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: concatMatrix(Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'concatMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.concatMatrix",{gs:this.id,mtx:mtx},this.userPriority)};PDFNet.GState.prototype.concat=function(a,b,c,d,h,v){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'concat'. Expected 6 arguments. Function Signature: concat(number, number, number, number, number, number)");
if(a instanceof Promise)throw new TypeError("1st input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof a)throw new TypeError("1st input argument '"+a+"' in function 'concat' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("2nd input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'concat' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(c instanceof Promise)throw new TypeError("3rd input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'concat' is of type '"+typeof c+
"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(d instanceof Promise)throw new TypeError("4th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'concat' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(h instanceof
Promise)throw new TypeError("5th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'concat' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");if(v instanceof Promise)throw new TypeError("6th input argument in function 'concat' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'concat' is of type '"+typeof v+"'. Expected type 'number'. Function Signature: concat(number, number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("GState.concat",{gs:this.id,a:a,b:b,c:c,d:d,h:h,v:v},this.userPriority)};PDFNet.GState.prototype.setStrokeColorSpace=function(cs){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeColorSpace'. Expected 1 argument. Function Signature: setStrokeColorSpace(ColorSpace)");
if(cs instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeColorSpace' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(cs instanceof PDFNet.ColorSpace)){if("object"==typeof cs)throw new TypeError("1st input argument in function 'setStrokeColorSpace' is of type '"+cs.name+"'. Expected type 'ColorSpace'. Function Signature: setStrokeColorSpace(ColorSpace).");throw new TypeError("1st input argument '"+cs+"' in function 'setStrokeColorSpace' is of type '"+
typeof cs+"'. Expected type 'ColorSpace'. Function Signature: setStrokeColorSpace(ColorSpace).");}return PDFNet.messageHandler.sendWithPromise("GState.setStrokeColorSpace",{gs:this.id,cs:cs.id},this.userPriority)};PDFNet.GState.prototype.setFillColorSpace=function(cs){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillColorSpace'. Expected 1 argument. Function Signature: setFillColorSpace(ColorSpace)");if(cs instanceof Promise)throw new TypeError("1st input argument in function 'setFillColorSpace' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(cs instanceof PDFNet.ColorSpace)){if("object"==typeof cs)throw new TypeError("1st input argument in function 'setFillColorSpace' is of type '"+cs.name+"'. Expected type 'ColorSpace'. Function Signature: setFillColorSpace(ColorSpace).");throw new TypeError("1st input argument '"+cs+"' in function 'setFillColorSpace' is of type '"+typeof cs+"'. Expected type 'ColorSpace'. Function Signature: setFillColorSpace(ColorSpace).");}return PDFNet.messageHandler.sendWithPromise("GState.setFillColorSpace",
{gs:this.id,cs:cs.id},this.userPriority)};PDFNet.GState.prototype.setStrokeColorWithColorPt=function(c){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeColorWithColorPt'. Expected 1 argument. Function Signature: setStrokeColorWithColorPt(ColorPt)");if(c instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeColorWithColorPt' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(c instanceof
PDFNet.ColorPt)&&"ColorPt"!=c.name){if("object"==typeof c)throw new TypeError("1st input argument in function 'setStrokeColorWithColorPt' is of type '"+c.name+"'. Expected type 'ColorPt'. Function Signature: setStrokeColorWithColorPt(ColorPt).");throw new TypeError("1st input argument '"+c+"' in function 'setStrokeColorWithColorPt' is of type '"+typeof c+"'. Expected type 'ColorPt'. Function Signature: setStrokeColorWithColorPt(ColorPt).");}if("undefined"!=typeof c.yieldFunction)throw Error("Function '"+
c.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setStrokeColorWithColorPt'. Perhaps a yield statement is required for '"+c.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.setStrokeColorWithColorPt",{gs:this.id,c:c.id},this.userPriority)};PDFNet.GState.prototype.setStrokeColorWithPattern=function(pattern){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeColorWithPattern'. Expected 1 argument. Function Signature: setStrokeColorWithPattern(PatternColor)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeColorWithPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.PatternColor)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'setStrokeColorWithPattern' is of type '"+pattern.name+"'. Expected type 'PatternColor'. Function Signature: setStrokeColorWithPattern(PatternColor).");throw new TypeError("1st input argument '"+
pattern+"' in function 'setStrokeColorWithPattern' is of type '"+typeof pattern+"'. Expected type 'PatternColor'. Function Signature: setStrokeColorWithPattern(PatternColor).");}return PDFNet.messageHandler.sendWithPromise("GState.setStrokeColorWithPattern",{gs:this.id,pattern:pattern.id},this.userPriority)};PDFNet.GState.prototype.setStrokeColor=function(pattern,c){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeColor'. Expected 2 arguments. Function Signature: setStrokeColor(PatternColor, ColorPt)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.PatternColor)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'setStrokeColor' is of type '"+pattern.name+"'. Expected type 'PatternColor'. Function Signature: setStrokeColor(PatternColor, ColorPt).");throw new TypeError("1st input argument '"+pattern+"' in function 'setStrokeColor' is of type '"+
typeof pattern+"'. Expected type 'PatternColor'. Function Signature: setStrokeColor(PatternColor, ColorPt).");}if(c instanceof Promise)throw new TypeError("2nd input argument in function 'setStrokeColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(c instanceof PDFNet.ColorPt)&&"ColorPt"!=c.name){if("object"==typeof c)throw new TypeError("2nd input argument in function 'setStrokeColor' is of type '"+c.name+"'. Expected type 'ColorPt'. Function Signature: setStrokeColor(PatternColor, ColorPt).");
throw new TypeError("2nd input argument '"+c+"' in function 'setStrokeColor' is of type '"+typeof c+"'. Expected type 'ColorPt'. Function Signature: setStrokeColor(PatternColor, ColorPt).");}if("undefined"!=typeof c.yieldFunction)throw Error("Function '"+c.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setStrokeColor'. Perhaps a yield statement is required for '"+c.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.setStrokeColor",
{gs:this.id,pattern:pattern.id,c:c.id},this.userPriority)};PDFNet.GState.prototype.setFillColorWithColorPt=function(c){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillColorWithColorPt'. Expected 1 argument. Function Signature: setFillColorWithColorPt(ColorPt)");if(c instanceof Promise)throw new TypeError("1st input argument in function 'setFillColorWithColorPt' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(c instanceof PDFNet.ColorPt)&&"ColorPt"!=c.name){if("object"==typeof c)throw new TypeError("1st input argument in function 'setFillColorWithColorPt' is of type '"+c.name+"'. Expected type 'ColorPt'. Function Signature: setFillColorWithColorPt(ColorPt).");throw new TypeError("1st input argument '"+c+"' in function 'setFillColorWithColorPt' is of type '"+typeof c+"'. Expected type 'ColorPt'. Function Signature: setFillColorWithColorPt(ColorPt).");}if("undefined"!=typeof c.yieldFunction)throw Error("Function '"+
c.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setFillColorWithColorPt'. Perhaps a yield statement is required for '"+c.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.setFillColorWithColorPt",{gs:this.id,c:c.id},this.userPriority)};PDFNet.GState.prototype.setFillColorWithPattern=function(pattern){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillColorWithPattern'. Expected 1 argument. Function Signature: setFillColorWithPattern(PatternColor)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'setFillColorWithPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.PatternColor)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'setFillColorWithPattern' is of type '"+pattern.name+"'. Expected type 'PatternColor'. Function Signature: setFillColorWithPattern(PatternColor).");throw new TypeError("1st input argument '"+
pattern+"' in function 'setFillColorWithPattern' is of type '"+typeof pattern+"'. Expected type 'PatternColor'. Function Signature: setFillColorWithPattern(PatternColor).");}return PDFNet.messageHandler.sendWithPromise("GState.setFillColorWithPattern",{gs:this.id,pattern:pattern.id},this.userPriority)};PDFNet.GState.prototype.setFillColor=function(pattern,c){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillColor'. Expected 2 arguments. Function Signature: setFillColor(PatternColor, ColorPt)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'setFillColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.PatternColor)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'setFillColor' is of type '"+pattern.name+"'. Expected type 'PatternColor'. Function Signature: setFillColor(PatternColor, ColorPt).");throw new TypeError("1st input argument '"+pattern+"' in function 'setFillColor' is of type '"+
typeof pattern+"'. Expected type 'PatternColor'. Function Signature: setFillColor(PatternColor, ColorPt).");}if(c instanceof Promise)throw new TypeError("2nd input argument in function 'setFillColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(c instanceof PDFNet.ColorPt)&&"ColorPt"!=c.name){if("object"==typeof c)throw new TypeError("2nd input argument in function 'setFillColor' is of type '"+c.name+"'. Expected type 'ColorPt'. Function Signature: setFillColor(PatternColor, ColorPt).");
throw new TypeError("2nd input argument '"+c+"' in function 'setFillColor' is of type '"+typeof c+"'. Expected type 'ColorPt'. Function Signature: setFillColor(PatternColor, ColorPt).");}if("undefined"!=typeof c.yieldFunction)throw Error("Function '"+c.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setFillColor'. Perhaps a yield statement is required for '"+c.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("GState.setFillColor",
{gs:this.id,pattern:pattern.id,c:c.id},this.userPriority)};PDFNet.GState.prototype.setFlatness=function(flatness){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFlatness'. Expected 1 argument. Function Signature: setFlatness(number)");if(flatness instanceof Promise)throw new TypeError("1st input argument in function 'setFlatness' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flatness)throw new TypeError("1st input argument '"+
flatness+"' in function 'setFlatness' is of type '"+typeof flatness+"'. Expected type 'number'. Function Signature: setFlatness(number).");return PDFNet.messageHandler.sendWithPromise("GState.setFlatness",{gs:this.id,flatness:flatness},this.userPriority)};PDFNet.GState.prototype.setLineCap=function(cap){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLineCap'. Expected 1 argument. Function Signature: setLineCap(number)");if(cap instanceof Promise)throw new TypeError("1st input argument in function 'setLineCap' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof cap)throw new TypeError("1st input argument '"+cap+"' in function 'setLineCap' is of type '"+typeof cap+"'. Expected type 'number'. Function Signature: setLineCap(number).");return PDFNet.messageHandler.sendWithPromise("GState.setLineCap",{gs:this.id,cap:cap},this.userPriority)};PDFNet.GState.prototype.setLineJoin=function(join){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLineJoin'. Expected 1 argument. Function Signature: setLineJoin(number)");
if(join instanceof Promise)throw new TypeError("1st input argument in function 'setLineJoin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof join)throw new TypeError("1st input argument '"+join+"' in function 'setLineJoin' is of type '"+typeof join+"'. Expected type 'number'. Function Signature: setLineJoin(number).");return PDFNet.messageHandler.sendWithPromise("GState.setLineJoin",{gs:this.id,join:join},this.userPriority)};PDFNet.GState.prototype.setLineWidth=
function(width){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLineWidth'. Expected 1 argument. Function Signature: setLineWidth(number)");if(width instanceof Promise)throw new TypeError("1st input argument in function 'setLineWidth' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("1st input argument '"+width+"' in function 'setLineWidth' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: setLineWidth(number).");
return PDFNet.messageHandler.sendWithPromise("GState.setLineWidth",{gs:this.id,width:width},this.userPriority)};PDFNet.GState.prototype.setMiterLimit=function(miter_limit){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMiterLimit'. Expected 1 argument. Function Signature: setMiterLimit(number)");if(miter_limit instanceof Promise)throw new TypeError("1st input argument in function 'setMiterLimit' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof miter_limit)throw new TypeError("1st input argument '"+miter_limit+"' in function 'setMiterLimit' is of type '"+typeof miter_limit+"'. Expected type 'number'. Function Signature: setMiterLimit(number).");return PDFNet.messageHandler.sendWithPromise("GState.setMiterLimit",{gs:this.id,miter_limit:miter_limit},this.userPriority)};PDFNet.GState.prototype.setDashPattern=function(buf_dash_array,phase){buf_dash_array instanceof Array&&(buf_dash_array=new Float64Array(buf_dash_array));
if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDashPattern'. Expected 2 arguments. Function Signature: setDashPattern(ArrayBuffer, number)");if(buf_dash_array instanceof Promise)throw new TypeError("1st input argument in function 'setDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf_dash_array.buffer)){if("object"==typeof buf_dash_array)throw new TypeError("1st input argument in function 'setDashPattern' is of type '"+
buf_dash_array.name+"'. Expected type 'ArrayBuffer'. Function Signature: setDashPattern(ArrayBuffer, number).");throw new TypeError("1st input argument '"+buf_dash_array+"' in function 'setDashPattern' is of type '"+typeof buf_dash_array+"'. Expected type 'ArrayBuffer'. Function Signature: setDashPattern(ArrayBuffer, number).");}if(phase instanceof Promise)throw new TypeError("3rd input argument in function 'setDashPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof phase)throw new TypeError("3rd input argument '"+phase+"' in function 'setDashPattern' is of type '"+typeof phase+"'. Expected type 'number'. Function Signature: setDashPattern(ArrayBuffer, number).");return PDFNet.messageHandler.sendWithPromise("GState.setDashPattern",{gs:this.id,buf_dash_array:buf_dash_array.buffer,phase:phase},this.userPriority)};PDFNet.GState.prototype.setCharSpacing=function(char_spacing){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCharSpacing'. Expected 1 argument. Function Signature: setCharSpacing(number)");
if(char_spacing instanceof Promise)throw new TypeError("1st input argument in function 'setCharSpacing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof char_spacing)throw new TypeError("1st input argument '"+char_spacing+"' in function 'setCharSpacing' is of type '"+typeof char_spacing+"'. Expected type 'number'. Function Signature: setCharSpacing(number).");return PDFNet.messageHandler.sendWithPromise("GState.setCharSpacing",{gs:this.id,char_spacing:char_spacing},
this.userPriority)};PDFNet.GState.prototype.setWordSpacing=function(word_spacing){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setWordSpacing'. Expected 1 argument. Function Signature: setWordSpacing(number)");if(word_spacing instanceof Promise)throw new TypeError("1st input argument in function 'setWordSpacing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof word_spacing)throw new TypeError("1st input argument '"+
word_spacing+"' in function 'setWordSpacing' is of type '"+typeof word_spacing+"'. Expected type 'number'. Function Signature: setWordSpacing(number).");return PDFNet.messageHandler.sendWithPromise("GState.setWordSpacing",{gs:this.id,word_spacing:word_spacing},this.userPriority)};PDFNet.GState.prototype.setHorizontalScale=function(hscale){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHorizontalScale'. Expected 1 argument. Function Signature: setHorizontalScale(number)");
if(hscale instanceof Promise)throw new TypeError("1st input argument in function 'setHorizontalScale' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof hscale)throw new TypeError("1st input argument '"+hscale+"' in function 'setHorizontalScale' is of type '"+typeof hscale+"'. Expected type 'number'. Function Signature: setHorizontalScale(number).");return PDFNet.messageHandler.sendWithPromise("GState.setHorizontalScale",{gs:this.id,hscale:hscale},
this.userPriority)};PDFNet.GState.prototype.setLeading=function(leading){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLeading'. Expected 1 argument. Function Signature: setLeading(number)");if(leading instanceof Promise)throw new TypeError("1st input argument in function 'setLeading' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof leading)throw new TypeError("1st input argument '"+leading+"' in function 'setLeading' is of type '"+
typeof leading+"'. Expected type 'number'. Function Signature: setLeading(number).");return PDFNet.messageHandler.sendWithPromise("GState.setLeading",{gs:this.id,leading:leading},this.userPriority)};PDFNet.GState.prototype.setFont=function(font,font_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFont'. Expected 2 arguments. Function Signature: setFont(Font, number)");if(font instanceof Promise)throw new TypeError("1st input argument in function 'setFont' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(font instanceof PDFNet.Font)){if("object"==typeof font)throw new TypeError("1st input argument in function 'setFont' is of type '"+font.name+"'. Expected type 'Font'. Function Signature: setFont(Font, number).");throw new TypeError("1st input argument '"+font+"' in function 'setFont' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: setFont(Font, number).");}if(font_sz instanceof Promise)throw new TypeError("2nd input argument in function 'setFont' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof font_sz)throw new TypeError("2nd input argument '"+font_sz+"' in function 'setFont' is of type '"+typeof font_sz+"'. Expected type 'number'. Function Signature: setFont(Font, number).");return PDFNet.messageHandler.sendWithPromise("GState.setFont",{gs:this.id,font:font.id,font_sz:font_sz},this.userPriority)};PDFNet.GState.prototype.setTextRenderMode=function(rmode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextRenderMode'. Expected 1 argument. Function Signature: setTextRenderMode(number)");
if(rmode instanceof Promise)throw new TypeError("1st input argument in function 'setTextRenderMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof rmode)throw new TypeError("1st input argument '"+rmode+"' in function 'setTextRenderMode' is of type '"+typeof rmode+"'. Expected type 'number'. Function Signature: setTextRenderMode(number).");return PDFNet.messageHandler.sendWithPromise("GState.setTextRenderMode",{gs:this.id,rmode:rmode},this.userPriority)};
PDFNet.GState.prototype.setTextRise=function(rise){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextRise'. Expected 1 argument. Function Signature: setTextRise(number)");if(rise instanceof Promise)throw new TypeError("1st input argument in function 'setTextRise' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof rise)throw new TypeError("1st input argument '"+rise+"' in function 'setTextRise' is of type '"+
typeof rise+"'. Expected type 'number'. Function Signature: setTextRise(number).");return PDFNet.messageHandler.sendWithPromise("GState.setTextRise",{gs:this.id,rise:rise},this.userPriority)};PDFNet.GState.prototype.setTextKnockout=function(knockout){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextKnockout'. Expected 1 argument. Function Signature: setTextKnockout(boolean)");if(knockout instanceof Promise)throw new TypeError("1st input argument in function 'setTextKnockout' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof knockout)throw new TypeError("1st input argument '"+knockout+"' in function 'setTextKnockout' is of type '"+typeof knockout+"'. Expected type 'boolean'. Function Signature: setTextKnockout(boolean).");return PDFNet.messageHandler.sendWithPromise("GState.setTextKnockout",{gs:this.id,knockout:knockout},this.userPriority)};PDFNet.GState.prototype.setRenderingIntent=function(intent){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRenderingIntent'. Expected 1 argument. Function Signature: setRenderingIntent(number)");
if(intent instanceof Promise)throw new TypeError("1st input argument in function 'setRenderingIntent' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof intent)throw new TypeError("1st input argument '"+intent+"' in function 'setRenderingIntent' is of type '"+typeof intent+"'. Expected type 'number'. Function Signature: setRenderingIntent(number).");return PDFNet.messageHandler.sendWithPromise("GState.setRenderingIntent",{gs:this.id,intent:intent},
this.userPriority)};PDFNet.GState.prototype.setBlendMode=function(BM){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBlendMode'. Expected 1 argument. Function Signature: setBlendMode(number)");if(BM instanceof Promise)throw new TypeError("1st input argument in function 'setBlendMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof BM)throw new TypeError("1st input argument '"+BM+"' in function 'setBlendMode' is of type '"+
typeof BM+"'. Expected type 'number'. Function Signature: setBlendMode(number).");return PDFNet.messageHandler.sendWithPromise("GState.setBlendMode",{gs:this.id,BM:BM},this.userPriority)};PDFNet.GState.prototype.setFillOpacity=function(ca){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillOpacity'. Expected 1 argument. Function Signature: setFillOpacity(number)");if(ca instanceof Promise)throw new TypeError("1st input argument in function 'setFillOpacity' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof ca)throw new TypeError("1st input argument '"+ca+"' in function 'setFillOpacity' is of type '"+typeof ca+"'. Expected type 'number'. Function Signature: setFillOpacity(number).");return PDFNet.messageHandler.sendWithPromise("GState.setFillOpacity",{gs:this.id,ca:ca},this.userPriority)};PDFNet.GState.prototype.setStrokeOpacity=function(CA){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeOpacity'. Expected 1 argument. Function Signature: setStrokeOpacity(number)");
if(CA instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeOpacity' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof CA)throw new TypeError("1st input argument '"+CA+"' in function 'setStrokeOpacity' is of type '"+typeof CA+"'. Expected type 'number'. Function Signature: setStrokeOpacity(number).");return PDFNet.messageHandler.sendWithPromise("GState.setStrokeOpacity",{gs:this.id,CA:CA},this.userPriority)};PDFNet.GState.prototype.setAISFlag=
function(AIS){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAISFlag'. Expected 1 argument. Function Signature: setAISFlag(boolean)");if(AIS instanceof Promise)throw new TypeError("1st input argument in function 'setAISFlag' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof AIS)throw new TypeError("1st input argument '"+AIS+"' in function 'setAISFlag' is of type '"+typeof AIS+"'. Expected type 'boolean'. Function Signature: setAISFlag(boolean).");
return PDFNet.messageHandler.sendWithPromise("GState.setAISFlag",{gs:this.id,AIS:AIS},this.userPriority)};PDFNet.GState.prototype.setSoftMask=function(SM){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSoftMask'. Expected 1 argument. Function Signature: setSoftMask(Obj)");if(SM instanceof Promise)throw new TypeError("1st input argument in function 'setSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(SM instanceof
PDFNet.Obj)){if("object"==typeof SM)throw new TypeError("1st input argument in function 'setSoftMask' is of type '"+SM.name+"'. Expected type 'Obj'. Function Signature: setSoftMask(Obj).");throw new TypeError("1st input argument '"+SM+"' in function 'setSoftMask' is of type '"+typeof SM+"'. Expected type 'Obj'. Function Signature: setSoftMask(Obj).");}return PDFNet.messageHandler.sendWithPromise("GState.setSoftMask",{gs:this.id,SM:SM.id},this.userPriority)};PDFNet.GState.prototype.setStrokeOverprint=
function(OP){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStrokeOverprint'. Expected 1 argument. Function Signature: setStrokeOverprint(boolean)");if(OP instanceof Promise)throw new TypeError("1st input argument in function 'setStrokeOverprint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof OP)throw new TypeError("1st input argument '"+OP+"' in function 'setStrokeOverprint' is of type '"+
typeof OP+"'. Expected type 'boolean'. Function Signature: setStrokeOverprint(boolean).");return PDFNet.messageHandler.sendWithPromise("GState.setStrokeOverprint",{gs:this.id,OP:OP},this.userPriority)};PDFNet.GState.prototype.setFillOverprint=function(op){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFillOverprint'. Expected 1 argument. Function Signature: setFillOverprint(boolean)");if(op instanceof Promise)throw new TypeError("1st input argument in function 'setFillOverprint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof op)throw new TypeError("1st input argument '"+op+"' in function 'setFillOverprint' is of type '"+typeof op+"'. Expected type 'boolean'. Function Signature: setFillOverprint(boolean).");return PDFNet.messageHandler.sendWithPromise("GState.setFillOverprint",{gs:this.id,op:op},this.userPriority)};PDFNet.GState.prototype.setOverprintMode=function(OPM){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOverprintMode'. Expected 1 argument. Function Signature: setOverprintMode(number)");
if(OPM instanceof Promise)throw new TypeError("1st input argument in function 'setOverprintMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof OPM)throw new TypeError("1st input argument '"+OPM+"' in function 'setOverprintMode' is of type '"+typeof OPM+"'. Expected type 'number'. Function Signature: setOverprintMode(number).");return PDFNet.messageHandler.sendWithPromise("GState.setOverprintMode",{gs:this.id,OPM:OPM},this.userPriority)};PDFNet.GState.prototype.setAutoStrokeAdjust=
function(SA){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAutoStrokeAdjust'. Expected 1 argument. Function Signature: setAutoStrokeAdjust(boolean)");if(SA instanceof Promise)throw new TypeError("1st input argument in function 'setAutoStrokeAdjust' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof SA)throw new TypeError("1st input argument '"+SA+"' in function 'setAutoStrokeAdjust' is of type '"+
typeof SA+"'. Expected type 'boolean'. Function Signature: setAutoStrokeAdjust(boolean).");return PDFNet.messageHandler.sendWithPromise("GState.setAutoStrokeAdjust",{gs:this.id,SA:SA},this.userPriority)};PDFNet.GState.prototype.setSmoothnessTolerance=function(SM){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSmoothnessTolerance'. Expected 1 argument. Function Signature: setSmoothnessTolerance(number)");if(SM instanceof Promise)throw new TypeError("1st input argument in function 'setSmoothnessTolerance' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof SM)throw new TypeError("1st input argument '"+SM+"' in function 'setSmoothnessTolerance' is of type '"+typeof SM+"'. Expected type 'number'. Function Signature: setSmoothnessTolerance(number).");return PDFNet.messageHandler.sendWithPromise("GState.setSmoothnessTolerance",{gs:this.id,SM:SM},this.userPriority)};PDFNet.GState.prototype.setBlackGenFunct=function(BG){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBlackGenFunct'. Expected 1 argument. Function Signature: setBlackGenFunct(Obj)");
if(BG instanceof Promise)throw new TypeError("1st input argument in function 'setBlackGenFunct' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(BG instanceof PDFNet.Obj)){if("object"==typeof BG)throw new TypeError("1st input argument in function 'setBlackGenFunct' is of type '"+BG.name+"'. Expected type 'Obj'. Function Signature: setBlackGenFunct(Obj).");throw new TypeError("1st input argument '"+BG+"' in function 'setBlackGenFunct' is of type '"+typeof BG+
"'. Expected type 'Obj'. Function Signature: setBlackGenFunct(Obj).");}return PDFNet.messageHandler.sendWithPromise("GState.setBlackGenFunct",{gs:this.id,BG:BG.id},this.userPriority)};PDFNet.GState.prototype.setUCRFunct=function(UCR){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUCRFunct'. Expected 1 argument. Function Signature: setUCRFunct(Obj)");if(UCR instanceof Promise)throw new TypeError("1st input argument in function 'setUCRFunct' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(UCR instanceof PDFNet.Obj)){if("object"==typeof UCR)throw new TypeError("1st input argument in function 'setUCRFunct' is of type '"+UCR.name+"'. Expected type 'Obj'. Function Signature: setUCRFunct(Obj).");throw new TypeError("1st input argument '"+UCR+"' in function 'setUCRFunct' is of type '"+typeof UCR+"'. Expected type 'Obj'. Function Signature: setUCRFunct(Obj).");}return PDFNet.messageHandler.sendWithPromise("GState.setUCRFunct",{gs:this.id,UCR:UCR.id},this.userPriority)};PDFNet.GState.prototype.setTransferFunct=
function(TR){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTransferFunct'. Expected 1 argument. Function Signature: setTransferFunct(Obj)");if(TR instanceof Promise)throw new TypeError("1st input argument in function 'setTransferFunct' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(TR instanceof PDFNet.Obj)){if("object"==typeof TR)throw new TypeError("1st input argument in function 'setTransferFunct' is of type '"+
TR.name+"'. Expected type 'Obj'. Function Signature: setTransferFunct(Obj).");throw new TypeError("1st input argument '"+TR+"' in function 'setTransferFunct' is of type '"+typeof TR+"'. Expected type 'Obj'. Function Signature: setTransferFunct(Obj).");}return PDFNet.messageHandler.sendWithPromise("GState.setTransferFunct",{gs:this.id,TR:TR.id},this.userPriority)};PDFNet.GState.prototype.setHalftone=function(HT){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHalftone'. Expected 1 argument. Function Signature: setHalftone(Obj)");
if(HT instanceof Promise)throw new TypeError("1st input argument in function 'setHalftone' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(HT instanceof PDFNet.Obj)){if("object"==typeof HT)throw new TypeError("1st input argument in function 'setHalftone' is of type '"+HT.name+"'. Expected type 'Obj'. Function Signature: setHalftone(Obj).");throw new TypeError("1st input argument '"+HT+"' in function 'setHalftone' is of type '"+typeof HT+"'. Expected type 'Obj'. Function Signature: setHalftone(Obj).");
}return PDFNet.messageHandler.sendWithPromise("GState.setHalftone",{gs:this.id,HT:HT.id},this.userPriority)};PDFNet.Element.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Element.getType",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getGState=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getGState'. Expected 0 arguments. Function Signature: getGState()");return PDFNet.messageHandler.sendWithPromise("Element.getGState",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.GState(id)})};PDFNet.Element.prototype.getCTM=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCTM'. Expected 0 arguments. Function Signature: getCTM()");return PDFNet.messageHandler.sendWithPromise("Element.getCTM",
{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Element.prototype.getParentStructElement=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParentStructElement'. Expected 0 arguments. Function Signature: getParentStructElement()");return PDFNet.messageHandler.sendWithPromise("Element.getParentStructElement",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SElement(id)})};
PDFNet.Element.prototype.getStructMCID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStructMCID'. Expected 0 arguments. Function Signature: getStructMCID()");return PDFNet.messageHandler.sendWithPromise("Element.getStructMCID",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isOCVisible=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isOCVisible'. Expected 0 arguments. Function Signature: isOCVisible()");
return PDFNet.messageHandler.sendWithPromise("Element.isOCVisible",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isClippingPath=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isClippingPath'. Expected 0 arguments. Function Signature: isClippingPath()");return PDFNet.messageHandler.sendWithPromise("Element.isClippingPath",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isStroked=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isStroked'. Expected 0 arguments. Function Signature: isStroked()");return PDFNet.messageHandler.sendWithPromise("Element.isStroked",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isFilled=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isFilled'. Expected 0 arguments. Function Signature: isFilled()");return PDFNet.messageHandler.sendWithPromise("Element.isFilled",{e:this.id},this.userPriority)};
PDFNet.Element.prototype.isWindingFill=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isWindingFill'. Expected 0 arguments. Function Signature: isWindingFill()");return PDFNet.messageHandler.sendWithPromise("Element.isWindingFill",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isClipWindingFill=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isClipWindingFill'. Expected 0 arguments. Function Signature: isClipWindingFill()");
return PDFNet.messageHandler.sendWithPromise("Element.isClipWindingFill",{e:this.id},this.userPriority)};PDFNet.Element.prototype.setPathClip=function(clip){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathClip'. Expected 1 argument. Function Signature: setPathClip(boolean)");if(clip instanceof Promise)throw new TypeError("1st input argument in function 'setPathClip' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof clip)throw new TypeError("1st input argument '"+clip+"' in function 'setPathClip' is of type '"+typeof clip+"'. Expected type 'boolean'. Function Signature: setPathClip(boolean).");return PDFNet.messageHandler.sendWithPromise("Element.setPathClip",{e:this.id,clip:clip},this.userPriority)};PDFNet.Element.prototype.setPathStroke=function(stroke){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathStroke'. Expected 1 argument. Function Signature: setPathStroke(boolean)");
if(stroke instanceof Promise)throw new TypeError("1st input argument in function 'setPathStroke' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof stroke)throw new TypeError("1st input argument '"+stroke+"' in function 'setPathStroke' is of type '"+typeof stroke+"'. Expected type 'boolean'. Function Signature: setPathStroke(boolean).");return PDFNet.messageHandler.sendWithPromise("Element.setPathStroke",{e:this.id,stroke:stroke},this.userPriority)};
PDFNet.Element.prototype.setPathFill=function(fill){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathFill'. Expected 1 argument. Function Signature: setPathFill(boolean)");if(fill instanceof Promise)throw new TypeError("1st input argument in function 'setPathFill' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof fill)throw new TypeError("1st input argument '"+fill+"' in function 'setPathFill' is of type '"+
typeof fill+"'. Expected type 'boolean'. Function Signature: setPathFill(boolean).");return PDFNet.messageHandler.sendWithPromise("Element.setPathFill",{e:this.id,fill:fill},this.userPriority)};PDFNet.Element.prototype.setWindingFill=function(winding_rule){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setWindingFill'. Expected 1 argument. Function Signature: setWindingFill(boolean)");if(winding_rule instanceof Promise)throw new TypeError("1st input argument in function 'setWindingFill' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof winding_rule)throw new TypeError("1st input argument '"+winding_rule+"' in function 'setWindingFill' is of type '"+typeof winding_rule+"'. Expected type 'boolean'. Function Signature: setWindingFill(boolean).");return PDFNet.messageHandler.sendWithPromise("Element.setWindingFill",{e:this.id,winding_rule:winding_rule},this.userPriority)};PDFNet.Element.prototype.setClipWindingFill=function(winding_rule){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setClipWindingFill'. Expected 1 argument. Function Signature: setClipWindingFill(boolean)");
if(winding_rule instanceof Promise)throw new TypeError("1st input argument in function 'setClipWindingFill' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof winding_rule)throw new TypeError("1st input argument '"+winding_rule+"' in function 'setClipWindingFill' is of type '"+typeof winding_rule+"'. Expected type 'boolean'. Function Signature: setClipWindingFill(boolean).");return PDFNet.messageHandler.sendWithPromise("Element.setClipWindingFill",
{e:this.id,winding_rule:winding_rule},this.userPriority)};PDFNet.Element.prototype.setPathTypes=function(in_seg_types,count){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathTypes'. Expected 2 arguments. Function Signature: setPathTypes(string, number)");if(in_seg_types instanceof Promise)throw new TypeError("1st input argument in function 'setPathTypes' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof in_seg_types)throw new TypeError("1st input argument '"+in_seg_types+"' in function 'setPathTypes' is of type '"+typeof in_seg_types+"'. Expected type 'string'. Function Signature: setPathTypes(string, number).");if(count instanceof Promise)throw new TypeError("2nd input argument in function 'setPathTypes' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof count)throw new TypeError("2nd input argument '"+count+"' in function 'setPathTypes' is of type '"+
typeof count+"'. Expected type 'number'. Function Signature: setPathTypes(string, number).");return PDFNet.messageHandler.sendWithPromise("Element.setPathTypes",{e:this.id,in_seg_types:in_seg_types,count:count},this.userPriority)};PDFNet.Element.prototype.getXObject=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getXObject'. Expected 0 arguments. Function Signature: getXObject()");return PDFNet.messageHandler.sendWithPromise("Element.getXObject",
{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Element.prototype.getImageData=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageData'. Expected 0 arguments. Function Signature: getImageData()");return PDFNet.messageHandler.sendWithPromise("Element.getImageData",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.Element.prototype.getImageDataSize=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageDataSize'. Expected 0 arguments. Function Signature: getImageDataSize()");return PDFNet.messageHandler.sendWithPromise("Element.getImageDataSize",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getImageColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageColorSpace'. Expected 0 arguments. Function Signature: getImageColorSpace()");
return PDFNet.messageHandler.sendWithPromise("Element.getImageColorSpace",{e:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Element.prototype.getImageWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageWidth'. Expected 0 arguments. Function Signature: getImageWidth()");return PDFNet.messageHandler.sendWithPromise("Element.getImageWidth",
{e:this.id},this.userPriority)};PDFNet.Element.prototype.getImageHeight=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageHeight'. Expected 0 arguments. Function Signature: getImageHeight()");return PDFNet.messageHandler.sendWithPromise("Element.getImageHeight",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getDecodeArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDecodeArray'. Expected 0 arguments. Function Signature: getDecodeArray()");
return PDFNet.messageHandler.sendWithPromise("Element.getDecodeArray",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Element.prototype.getBitsPerComponent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBitsPerComponent'. Expected 0 arguments. Function Signature: getBitsPerComponent()");return PDFNet.messageHandler.sendWithPromise("Element.getBitsPerComponent",{e:this.id},this.userPriority)};
PDFNet.Element.prototype.getComponentNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getComponentNum'. Expected 0 arguments. Function Signature: getComponentNum()");return PDFNet.messageHandler.sendWithPromise("Element.getComponentNum",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isImageMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isImageMask'. Expected 0 arguments. Function Signature: isImageMask()");
return PDFNet.messageHandler.sendWithPromise("Element.isImageMask",{e:this.id},this.userPriority)};PDFNet.Element.prototype.isImageInterpolate=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isImageInterpolate'. Expected 0 arguments. Function Signature: isImageInterpolate()");return PDFNet.messageHandler.sendWithPromise("Element.isImageInterpolate",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getMask'. Expected 0 arguments. Function Signature: getMask()");return PDFNet.messageHandler.sendWithPromise("Element.getMask",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Element.prototype.getImageRenderingIntent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageRenderingIntent'. Expected 0 arguments. Function Signature: getImageRenderingIntent()");
return PDFNet.messageHandler.sendWithPromise("Element.getImageRenderingIntent",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getTextString=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextString'. Expected 0 arguments. Function Signature: getTextString()");return PDFNet.messageHandler.sendWithPromise("Element.getTextString",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getTextMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTextMatrix'. Expected 0 arguments. Function Signature: getTextMatrix()");return PDFNet.messageHandler.sendWithPromise("Element.getTextMatrix",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Element.prototype.getCharIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCharIterator'. Expected 0 arguments. Function Signature: getCharIterator()");
return PDFNet.messageHandler.sendWithPromise("Element.getCharIterator",{e:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Element.prototype.getTextLength=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextLength'. Expected 0 arguments. Function Signature: getTextLength()");return PDFNet.messageHandler.sendWithPromise("Element.getTextLength",
{e:this.id},this.userPriority)};PDFNet.Element.prototype.getPosAdjustment=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPosAdjustment'. Expected 0 arguments. Function Signature: getPosAdjustment()");return PDFNet.messageHandler.sendWithPromise("Element.getPosAdjustment",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getNewTextLineOffset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNewTextLineOffset'. Expected 0 arguments. Function Signature: getNewTextLineOffset()");
return PDFNet.messageHandler.sendWithPromise("Element.getNewTextLineOffset",{e:this.id},this.userPriority)};PDFNet.Element.prototype.hasTextMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasTextMatrix'. Expected 0 arguments. Function Signature: hasTextMatrix()");return PDFNet.messageHandler.sendWithPromise("Element.hasTextMatrix",{e:this.id},this.userPriority)};PDFNet.Element.prototype.setTextData=function(buf_text_data){buf_text_data instanceof
Array&&(buf_text_data=new Float64Array(buf_text_data));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextData'. Expected 1 argument. Function Signature: setTextData(ArrayBuffer)");if(buf_text_data instanceof Promise)throw new TypeError("1st input argument in function 'setTextData' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf_text_data.buffer)){if("object"==typeof buf_text_data)throw new TypeError("1st input argument in function 'setTextData' is of type '"+
buf_text_data.name+"'. Expected type 'ArrayBuffer'. Function Signature: setTextData(ArrayBuffer).");throw new TypeError("1st input argument '"+buf_text_data+"' in function 'setTextData' is of type '"+typeof buf_text_data+"'. Expected type 'ArrayBuffer'. Function Signature: setTextData(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("Element.setTextData",{e:this.id,buf_text_data:buf_text_data.buffer},this.userPriority)};PDFNet.Element.prototype.setTextMatrix=function(mtx){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setTextMatrix'. Expected 1 argument. Function Signature: setTextMatrix(Matrix2D)");if(mtx instanceof Promise)throw new TypeError("1st input argument in function 'setTextMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("1st input argument in function 'setTextMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: setTextMatrix(Matrix2D).");
throw new TypeError("1st input argument '"+mtx+"' in function 'setTextMatrix' is of type '"+typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: setTextMatrix(Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setTextMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Element.setTextMatrix",
{e:this.id,mtx:mtx},this.userPriority)};PDFNet.Element.prototype.setTextMatrixEntries=function(a,b,c,d,h,v){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextMatrixEntries'. Expected 6 arguments. Function Signature: setTextMatrixEntries(number, number, number, number, number, number)");if(a instanceof Promise)throw new TypeError("1st input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof a)throw new TypeError("1st input argument '"+a+"' in function 'setTextMatrixEntries' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("2nd input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'setTextMatrixEntries' is of type '"+
typeof b+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");if(c instanceof Promise)throw new TypeError("3rd input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'setTextMatrixEntries' is of type '"+typeof c+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");
if(d instanceof Promise)throw new TypeError("4th input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'setTextMatrixEntries' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");if(h instanceof Promise)throw new TypeError("5th input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'setTextMatrixEntries' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");if(v instanceof Promise)throw new TypeError("6th input argument in function 'setTextMatrixEntries' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'setTextMatrixEntries' is of type '"+
typeof v+"'. Expected type 'number'. Function Signature: setTextMatrixEntries(number, number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("Element.setTextMatrixEntries",{e:this.id,a:a,b:b,c:c,d:d,h:h,v:v},this.userPriority)};PDFNet.Element.prototype.setPosAdjustment=function(adjust){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPosAdjustment'. Expected 1 argument. Function Signature: setPosAdjustment(number)");
if(adjust instanceof Promise)throw new TypeError("1st input argument in function 'setPosAdjustment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof adjust)throw new TypeError("1st input argument '"+adjust+"' in function 'setPosAdjustment' is of type '"+typeof adjust+"'. Expected type 'number'. Function Signature: setPosAdjustment(number).");return PDFNet.messageHandler.sendWithPromise("Element.setPosAdjustment",{e:this.id,adjust:adjust},this.userPriority)};
PDFNet.Element.prototype.updateTextMetrics=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'updateTextMetrics'. Expected 0 arguments. Function Signature: updateTextMetrics()");return PDFNet.messageHandler.sendWithPromise("Element.updateTextMetrics",{e:this.id},this.userPriority)};PDFNet.Element.prototype.setNewTextLineOffset=function(dx,dy){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setNewTextLineOffset'. Expected 2 arguments. Function Signature: setNewTextLineOffset(number, number)");
if(dx instanceof Promise)throw new TypeError("1st input argument in function 'setNewTextLineOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dx)throw new TypeError("1st input argument '"+dx+"' in function 'setNewTextLineOffset' is of type '"+typeof dx+"'. Expected type 'number'. Function Signature: setNewTextLineOffset(number, number).");if(dy instanceof Promise)throw new TypeError("2nd input argument in function 'setNewTextLineOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof dy)throw new TypeError("2nd input argument '"+dy+"' in function 'setNewTextLineOffset' is of type '"+typeof dy+"'. Expected type 'number'. Function Signature: setNewTextLineOffset(number, number).");return PDFNet.messageHandler.sendWithPromise("Element.setNewTextLineOffset",{e:this.id,dx:dx,dy:dy},this.userPriority)};PDFNet.Element.prototype.getShading=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getShading'. Expected 0 arguments. Function Signature: getShading()");
return PDFNet.messageHandler.sendWithPromise("Element.getShading",{e:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Shading(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Element.prototype.getMCPropertyDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMCPropertyDict'. Expected 0 arguments. Function Signature: getMCPropertyDict()");return PDFNet.messageHandler.sendWithPromise("Element.getMCPropertyDict",
{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Element.prototype.getMCTag=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMCTag'. Expected 0 arguments. Function Signature: getMCTag()");return PDFNet.messageHandler.sendWithPromise("Element.getMCTag",{e:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementBuilder.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("elementBuilderCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ElementBuilder(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ElementBuilder.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");
for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.destroy",{auto_dealloc_obj:this.id},
this.userPriority)};PDFNet.ElementBuilder.prototype.reset=function(gs){"undefined"===typeof gs&&(gs=new PDFNet.GState("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'reset'. Expected at most 1 arguments. Function Signature: reset(GState)");if(gs instanceof Promise)throw new TypeError("1st input argument in function 'reset' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(gs instanceof PDFNet.GState)){if("object"==
typeof gs)throw new TypeError("1st input argument in function 'reset' is of type '"+gs.name+"'. Expected type 'GState'. Function Signature: reset(GState).");throw new TypeError("1st input argument '"+gs+"' in function 'reset' is of type '"+typeof gs+"'. Expected type 'GState'. Function Signature: reset(GState).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.reset",{b:this.id,gs:gs.id},this.userPriority)};PDFNet.ElementBuilder.prototype.createImage=function(img){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createImage'. Expected 1 argument. Function Signature: createImage(Image)");if(img instanceof Promise)throw new TypeError("1st input argument in function 'createImage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("1st input argument in function 'createImage' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: createImage(Image).");
throw new TypeError("1st input argument '"+img+"' in function 'createImage' is of type '"+typeof img+"'. Expected type 'Image'. Function Signature: createImage(Image).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createImage",{b:this.id,img:img.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createImageFromMatrix=function(img,mtx){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImageFromMatrix'. Expected 2 arguments. Function Signature: createImageFromMatrix(Image, Matrix2D)");
if(img instanceof Promise)throw new TypeError("1st input argument in function 'createImageFromMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("1st input argument in function 'createImageFromMatrix' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: createImageFromMatrix(Image, Matrix2D).");throw new TypeError("1st input argument '"+img+"' in function 'createImageFromMatrix' is of type '"+
typeof img+"'. Expected type 'Image'. Function Signature: createImageFromMatrix(Image, Matrix2D).");}if(mtx instanceof Promise)throw new TypeError("2nd input argument in function 'createImageFromMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("2nd input argument in function 'createImageFromMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: createImageFromMatrix(Image, Matrix2D).");
throw new TypeError("2nd input argument '"+mtx+"' in function 'createImageFromMatrix' is of type '"+typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: createImageFromMatrix(Image, Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'createImageFromMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+
"'?");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createImageFromMatrix",{b:this.id,img:img.id,mtx:mtx},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createImageScaled=function(img,x,y,hscale,vscale){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImageScaled'. Expected 5 arguments. Function Signature: createImageScaled(Image, number, number, number, number)");
if(img instanceof Promise)throw new TypeError("1st input argument in function 'createImageScaled' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("1st input argument in function 'createImageScaled' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: createImageScaled(Image, number, number, number, number).");throw new TypeError("1st input argument '"+img+"' in function 'createImageScaled' is of type '"+
typeof img+"'. Expected type 'Image'. Function Signature: createImageScaled(Image, number, number, number, number).");}if(x instanceof Promise)throw new TypeError("2nd input argument in function 'createImageScaled' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("2nd input argument '"+x+"' in function 'createImageScaled' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: createImageScaled(Image, number, number, number, number).");
if(y instanceof Promise)throw new TypeError("3rd input argument in function 'createImageScaled' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("3rd input argument '"+y+"' in function 'createImageScaled' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: createImageScaled(Image, number, number, number, number).");if(hscale instanceof Promise)throw new TypeError("4th input argument in function 'createImageScaled' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof hscale)throw new TypeError("4th input argument '"+hscale+"' in function 'createImageScaled' is of type '"+typeof hscale+"'. Expected type 'number'. Function Signature: createImageScaled(Image, number, number, number, number).");if(vscale instanceof Promise)throw new TypeError("5th input argument in function 'createImageScaled' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vscale)throw new TypeError("5th input argument '"+
vscale+"' in function 'createImageScaled' is of type '"+typeof vscale+"'. Expected type 'number'. Function Signature: createImageScaled(Image, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createImageScaled",{b:this.id,img:img.id,x:x,y:y,hscale:hscale,vscale:vscale},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createGroupBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createGroupBegin'. Expected 0 arguments. Function Signature: createGroupBegin()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createGroupBegin",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createGroupEnd=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createGroupEnd'. Expected 0 arguments. Function Signature: createGroupEnd()");
return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createGroupEnd",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createShading=function(sh){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createShading'. Expected 1 argument. Function Signature: createShading(Shading)");if(sh instanceof Promise)throw new TypeError("1st input argument in function 'createShading' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(sh instanceof PDFNet.Shading)){if("object"==typeof sh)throw new TypeError("1st input argument in function 'createShading' is of type '"+sh.name+"'. Expected type 'Shading'. Function Signature: createShading(Shading).");throw new TypeError("1st input argument '"+sh+"' in function 'createShading' is of type '"+typeof sh+"'. Expected type 'Shading'. Function Signature: createShading(Shading).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createShading",{b:this.id,sh:sh.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createFormFromStream=function(form){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFormFromStream'. Expected 1 argument. Function Signature: createFormFromStream(Obj)");if(form instanceof Promise)throw new TypeError("1st input argument in function 'createFormFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(form instanceof PDFNet.Obj)){if("object"==
typeof form)throw new TypeError("1st input argument in function 'createFormFromStream' is of type '"+form.name+"'. Expected type 'Obj'. Function Signature: createFormFromStream(Obj).");throw new TypeError("1st input argument '"+form+"' in function 'createFormFromStream' is of type '"+typeof form+"'. Expected type 'Obj'. Function Signature: createFormFromStream(Obj).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createFormFromStream",{b:this.id,form:form.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createFormFromPage=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFormFromPage'. Expected 1 argument. Function Signature: createFormFromPage(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFormFromPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==
typeof page)throw new TypeError("1st input argument in function 'createFormFromPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFormFromPage(Page).");throw new TypeError("1st input argument '"+page+"' in function 'createFormFromPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFormFromPage(Page).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createFormFromPage",{b:this.id,page:page.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createFormFromDoc=function(page,doc){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFormFromDoc'. Expected 2 arguments. Function Signature: createFormFromDoc(Page, PDFDoc)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'createFormFromDoc' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==
typeof page)throw new TypeError("1st input argument in function 'createFormFromDoc' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: createFormFromDoc(Page, PDFDoc).");throw new TypeError("1st input argument '"+page+"' in function 'createFormFromDoc' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: createFormFromDoc(Page, PDFDoc).");}if(doc instanceof Promise)throw new TypeError("2nd input argument in function 'createFormFromDoc' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("2nd input argument in function 'createFormFromDoc' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: createFormFromDoc(Page, PDFDoc).");throw new TypeError("2nd input argument '"+doc+"' in function 'createFormFromDoc' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: createFormFromDoc(Page, PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createFormFromDoc",
{b:this.id,page:page.id,doc:doc.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextBeginWithFont=function(font,font_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextBeginWithFont'. Expected 2 arguments. Function Signature: createTextBeginWithFont(Font, number)");if(font instanceof Promise)throw new TypeError("1st input argument in function 'createTextBeginWithFont' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(font instanceof PDFNet.Font)){if("object"==typeof font)throw new TypeError("1st input argument in function 'createTextBeginWithFont' is of type '"+font.name+"'. Expected type 'Font'. Function Signature: createTextBeginWithFont(Font, number).");throw new TypeError("1st input argument '"+font+"' in function 'createTextBeginWithFont' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: createTextBeginWithFont(Font, number).");}if(font_sz instanceof Promise)throw new TypeError("2nd input argument in function 'createTextBeginWithFont' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof font_sz)throw new TypeError("2nd input argument '"+font_sz+"' in function 'createTextBeginWithFont' is of type '"+typeof font_sz+"'. Expected type 'number'. Function Signature: createTextBeginWithFont(Font, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextBeginWithFont",{b:this.id,font:font.id,font_sz:font_sz},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextBegin=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextBegin'. Expected 0 arguments. Function Signature: createTextBegin()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextBegin",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextEnd=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextEnd'. Expected 0 arguments. Function Signature: createTextEnd()");
return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextEnd",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextRun=function(text_data,font,font_sz){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextRun'. Expected 3 arguments. Function Signature: createTextRun(string, Font, number)");if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createTextRun' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof text_data)throw new TypeError("1st input argument '"+text_data+"' in function 'createTextRun' is of type '"+typeof text_data+"'. Expected type 'string'. Function Signature: createTextRun(string, Font, number).");if(font instanceof Promise)throw new TypeError("2nd input argument in function 'createTextRun' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(font instanceof PDFNet.Font)){if("object"==typeof font)throw new TypeError("2nd input argument in function 'createTextRun' is of type '"+
font.name+"'. Expected type 'Font'. Function Signature: createTextRun(string, Font, number).");throw new TypeError("2nd input argument '"+font+"' in function 'createTextRun' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: createTextRun(string, Font, number).");}if(font_sz instanceof Promise)throw new TypeError("3rd input argument in function 'createTextRun' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof font_sz)throw new TypeError("3rd input argument '"+
font_sz+"' in function 'createTextRun' is of type '"+typeof font_sz+"'. Expected type 'number'. Function Signature: createTextRun(string, Font, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextRun",{b:this.id,text_data:text_data,font:font.id,font_sz:font_sz},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextRunWithSize=function(text_data,text_data_sz,font,font_sz){if(4!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createTextRunWithSize'. Expected 4 arguments. Function Signature: createTextRunWithSize(string, number, Font, number)");if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text_data)throw new TypeError("1st input argument '"+text_data+"' in function 'createTextRunWithSize' is of type '"+typeof text_data+"'. Expected type 'string'. Function Signature: createTextRunWithSize(string, number, Font, number).");
if(text_data_sz instanceof Promise)throw new TypeError("2nd input argument in function 'createTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof text_data_sz)throw new TypeError("2nd input argument '"+text_data_sz+"' in function 'createTextRunWithSize' is of type '"+typeof text_data_sz+"'. Expected type 'number'. Function Signature: createTextRunWithSize(string, number, Font, number).");if(font instanceof Promise)throw new TypeError("3rd input argument in function 'createTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(font instanceof PDFNet.Font)){if("object"==typeof font)throw new TypeError("3rd input argument in function 'createTextRunWithSize' is of type '"+font.name+"'. Expected type 'Font'. Function Signature: createTextRunWithSize(string, number, Font, number).");throw new TypeError("3rd input argument '"+font+"' in function 'createTextRunWithSize' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: createTextRunWithSize(string, number, Font, number).");}if(font_sz instanceof Promise)throw new TypeError("4th input argument in function 'createTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof font_sz)throw new TypeError("4th input argument '"+font_sz+"' in function 'createTextRunWithSize' is of type '"+typeof font_sz+"'. Expected type 'number'. Function Signature: createTextRunWithSize(string, number, Font, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextRunWithSize",{b:this.id,text_data:text_data,text_data_sz:text_data_sz,font:font.id,font_sz:font_sz},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};
PDFNet.ElementBuilder.prototype.createTextRunUnsigned=function(text_data,font,font_sz){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextRunUnsigned'. Expected 3 arguments. Function Signature: createTextRunUnsigned(string, Font, number)");if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createTextRunUnsigned' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text_data)throw new TypeError("1st input argument '"+
text_data+"' in function 'createTextRunUnsigned' is of type '"+typeof text_data+"'. Expected type 'string'. Function Signature: createTextRunUnsigned(string, Font, number).");if(font instanceof Promise)throw new TypeError("2nd input argument in function 'createTextRunUnsigned' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(font instanceof PDFNet.Font)){if("object"==typeof font)throw new TypeError("2nd input argument in function 'createTextRunUnsigned' is of type '"+
font.name+"'. Expected type 'Font'. Function Signature: createTextRunUnsigned(string, Font, number).");throw new TypeError("2nd input argument '"+font+"' in function 'createTextRunUnsigned' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: createTextRunUnsigned(string, Font, number).");}if(font_sz instanceof Promise)throw new TypeError("3rd input argument in function 'createTextRunUnsigned' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof font_sz)throw new TypeError("3rd input argument '"+font_sz+"' in function 'createTextRunUnsigned' is of type '"+typeof font_sz+"'. Expected type 'number'. Function Signature: createTextRunUnsigned(string, Font, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextRunUnsigned",{b:this.id,text_data:text_data,font:font.id,font_sz:font_sz},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createNewTextRun=
function(text_data){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createNewTextRun'. Expected 1 argument. Function Signature: createNewTextRun(string)");if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createNewTextRun' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text_data)throw new TypeError("1st input argument '"+text_data+"' in function 'createNewTextRun' is of type '"+
typeof text_data+"'. Expected type 'string'. Function Signature: createNewTextRun(string).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createNewTextRun",{b:this.id,text_data:text_data},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createNewTextRunWithSize=function(text_data,text_data_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createNewTextRunWithSize'. Expected 2 arguments. Function Signature: createNewTextRunWithSize(string, number)");
if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createNewTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text_data)throw new TypeError("1st input argument '"+text_data+"' in function 'createNewTextRunWithSize' is of type '"+typeof text_data+"'. Expected type 'string'. Function Signature: createNewTextRunWithSize(string, number).");if(text_data_sz instanceof Promise)throw new TypeError("2nd input argument in function 'createNewTextRunWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof text_data_sz)throw new TypeError("2nd input argument '"+text_data_sz+"' in function 'createNewTextRunWithSize' is of type '"+typeof text_data_sz+"'. Expected type 'number'. Function Signature: createNewTextRunWithSize(string, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createNewTextRunWithSize",{b:this.id,text_data:text_data,text_data_sz:text_data_sz},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createNewTextRunUnsigned=
function(text_data){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createNewTextRunUnsigned'. Expected 1 argument. Function Signature: createNewTextRunUnsigned(string)");if(text_data instanceof Promise)throw new TypeError("1st input argument in function 'createNewTextRunUnsigned' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text_data)throw new TypeError("1st input argument '"+text_data+"' in function 'createNewTextRunUnsigned' is of type '"+
typeof text_data+"'. Expected type 'string'. Function Signature: createNewTextRunUnsigned(string).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createNewTextRunUnsigned",{b:this.id,text_data:text_data},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextNewLineWithOffset=function(dx,dy){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createTextNewLineWithOffset'. Expected 2 arguments. Function Signature: createTextNewLineWithOffset(number, number)");
if(dx instanceof Promise)throw new TypeError("1st input argument in function 'createTextNewLineWithOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dx)throw new TypeError("1st input argument '"+dx+"' in function 'createTextNewLineWithOffset' is of type '"+typeof dx+"'. Expected type 'number'. Function Signature: createTextNewLineWithOffset(number, number).");if(dy instanceof Promise)throw new TypeError("2nd input argument in function 'createTextNewLineWithOffset' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof dy)throw new TypeError("2nd input argument '"+dy+"' in function 'createTextNewLineWithOffset' is of type '"+typeof dy+"'. Expected type 'number'. Function Signature: createTextNewLineWithOffset(number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextNewLineWithOffset",{b:this.id,dx:dx,dy:dy},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createTextNewLine=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createTextNewLine'. Expected 0 arguments. Function Signature: createTextNewLine()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createTextNewLine",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createPath=function(buf_points,buf_seg_types){buf_points instanceof Array&&(buf_points=new Float64Array(buf_points));buf_seg_types instanceof Array&&(buf_seg_types=new Float64Array(buf_seg_types));
if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createPath'. Expected 2 arguments. Function Signature: createPath(ArrayBuffer, ArrayBuffer)");if(buf_points instanceof Promise)throw new TypeError("1st input argument in function 'createPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf_points.buffer)){if("object"==typeof buf_points)throw new TypeError("1st input argument in function 'createPath' is of type '"+
buf_points.name+"'. Expected type 'ArrayBuffer'. Function Signature: createPath(ArrayBuffer, ArrayBuffer).");throw new TypeError("1st input argument '"+buf_points+"' in function 'createPath' is of type '"+typeof buf_points+"'. Expected type 'ArrayBuffer'. Function Signature: createPath(ArrayBuffer, ArrayBuffer).");}if(buf_seg_types instanceof Promise)throw new TypeError("3rd input argument in function 'createPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(buf_seg_types.buffer)){if("object"==typeof buf_seg_types)throw new TypeError("3rd input argument in function 'createPath' is of type '"+buf_seg_types.name+"'. Expected type 'ArrayBuffer'. Function Signature: createPath(ArrayBuffer, ArrayBuffer).");throw new TypeError("3rd input argument '"+buf_seg_types+"' in function 'createPath' is of type '"+typeof buf_seg_types+"'. Expected type 'ArrayBuffer'. Function Signature: createPath(ArrayBuffer, ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createPath",
{b:this.id,buf_points:buf_points.buffer,buf_seg_types:buf_seg_types.buffer},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createRect=function(x,y,width,height){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createRect'. Expected 4 arguments. Function Signature: createRect(number, number, number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'createRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'createRect' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: createRect(number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'createRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'createRect' is of type '"+typeof y+
"'. Expected type 'number'. Function Signature: createRect(number, number, number, number).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'createRect' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createRect(number, number, number, number).");if(height instanceof
Promise)throw new TypeError("4th input argument in function 'createRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'createRect' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createRect(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createRect",{b:this.id,x:x,y:y,width:width,height:height},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.createEllipse=function(x,y,width,height){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createEllipse'. Expected 4 arguments. Function Signature: createEllipse(number, number, number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'createEllipse' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'createEllipse' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: createEllipse(number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'createEllipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'createEllipse' is of type '"+
typeof y+"'. Expected type 'number'. Function Signature: createEllipse(number, number, number, number).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createEllipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'createEllipse' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createEllipse(number, number, number, number).");
if(height instanceof Promise)throw new TypeError("4th input argument in function 'createEllipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'createEllipse' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createEllipse(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.createEllipse",{b:this.id,x:x,
y:y,width:width,height:height},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.pathBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pathBegin'. Expected 0 arguments. Function Signature: pathBegin()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.pathBegin",{b:this.id},this.userPriority)};PDFNet.ElementBuilder.prototype.pathEnd=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pathEnd'. Expected 0 arguments. Function Signature: pathEnd()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.pathEnd",{b:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementBuilder.prototype.rect=function(x,y,width,height){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'rect'. Expected 4 arguments. Function Signature: rect(number, number, number, number)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'rect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'rect' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: rect(number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'rect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'rect' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: rect(number, number, number, number).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'rect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'rect' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: rect(number, number, number, number).");
if(height instanceof Promise)throw new TypeError("4th input argument in function 'rect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'rect' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: rect(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.rect",{b:this.id,x:x,y:y,width:width,height:height},this.userPriority)};
PDFNet.ElementBuilder.prototype.ellipse=function(x,y,width,height){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'ellipse'. Expected 4 arguments. Function Signature: ellipse(number, number, number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'ellipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'ellipse' is of type '"+
typeof x+"'. Expected type 'number'. Function Signature: ellipse(number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'ellipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'ellipse' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: ellipse(number, number, number, number).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'ellipse' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'ellipse' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: ellipse(number, number, number, number).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'ellipse' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'ellipse' is of type '"+
typeof height+"'. Expected type 'number'. Function Signature: ellipse(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.ellipse",{b:this.id,x:x,y:y,width:width,height:height},this.userPriority)};PDFNet.ElementBuilder.prototype.moveTo=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'moveTo'. Expected 2 arguments. Function Signature: moveTo(number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'moveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'moveTo' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: moveTo(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'moveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'moveTo' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: moveTo(number, number).");
return PDFNet.messageHandler.sendWithPromise("ElementBuilder.moveTo",{b:this.id,x:x,y:y},this.userPriority)};PDFNet.ElementBuilder.prototype.lineTo=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'lineTo'. Expected 2 arguments. Function Signature: lineTo(number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'lineTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'lineTo' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: lineTo(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'lineTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'lineTo' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: lineTo(number, number).");
return PDFNet.messageHandler.sendWithPromise("ElementBuilder.lineTo",{b:this.id,x:x,y:y},this.userPriority)};PDFNet.ElementBuilder.prototype.curveTo=function(cx1,cy1,cx2,cy2,x2,y2){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'curveTo'. Expected 6 arguments. Function Signature: curveTo(number, number, number, number, number, number)");if(cx1 instanceof Promise)throw new TypeError("1st input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof cx1)throw new TypeError("1st input argument '"+cx1+"' in function 'curveTo' is of type '"+typeof cx1+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");if(cy1 instanceof Promise)throw new TypeError("2nd input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof cy1)throw new TypeError("2nd input argument '"+cy1+"' in function 'curveTo' is of type '"+
typeof cy1+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");if(cx2 instanceof Promise)throw new TypeError("3rd input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof cx2)throw new TypeError("3rd input argument '"+cx2+"' in function 'curveTo' is of type '"+typeof cx2+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");
if(cy2 instanceof Promise)throw new TypeError("4th input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof cy2)throw new TypeError("4th input argument '"+cy2+"' in function 'curveTo' is of type '"+typeof cy2+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");if(x2 instanceof Promise)throw new TypeError("5th input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x2)throw new TypeError("5th input argument '"+x2+"' in function 'curveTo' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");if(y2 instanceof Promise)throw new TypeError("6th input argument in function 'curveTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y2)throw new TypeError("6th input argument '"+y2+"' in function 'curveTo' is of type '"+
typeof y2+"'. Expected type 'number'. Function Signature: curveTo(number, number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.curveTo",{b:this.id,cx1:cx1,cy1:cy1,cx2:cx2,cy2:cy2,x2:x2,y2:y2},this.userPriority)};PDFNet.ElementBuilder.prototype.arcTo=function(x,y,width,height,start,extent){if(6!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'arcTo'. Expected 6 arguments. Function Signature: arcTo(number, number, number, number, number, number)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'arcTo' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'arcTo' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'arcTo' is of type '"+
typeof width+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'arcTo' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");
if(start instanceof Promise)throw new TypeError("5th input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof start)throw new TypeError("5th input argument '"+start+"' in function 'arcTo' is of type '"+typeof start+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");if(extent instanceof Promise)throw new TypeError("6th input argument in function 'arcTo' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof extent)throw new TypeError("6th input argument '"+extent+"' in function 'arcTo' is of type '"+typeof extent+"'. Expected type 'number'. Function Signature: arcTo(number, number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.arcTo",{b:this.id,x:x,y:y,width:width,height:height,start:start,extent:extent},this.userPriority)};PDFNet.ElementBuilder.prototype.arcTo2=function(xr,yr,rx,isLargeArc,sweep,endX,endY){if(7!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'arcTo2'. Expected 7 arguments. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number)");if(xr instanceof Promise)throw new TypeError("1st input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof xr)throw new TypeError("1st input argument '"+xr+"' in function 'arcTo2' is of type '"+typeof xr+"'. Expected type 'number'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");
if(yr instanceof Promise)throw new TypeError("2nd input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof yr)throw new TypeError("2nd input argument '"+yr+"' in function 'arcTo2' is of type '"+typeof yr+"'. Expected type 'number'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");if(rx instanceof Promise)throw new TypeError("3rd input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof rx)throw new TypeError("3rd input argument '"+rx+"' in function 'arcTo2' is of type '"+typeof rx+"'. Expected type 'number'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");if(isLargeArc instanceof Promise)throw new TypeError("4th input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof isLargeArc)throw new TypeError("4th input argument '"+isLargeArc+"' in function 'arcTo2' is of type '"+
typeof isLargeArc+"'. Expected type 'boolean'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");if(sweep instanceof Promise)throw new TypeError("5th input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof sweep)throw new TypeError("5th input argument '"+sweep+"' in function 'arcTo2' is of type '"+typeof sweep+"'. Expected type 'boolean'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");
if(endX instanceof Promise)throw new TypeError("6th input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof endX)throw new TypeError("6th input argument '"+endX+"' in function 'arcTo2' is of type '"+typeof endX+"'. Expected type 'number'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");if(endY instanceof Promise)throw new TypeError("7th input argument in function 'arcTo2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof endY)throw new TypeError("7th input argument '"+endY+"' in function 'arcTo2' is of type '"+typeof endY+"'. Expected type 'number'. Function Signature: arcTo2(number, number, number, boolean, boolean, number, number).");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.arcTo2",{b:this.id,xr:xr,yr:yr,rx:rx,isLargeArc:isLargeArc,sweep:sweep,endX:endX,endY:endY},this.userPriority)};PDFNet.ElementBuilder.prototype.closePath=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'closePath'. Expected 0 arguments. Function Signature: closePath()");return PDFNet.messageHandler.sendWithPromise("ElementBuilder.closePath",{b:this.id},this.userPriority)};PDFNet.ElementReader.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("elementReaderCreate",{},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.ElementReader(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ElementReader.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-
1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("ElementReader.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.ElementReader.prototype.beginOnPage=function(page,ctx){"undefined"===typeof ctx&&(ctx=new PDFNet.OCGContext("0"));if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'beginOnPage'. Expected 1 to 2 arguments. Function Signature: beginOnPage(Page, OCGContext)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'beginOnPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: beginOnPage(Page, OCGContext).");
throw new TypeError("1st input argument '"+page+"' in function 'beginOnPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: beginOnPage(Page, OCGContext).");}if(ctx instanceof Promise)throw new TypeError("2nd input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("2nd input argument in function 'beginOnPage' is of type '"+
ctx.name+"'. Expected type 'OCGContext'. Function Signature: beginOnPage(Page, OCGContext).");throw new TypeError("2nd input argument '"+ctx+"' in function 'beginOnPage' is of type '"+typeof ctx+"'. Expected type 'OCGContext'. Function Signature: beginOnPage(Page, OCGContext).");}return PDFNet.messageHandler.sendWithPromise("ElementReader.beginOnPage",{r:this.id,page:page.id,ctx:ctx.id},this.userPriority)};PDFNet.ElementReader.prototype.begin=function(content_stream,resource_dict,ctx){"undefined"===
typeof resource_dict&&(resource_dict=new PDFNet.Obj("0"));"undefined"===typeof ctx&&(ctx=new PDFNet.OCGContext("0"));if(1>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 1 to 3 arguments. Function Signature: begin(Obj, Obj, OCGContext)");if(content_stream instanceof Promise)throw new TypeError("1st input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(content_stream instanceof
PDFNet.Obj)){if("object"==typeof content_stream)throw new TypeError("1st input argument in function 'begin' is of type '"+content_stream.name+"'. Expected type 'Obj'. Function Signature: begin(Obj, Obj, OCGContext).");throw new TypeError("1st input argument '"+content_stream+"' in function 'begin' is of type '"+typeof content_stream+"'. Expected type 'Obj'. Function Signature: begin(Obj, Obj, OCGContext).");}if(resource_dict instanceof Promise)throw new TypeError("2nd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(resource_dict instanceof PDFNet.Obj)){if("object"==typeof resource_dict)throw new TypeError("2nd input argument in function 'begin' is of type '"+resource_dict.name+"'. Expected type 'Obj'. Function Signature: begin(Obj, Obj, OCGContext).");throw new TypeError("2nd input argument '"+resource_dict+"' in function 'begin' is of type '"+typeof resource_dict+"'. Expected type 'Obj'. Function Signature: begin(Obj, Obj, OCGContext).");}if(ctx instanceof Promise)throw new TypeError("3rd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("3rd input argument in function 'begin' is of type '"+ctx.name+"'. Expected type 'OCGContext'. Function Signature: begin(Obj, Obj, OCGContext).");throw new TypeError("3rd input argument '"+ctx+"' in function 'begin' is of type '"+typeof ctx+"'. Expected type 'OCGContext'. Function Signature: begin(Obj, Obj, OCGContext).");}return PDFNet.messageHandler.sendWithPromise("ElementReader.begin",{r:this.id,content_stream:content_stream.id,
resource_dict:resource_dict.id,ctx:ctx.id},this.userPriority)};PDFNet.ElementReader.prototype.appendResource=function(res){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'appendResource'. Expected 1 argument. Function Signature: appendResource(Obj)");if(res instanceof Promise)throw new TypeError("1st input argument in function 'appendResource' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(res instanceof PDFNet.Obj)){if("object"==
typeof res)throw new TypeError("1st input argument in function 'appendResource' is of type '"+res.name+"'. Expected type 'Obj'. Function Signature: appendResource(Obj).");throw new TypeError("1st input argument '"+res+"' in function 'appendResource' is of type '"+typeof res+"'. Expected type 'Obj'. Function Signature: appendResource(Obj).");}return PDFNet.messageHandler.sendWithPromise("ElementReader.appendResource",{r:this.id,res:res.id},this.userPriority)};PDFNet.ElementReader.prototype.next=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'next'. Expected 0 arguments. Function Signature: next()");return PDFNet.messageHandler.sendWithPromise("ElementReader.next",{r:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementReader.prototype.current=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'current'. Expected 0 arguments. Function Signature: current()");
return PDFNet.messageHandler.sendWithPromise("ElementReader.current",{r:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Element(id)})};PDFNet.ElementReader.prototype.formBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'formBegin'. Expected 0 arguments. Function Signature: formBegin()");return PDFNet.messageHandler.sendWithPromise("ElementReader.formBegin",{r:this.id},this.userPriority)};PDFNet.ElementReader.prototype.patternBegin=
function(fill_pattern,reset_ctm_tfm){"undefined"===typeof reset_ctm_tfm&&(reset_ctm_tfm=!1);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'patternBegin'. Expected 1 to 2 arguments. Function Signature: patternBegin(boolean, boolean)");if(fill_pattern instanceof Promise)throw new TypeError("1st input argument in function 'patternBegin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof fill_pattern)throw new TypeError("1st input argument '"+
fill_pattern+"' in function 'patternBegin' is of type '"+typeof fill_pattern+"'. Expected type 'boolean'. Function Signature: patternBegin(boolean, boolean).");if(reset_ctm_tfm instanceof Promise)throw new TypeError("2nd input argument in function 'patternBegin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof reset_ctm_tfm)throw new TypeError("2nd input argument '"+reset_ctm_tfm+"' in function 'patternBegin' is of type '"+typeof reset_ctm_tfm+
"'. Expected type 'boolean'. Function Signature: patternBegin(boolean, boolean).");return PDFNet.messageHandler.sendWithPromise("ElementReader.patternBegin",{r:this.id,fill_pattern:fill_pattern,reset_ctm_tfm:reset_ctm_tfm},this.userPriority)};PDFNet.ElementReader.prototype.type3FontBegin=function(char_data,resource_dict){"undefined"===typeof resource_dict&&(resource_dict=new PDFNet.Obj("0"));if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'type3FontBegin'. Expected 1 to 2 arguments. Function Signature: type3FontBegin(CharData, Obj)");
if(char_data instanceof Promise)throw new TypeError("1st input argument in function 'type3FontBegin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(char_data instanceof PDFNet.CharData)&&"CharData"!=char_data.name){if("object"==typeof char_data)throw new TypeError("1st input argument in function 'type3FontBegin' is of type '"+char_data.name+"'. Expected type 'CharData'. Function Signature: type3FontBegin(CharData, Obj).");throw new TypeError("1st input argument '"+
char_data+"' in function 'type3FontBegin' is of type '"+typeof char_data+"'. Expected type 'CharData'. Function Signature: type3FontBegin(CharData, Obj).");}if(resource_dict instanceof Promise)throw new TypeError("2nd input argument in function 'type3FontBegin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(resource_dict instanceof PDFNet.Obj)){if("object"==typeof resource_dict)throw new TypeError("2nd input argument in function 'type3FontBegin' is of type '"+
resource_dict.name+"'. Expected type 'Obj'. Function Signature: type3FontBegin(CharData, Obj).");throw new TypeError("2nd input argument '"+resource_dict+"' in function 'type3FontBegin' is of type '"+typeof resource_dict+"'. Expected type 'Obj'. Function Signature: type3FontBegin(CharData, Obj).");}if("undefined"!=typeof char_data.yieldFunction)throw Error("Function '"+char_data.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'type3FontBegin'. Perhaps a yield statement is required for '"+
char_data.yieldFunction+"'?");var me=this;this.yieldFunction="ElementReader.type3FontBegin";return PDFNet.messageHandler.sendWithPromise("ElementReader.type3FontBegin",{r:this.id,char_data:char_data,resource_dict:resource_dict.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.char_data,me)})};PDFNet.ElementReader.prototype.end=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'end'. Expected 0 arguments. Function Signature: end()");
return PDFNet.messageHandler.sendWithPromise("ElementReader.end",{r:this.id},this.userPriority)};PDFNet.ElementReader.prototype.getChangesIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getChangesIterator'. Expected 0 arguments. Function Signature: getChangesIterator()");return PDFNet.messageHandler.sendWithPromise("ElementReader.getChangesIterator",{r:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ElementReader.prototype.isChanged=function(attrib){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isChanged'. Expected 1 argument. Function Signature: isChanged(number)");if(attrib instanceof Promise)throw new TypeError("1st input argument in function 'isChanged' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof attrib)throw new TypeError("1st input argument '"+
attrib+"' in function 'isChanged' is of type '"+typeof attrib+"'. Expected type 'number'. Function Signature: isChanged(number).");return PDFNet.messageHandler.sendWithPromise("ElementReader.isChanged",{r:this.id,attrib:attrib},this.userPriority)};PDFNet.ElementReader.prototype.clearChangeList=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'clearChangeList'. Expected 0 arguments. Function Signature: clearChangeList()");return PDFNet.messageHandler.sendWithPromise("ElementReader.clearChangeList",
{r:this.id},this.userPriority)};PDFNet.ElementReader.prototype.getFont=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFont'. Expected 1 argument. Function Signature: getFont(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'getFont' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'getFont' is of type '"+
typeof name+"'. Expected type 'string'. Function Signature: getFont(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getFont",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementReader.prototype.getXObject=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getXObject'. Expected 1 argument. Function Signature: getXObject(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'getXObject' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'getXObject' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getXObject(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getXObject",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementReader.prototype.getShading=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getShading'. Expected 1 argument. Function Signature: getShading(string)");
if(name instanceof Promise)throw new TypeError("1st input argument in function 'getShading' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'getShading' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getShading(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getShading",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.ElementReader.prototype.getColorSpace=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorSpace'. Expected 1 argument. Function Signature: getColorSpace(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'getColorSpace' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+
name+"' in function 'getColorSpace' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getColorSpace(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getColorSpace",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementReader.prototype.getPattern=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPattern'. Expected 1 argument. Function Signature: getPattern(string)");
if(name instanceof Promise)throw new TypeError("1st input argument in function 'getPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'getPattern' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getPattern(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getPattern",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.ElementReader.prototype.getExtGState=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getExtGState'. Expected 1 argument. Function Signature: getExtGState(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'getExtGState' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+
name+"' in function 'getExtGState' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: getExtGState(string).");return PDFNet.messageHandler.sendWithPromise("ElementReader.getExtGState",{r:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementWriter.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");
return PDFNet.messageHandler.sendWithPromise("elementWriterCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ElementWriter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ElementWriter.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("ElementWriter.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.ElementWriter.prototype.beginOnPage=function(page,placement,
page_coord_sys,compress){"undefined"===typeof placement&&(placement=PDFNet.ElementWriter.WriteMode.e_overlay);"undefined"===typeof page_coord_sys&&(page_coord_sys=!0);"undefined"===typeof compress&&(compress=!0);if(1>arguments.length||4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'beginOnPage'. Expected 1 to 4 arguments. Function Signature: beginOnPage(Page, number, boolean, boolean)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'beginOnPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: beginOnPage(Page, number, boolean, boolean).");throw new TypeError("1st input argument '"+page+"' in function 'beginOnPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: beginOnPage(Page, number, boolean, boolean).");}if(placement instanceof Promise)throw new TypeError("2nd input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof placement)throw new TypeError("2nd input argument '"+placement+"' in function 'beginOnPage' is of type '"+typeof placement+"'. Expected type 'number'. Function Signature: beginOnPage(Page, number, boolean, boolean).");if(page_coord_sys instanceof Promise)throw new TypeError("3rd input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof page_coord_sys)throw new TypeError("3rd input argument '"+
page_coord_sys+"' in function 'beginOnPage' is of type '"+typeof page_coord_sys+"'. Expected type 'boolean'. Function Signature: beginOnPage(Page, number, boolean, boolean).");if(compress instanceof Promise)throw new TypeError("4th input argument in function 'beginOnPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof compress)throw new TypeError("4th input argument '"+compress+"' in function 'beginOnPage' is of type '"+typeof compress+"'. Expected type 'boolean'. Function Signature: beginOnPage(Page, number, boolean, boolean).");
return PDFNet.messageHandler.sendWithPromise("ElementWriter.beginOnPage",{w:this.id,page:page.id,placement:placement,page_coord_sys:page_coord_sys,compress:compress},this.userPriority)};PDFNet.ElementWriter.prototype.begin=function(doc,compress){"undefined"===typeof compress&&(compress=!0);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 1 to 2 arguments. Function Signature: begin(SDFDoc, boolean)");if(doc instanceof
Promise)throw new TypeError("1st input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'begin' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: begin(SDFDoc, boolean).");throw new TypeError("1st input argument '"+doc+"' in function 'begin' is of type '"+
typeof doc+"'. Expected type 'SDFDoc'. Function Signature: begin(SDFDoc, boolean).");}if(compress instanceof Promise)throw new TypeError("2nd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof compress)throw new TypeError("2nd input argument '"+compress+"' in function 'begin' is of type '"+typeof compress+"'. Expected type 'boolean'. Function Signature: begin(SDFDoc, boolean).");return PDFNet.messageHandler.sendWithPromise("ElementWriter.begin",
{w:this.id,doc:doc.id,compress:compress},this.userPriority)};PDFNet.ElementWriter.prototype.beginOnObj=function(stream_obj_to_update,compress){"undefined"===typeof compress&&(compress=!0);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'beginOnObj'. Expected 1 to 2 arguments. Function Signature: beginOnObj(Obj, boolean)");if(stream_obj_to_update instanceof Promise)throw new TypeError("1st input argument in function 'beginOnObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(stream_obj_to_update instanceof PDFNet.Obj)){if("object"==typeof stream_obj_to_update)throw new TypeError("1st input argument in function 'beginOnObj' is of type '"+stream_obj_to_update.name+"'. Expected type 'Obj'. Function Signature: beginOnObj(Obj, boolean).");throw new TypeError("1st input argument '"+stream_obj_to_update+"' in function 'beginOnObj' is of type '"+typeof stream_obj_to_update+"'. Expected type 'Obj'. Function Signature: beginOnObj(Obj, boolean).");}if(compress instanceof Promise)throw new TypeError("2nd input argument in function 'beginOnObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof compress)throw new TypeError("2nd input argument '"+compress+"' in function 'beginOnObj' is of type '"+typeof compress+"'. Expected type 'boolean'. Function Signature: beginOnObj(Obj, boolean).");return PDFNet.messageHandler.sendWithPromise("ElementWriter.beginOnObj",{w:this.id,stream_obj_to_update:stream_obj_to_update.id,compress:compress},this.userPriority)};PDFNet.ElementWriter.prototype.end=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'end'. Expected 0 arguments. Function Signature: end()");
return PDFNet.messageHandler.sendWithPromise("ElementWriter.end",{w:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ElementWriter.prototype.writeElement=function(element){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeElement'. Expected 1 argument. Function Signature: writeElement(Element)");if(element instanceof Promise)throw new TypeError("1st input argument in function 'writeElement' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(element instanceof PDFNet.Element)){if("object"==typeof element)throw new TypeError("1st input argument in function 'writeElement' is of type '"+element.name+"'. Expected type 'Element'. Function Signature: writeElement(Element).");throw new TypeError("1st input argument '"+element+"' in function 'writeElement' is of type '"+typeof element+"'. Expected type 'Element'. Function Signature: writeElement(Element).");}return PDFNet.messageHandler.sendWithPromise("ElementWriter.writeElement",{w:this.id,
element:element.id},this.userPriority)};PDFNet.ElementWriter.prototype.writePlacedElement=function(element){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writePlacedElement'. Expected 1 argument. Function Signature: writePlacedElement(Element)");if(element instanceof Promise)throw new TypeError("1st input argument in function 'writePlacedElement' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(element instanceof
PDFNet.Element)){if("object"==typeof element)throw new TypeError("1st input argument in function 'writePlacedElement' is of type '"+element.name+"'. Expected type 'Element'. Function Signature: writePlacedElement(Element).");throw new TypeError("1st input argument '"+element+"' in function 'writePlacedElement' is of type '"+typeof element+"'. Expected type 'Element'. Function Signature: writePlacedElement(Element).");}return PDFNet.messageHandler.sendWithPromise("ElementWriter.writePlacedElement",
{w:this.id,element:element.id},this.userPriority)};PDFNet.ElementWriter.prototype.flush=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flush'. Expected 0 arguments. Function Signature: flush()");return PDFNet.messageHandler.sendWithPromise("ElementWriter.flush",{w:this.id},this.userPriority)};PDFNet.ElementWriter.prototype.writeBuffer=function(data,data_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeBuffer'. Expected 2 arguments. Function Signature: writeBuffer(string, number)");
if(data instanceof Promise)throw new TypeError("1st input argument in function 'writeBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof data)throw new TypeError("1st input argument '"+data+"' in function 'writeBuffer' is of type '"+typeof data+"'. Expected type 'string'. Function Signature: writeBuffer(string, number).");if(data_sz instanceof Promise)throw new TypeError("2nd input argument in function 'writeBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof data_sz)throw new TypeError("2nd input argument '"+data_sz+"' in function 'writeBuffer' is of type '"+typeof data_sz+"'. Expected type 'number'. Function Signature: writeBuffer(string, number).");return PDFNet.messageHandler.sendWithPromise("ElementWriter.writeBuffer",{w:this.id,data:data,data_sz:data_sz},this.userPriority)};PDFNet.ElementWriter.prototype.writeString=function(str){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'writeString'. Expected 1 argument. Function Signature: writeString(string)");
if(str instanceof Promise)throw new TypeError("1st input argument in function 'writeString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof str)throw new TypeError("1st input argument '"+str+"' in function 'writeString' is of type '"+typeof str+"'. Expected type 'string'. Function Signature: writeString(string).");return PDFNet.messageHandler.sendWithPromise("ElementWriter.writeString",{w:this.id,str:str},this.userPriority)};PDFNet.FileSpec.create=
function(doc,path,embed){"undefined"===typeof embed&&(embed=!0);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 to 3 arguments. Function Signature: create(SDFDoc, string, boolean)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||
doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, string, boolean).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, string, boolean).");}if(path instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof path)throw new TypeError("2nd input argument '"+path+"' in function 'create' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: create(SDFDoc, string, boolean).");if(embed instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof embed)throw new TypeError("3rd input argument '"+embed+"' in function 'create' is of type '"+typeof embed+
"'. Expected type 'boolean'. Function Signature: create(SDFDoc, string, boolean).");return PDFNet.messageHandler.sendWithPromise("fileSpecCreate",{doc:doc.id,path:path,embed:embed},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileSpec(id)})};PDFNet.FileSpec.createURL=function(doc,url){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createURL'. Expected 2 arguments. Function Signature: createURL(SDFDoc, string)");if(doc instanceof
Promise)throw new TypeError("1st input argument in function 'createURL' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createURL' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createURL(SDFDoc, string).");throw new TypeError("1st input argument '"+doc+"' in function 'createURL' is of type '"+
typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createURL(SDFDoc, string).");}if(url instanceof Promise)throw new TypeError("2nd input argument in function 'createURL' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof url)throw new TypeError("2nd input argument '"+url+"' in function 'createURL' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: createURL(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("fileSpecCreateURL",
{doc:doc.id,url:url},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileSpec(id)})};PDFNet.FileSpec.createFromObj=function(f){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(f instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(f instanceof
PDFNet.Obj)){if("object"==typeof f)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+f.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+f+"' in function 'createFromObj' is of type '"+typeof f+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("fileSpecCreateFromObj",{f:f.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileSpec(id)})};
PDFNet.FileSpec.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("FileSpec.copy",{d:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.FileSpec(id)})};PDFNet.FileSpec.prototype.compare=function(d){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(FileSpec)");
if(d instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.FileSpec)){if("object"==typeof d)throw new TypeError("1st input argument in function 'compare' is of type '"+d.name+"'. Expected type 'FileSpec'. Function Signature: compare(FileSpec).");throw new TypeError("1st input argument '"+d+"' in function 'compare' is of type '"+typeof d+"'. Expected type 'FileSpec'. Function Signature: compare(FileSpec).");
}return PDFNet.messageHandler.sendWithPromise("FileSpec.compare",{fs:this.id,d:d.id},this.userPriority)};PDFNet.FileSpec.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("FileSpec.isValid",{fs:this.id},this.userPriority)};PDFNet.FileSpec.prototype.export=function(save_as){"undefined"===typeof save_as&&(save_as="");if(1<
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'export'. Expected at most 1 arguments. Function Signature: export(string)");if(save_as instanceof Promise)throw new TypeError("1st input argument in function 'export' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof save_as)throw new TypeError("1st input argument '"+save_as+"' in function 'export' is of type '"+typeof save_as+"'. Expected type 'string'. Function Signature: export(string).");
return PDFNet.messageHandler.sendWithPromise("FileSpec.export",{fs:this.id,save_as:save_as},this.userPriority)};PDFNet.FileSpec.prototype.getFileData=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFileData'. Expected 0 arguments. Function Signature: getFileData()");return PDFNet.messageHandler.sendWithPromise("FileSpec.getFileData",{fs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.FileSpec.prototype.getFilePath=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFilePath'. Expected 0 arguments. Function Signature: getFilePath()");return PDFNet.messageHandler.sendWithPromise("FileSpec.getFilePath",{fs:this.id},this.userPriority)};PDFNet.FileSpec.prototype.setDesc=function(desc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDesc'. Expected 1 argument. Function Signature: setDesc(string)");if(desc instanceof
Promise)throw new TypeError("1st input argument in function 'setDesc' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof desc)throw new TypeError("1st input argument '"+desc+"' in function 'setDesc' is of type '"+typeof desc+"'. Expected type 'string'. Function Signature: setDesc(string).");return PDFNet.messageHandler.sendWithPromise("FileSpec.setDesc",{fs:this.id,desc:desc},this.userPriority)};PDFNet.FileSpec.prototype.getSDFObj=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("FileSpec.getSDFObj",{fs:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Flattener.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");
return PDFNet.messageHandler.sendWithPromise("flattenerCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Flattener(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Flattener.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=
i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Flattener.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Flattener.prototype.setDPI=function(dpi){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setDPI'. Expected 1 argument. Function Signature: setDPI(number)");if(dpi instanceof Promise)throw new TypeError("1st input argument in function 'setDPI' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dpi)throw new TypeError("1st input argument '"+dpi+"' in function 'setDPI' is of type '"+typeof dpi+"'. Expected type 'number'. Function Signature: setDPI(number).");return PDFNet.messageHandler.sendWithPromise("Flattener.setDPI",
{flattener:this.id,dpi:dpi},this.userPriority)};PDFNet.Flattener.prototype.setThreshold=function(threshold){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setThreshold'. Expected 1 argument. Function Signature: setThreshold(number)");if(threshold instanceof Promise)throw new TypeError("1st input argument in function 'setThreshold' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof threshold)throw new TypeError("1st input argument '"+
threshold+"' in function 'setThreshold' is of type '"+typeof threshold+"'. Expected type 'number'. Function Signature: setThreshold(number).");return PDFNet.messageHandler.sendWithPromise("Flattener.setThreshold",{flattener:this.id,threshold:threshold},this.userPriority)};PDFNet.Flattener.prototype.setMaximumImagePixels=function(max_pixels){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMaximumImagePixels'. Expected 1 argument. Function Signature: setMaximumImagePixels(number)");
if(max_pixels instanceof Promise)throw new TypeError("1st input argument in function 'setMaximumImagePixels' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof max_pixels)throw new TypeError("1st input argument '"+max_pixels+"' in function 'setMaximumImagePixels' is of type '"+typeof max_pixels+"'. Expected type 'number'. Function Signature: setMaximumImagePixels(number).");return PDFNet.messageHandler.sendWithPromise("Flattener.setMaximumImagePixels",
{flattener:this.id,max_pixels:max_pixels},this.userPriority)};PDFNet.Flattener.prototype.setPreferJPG=function(jpg){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPreferJPG'. Expected 1 argument. Function Signature: setPreferJPG(boolean)");if(jpg instanceof Promise)throw new TypeError("1st input argument in function 'setPreferJPG' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof jpg)throw new TypeError("1st input argument '"+
jpg+"' in function 'setPreferJPG' is of type '"+typeof jpg+"'. Expected type 'boolean'. Function Signature: setPreferJPG(boolean).");return PDFNet.messageHandler.sendWithPromise("Flattener.setPreferJPG",{flattener:this.id,jpg:jpg},this.userPriority)};PDFNet.Flattener.prototype.setJPGQuality=function(quality){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setJPGQuality'. Expected 1 argument. Function Signature: setJPGQuality(number)");if(quality instanceof
Promise)throw new TypeError("1st input argument in function 'setJPGQuality' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof quality)throw new TypeError("1st input argument '"+quality+"' in function 'setJPGQuality' is of type '"+typeof quality+"'. Expected type 'number'. Function Signature: setJPGQuality(number).");return PDFNet.messageHandler.sendWithPromise("Flattener.setJPGQuality",{flattener:this.id,quality:quality},this.userPriority)};PDFNet.Flattener.prototype.setPathHinting=
function(hinting){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathHinting'. Expected 1 argument. Function Signature: setPathHinting(boolean)");if(hinting instanceof Promise)throw new TypeError("1st input argument in function 'setPathHinting' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof hinting)throw new TypeError("1st input argument '"+hinting+"' in function 'setPathHinting' is of type '"+
typeof hinting+"'. Expected type 'boolean'. Function Signature: setPathHinting(boolean).");return PDFNet.messageHandler.sendWithPromise("Flattener.setPathHinting",{flattener:this.id,hinting:hinting},this.userPriority)};PDFNet.Flattener.prototype.process=function(doc,mode){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'process'. Expected 2 arguments. Function Signature: process(PDFDoc, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'process' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'process' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: process(PDFDoc, number).");throw new TypeError("1st input argument '"+doc+"' in function 'process' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: process(PDFDoc, number).");}if(mode instanceof Promise)throw new TypeError("2nd input argument in function 'process' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof mode)throw new TypeError("2nd input argument '"+mode+"' in function 'process' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: process(PDFDoc, number).");return PDFNet.messageHandler.sendWithPromise("Flattener.process",{flattener:this.id,doc:doc.id,mode:mode},this.userPriority)};PDFNet.Flattener.prototype.processPage=function(page,mode){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'processPage'. Expected 2 arguments. Function Signature: processPage(Page, number)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'processPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'processPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: processPage(Page, number).");throw new TypeError("1st input argument '"+page+"' in function 'processPage' is of type '"+typeof page+
"'. Expected type 'Page'. Function Signature: processPage(Page, number).");}if(mode instanceof Promise)throw new TypeError("2nd input argument in function 'processPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("2nd input argument '"+mode+"' in function 'processPage' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: processPage(Page, number).");return PDFNet.messageHandler.sendWithPromise("Flattener.processPage",
{flattener:this.id,page:page.id,mode:mode},this.userPriority)};PDFNet.Font.createFromObj=function(font_dict){"undefined"===typeof font_dict&&(font_dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(font_dict instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(font_dict instanceof PDFNet.Obj)){if("object"==typeof font_dict)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+font_dict.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+font_dict+"' in function 'createFromObj' is of type '"+typeof font_dict+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("fontCreateFromObj",{font_dict:font_dict.id},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.create=function(doc,type){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number).");}if(type instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'create' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: create(SDFDoc, number).");return PDFNet.messageHandler.sendWithPromise("fontCreate",{doc:doc.id,type:type},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.createFromFontDescriptor=function(doc,from,char_set){if(3!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromFontDescriptor'. Expected 3 arguments. Function Signature: createFromFontDescriptor(SDFDoc, Font, string)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromFontDescriptor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromFontDescriptor' is of type '"+
doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromFontDescriptor(SDFDoc, Font, string).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromFontDescriptor' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromFontDescriptor(SDFDoc, Font, string).");}if(from instanceof Promise)throw new TypeError("2nd input argument in function 'createFromFontDescriptor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(from instanceof PDFNet.Font)){if("object"==typeof from)throw new TypeError("2nd input argument in function 'createFromFontDescriptor' is of type '"+from.name+"'. Expected type 'Font'. Function Signature: createFromFontDescriptor(SDFDoc, Font, string).");throw new TypeError("2nd input argument '"+from+"' in function 'createFromFontDescriptor' is of type '"+typeof from+"'. Expected type 'Font'. Function Signature: createFromFontDescriptor(SDFDoc, Font, string).");}if(char_set instanceof Promise)throw new TypeError("3rd input argument in function 'createFromFontDescriptor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof char_set)throw new TypeError("3rd input argument '"+char_set+"' in function 'createFromFontDescriptor' is of type '"+typeof char_set+"'. Expected type 'string'. Function Signature: createFromFontDescriptor(SDFDoc, Font, string).");return PDFNet.messageHandler.sendWithPromise("fontCreateFromFontDescriptor",{doc:doc.id,from:from.id,char_set:char_set},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});return id})};
PDFNet.Font.createFromName=function(doc,name,char_set){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromName'. Expected 3 arguments. Function Signature: createFromName(SDFDoc, string, string)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromName' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof
PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromName' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromName(SDFDoc, string, string).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromName' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromName(SDFDoc, string, string).");}if(name instanceof Promise)throw new TypeError("2nd input argument in function 'createFromName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'createFromName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: createFromName(SDFDoc, string, string).");if(char_set instanceof Promise)throw new TypeError("3rd input argument in function 'createFromName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof char_set)throw new TypeError("3rd input argument '"+char_set+"' in function 'createFromName' is of type '"+
typeof char_set+"'. Expected type 'string'. Function Signature: createFromName(SDFDoc, string, string).");return PDFNet.messageHandler.sendWithPromise("fontCreateFromName",{doc:doc.id,name:name,char_set:char_set},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.createAndEmbed=function(doc,type){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createAndEmbed'. Expected 2 arguments. Function Signature: createAndEmbed(SDFDoc, number)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createAndEmbed' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createAndEmbed' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createAndEmbed(SDFDoc, number).");throw new TypeError("1st input argument '"+
doc+"' in function 'createAndEmbed' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createAndEmbed(SDFDoc, number).");}if(type instanceof Promise)throw new TypeError("2nd input argument in function 'createAndEmbed' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'createAndEmbed' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: createAndEmbed(SDFDoc, number).");
return PDFNet.messageHandler.sendWithPromise("fontCreateAndEmbed",{doc:doc.id,type:type},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Font)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(right instanceof PDFNet.Font)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'Font'. Function Signature: assign(Font).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'Font'. Function Signature: assign(Font).");}return PDFNet.messageHandler.sendWithPromise("Font.assign",{left:this.id,right:right.id},this.userPriority)};PDFNet.Font.prototype.destroy=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("Font.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Font.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Font.getType",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isSimple=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isSimple'. Expected 0 arguments. Function Signature: isSimple()");return PDFNet.messageHandler.sendWithPromise("Font.isSimple",{font:this.id},this.userPriority)};PDFNet.Font.getTypeFromObj=function(font_dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTypeFromObj'. Expected 1 argument. Function Signature: getTypeFromObj(Obj)");if(font_dict instanceof Promise)throw new TypeError("1st input argument in function 'getTypeFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(font_dict instanceof PDFNet.Obj)){if("object"==typeof font_dict)throw new TypeError("1st input argument in function 'getTypeFromObj' is of type '"+font_dict.name+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");throw new TypeError("1st input argument '"+font_dict+"' in function 'getTypeFromObj' is of type '"+typeof font_dict+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("fontGetTypeFromObj",{font_dict:font_dict.id},
this.userPriority)};PDFNet.Font.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Font.getSDFObj",{font:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Font.prototype.getDescriptor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDescriptor'. Expected 0 arguments. Function Signature: getDescriptor()");
return PDFNet.messageHandler.sendWithPromise("Font.getDescriptor",{font:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Font.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");return PDFNet.messageHandler.sendWithPromise("Font.getName",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getFamilyName=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFamilyName'. Expected 0 arguments. Function Signature: getFamilyName()");return PDFNet.messageHandler.sendWithPromise("Font.getFamilyName",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isFixedWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isFixedWidth'. Expected 0 arguments. Function Signature: isFixedWidth()");return PDFNet.messageHandler.sendWithPromise("Font.isFixedWidth",
{font:this.id},this.userPriority)};PDFNet.Font.prototype.isSerif=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isSerif'. Expected 0 arguments. Function Signature: isSerif()");return PDFNet.messageHandler.sendWithPromise("Font.isSerif",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isSymbolic=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isSymbolic'. Expected 0 arguments. Function Signature: isSymbolic()");
return PDFNet.messageHandler.sendWithPromise("Font.isSymbolic",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isItalic=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isItalic'. Expected 0 arguments. Function Signature: isItalic()");return PDFNet.messageHandler.sendWithPromise("Font.isItalic",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isAllCap=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isAllCap'. Expected 0 arguments. Function Signature: isAllCap()");
return PDFNet.messageHandler.sendWithPromise("Font.isAllCap",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isForceBold=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isForceBold'. Expected 0 arguments. Function Signature: isForceBold()");return PDFNet.messageHandler.sendWithPromise("Font.isForceBold",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isHorizontalMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isHorizontalMode'. Expected 0 arguments. Function Signature: isHorizontalMode()");return PDFNet.messageHandler.sendWithPromise("Font.isHorizontalMode",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getWidth=function(char_code){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWidth'. Expected 1 argument. Function Signature: getWidth(number)");if(char_code instanceof Promise)throw new TypeError("1st input argument in function 'getWidth' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof char_code)throw new TypeError("1st input argument '"+char_code+"' in function 'getWidth' is of type '"+typeof char_code+"'. Expected type 'number'. Function Signature: getWidth(number).");return PDFNet.messageHandler.sendWithPromise("Font.getWidth",{font:this.id,char_code:char_code},this.userPriority)};PDFNet.Font.prototype.getMaxWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMaxWidth'. Expected 0 arguments. Function Signature: getMaxWidth()");
return PDFNet.messageHandler.sendWithPromise("Font.getMaxWidth",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getMissingWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMissingWidth'. Expected 0 arguments. Function Signature: getMissingWidth()");return PDFNet.messageHandler.sendWithPromise("Font.getMissingWidth",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getCharCodeIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getCharCodeIterator'. Expected 0 arguments. Function Signature: getCharCodeIterator()");return PDFNet.messageHandler.sendWithPromise("Font.getCharCodeIterator",{font:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.prototype.getEncoding=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEncoding'. Expected 0 arguments. Function Signature: getEncoding()");
return PDFNet.messageHandler.sendWithPromise("Font.getEncoding",{font:this.id},this.userPriority)};PDFNet.Font.prototype.isEmbedded=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isEmbedded'. Expected 0 arguments. Function Signature: isEmbedded()");return PDFNet.messageHandler.sendWithPromise("Font.isEmbedded",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getEmbeddedFontName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getEmbeddedFontName'. Expected 0 arguments. Function Signature: getEmbeddedFontName()");return PDFNet.messageHandler.sendWithPromise("Font.getEmbeddedFontName",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getEmbeddedFont=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEmbeddedFont'. Expected 0 arguments. Function Signature: getEmbeddedFont()");return PDFNet.messageHandler.sendWithPromise("Font.getEmbeddedFont",
{font:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Font.prototype.getEmbeddedFontBufSize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEmbeddedFontBufSize'. Expected 0 arguments. Function Signature: getEmbeddedFontBufSize()");return PDFNet.messageHandler.sendWithPromise("Font.getEmbeddedFontBufSize",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getUnitsPerEm=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getUnitsPerEm'. Expected 0 arguments. Function Signature: getUnitsPerEm()");return PDFNet.messageHandler.sendWithPromise("Font.getUnitsPerEm",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");return PDFNet.messageHandler.sendWithPromise("Font.getBBox",
{font:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Font.prototype.getAscent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAscent'. Expected 0 arguments. Function Signature: getAscent()");return PDFNet.messageHandler.sendWithPromise("Font.getAscent",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getDescent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getDescent'. Expected 0 arguments. Function Signature: getDescent()");return PDFNet.messageHandler.sendWithPromise("Font.getDescent",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getStandardType1FontType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStandardType1FontType'. Expected 0 arguments. Function Signature: getStandardType1FontType()");return PDFNet.messageHandler.sendWithPromise("Font.getStandardType1FontType",
{font:this.id},this.userPriority)};PDFNet.Font.prototype.isCFF=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isCFF'. Expected 0 arguments. Function Signature: isCFF()");return PDFNet.messageHandler.sendWithPromise("Font.isCFF",{font:this.id},this.userPriority)};PDFNet.Font.prototype.getType3FontMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType3FontMatrix'. Expected 0 arguments. Function Signature: getType3FontMatrix()");
return PDFNet.messageHandler.sendWithPromise("Font.getType3FontMatrix",{font:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.Font.prototype.getType3GlyphStream=function(char_code){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType3GlyphStream'. Expected 1 argument. Function Signature: getType3GlyphStream(number)");if(char_code instanceof Promise)throw new TypeError("1st input argument in function 'getType3GlyphStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof char_code)throw new TypeError("1st input argument '"+char_code+"' in function 'getType3GlyphStream' is of type '"+typeof char_code+"'. Expected type 'number'. Function Signature: getType3GlyphStream(number).");return PDFNet.messageHandler.sendWithPromise("Font.getType3GlyphStream",{font:this.id,char_code:char_code},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Font.prototype.getVerticalAdvance=function(char_code){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getVerticalAdvance'. Expected 1 argument. Function Signature: getVerticalAdvance(number)");if(char_code instanceof Promise)throw new TypeError("1st input argument in function 'getVerticalAdvance' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof char_code)throw new TypeError("1st input argument '"+char_code+"' in function 'getVerticalAdvance' is of type '"+typeof char_code+"'. Expected type 'number'. Function Signature: getVerticalAdvance(number).");
return PDFNet.messageHandler.sendWithPromise("Font.getVerticalAdvance",{font:this.id,char_code:char_code},this.userPriority)};PDFNet.Font.prototype.getDescendant=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDescendant'. Expected 0 arguments. Function Signature: getDescendant()");return PDFNet.messageHandler.sendWithPromise("Font.getDescendant",{font:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Font(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Font.prototype.mapToCID=function(char_code){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'mapToCID'. Expected 1 argument. Function Signature: mapToCID(number)");if(char_code instanceof Promise)throw new TypeError("1st input argument in function 'mapToCID' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof char_code)throw new TypeError("1st input argument '"+
char_code+"' in function 'mapToCID' is of type '"+typeof char_code+"'. Expected type 'number'. Function Signature: mapToCID(number).");return PDFNet.messageHandler.sendWithPromise("Font.mapToCID",{font:this.id,char_code:char_code},this.userPriority)};PDFNet.Font.prototype.mapToCID2=function(char_data,char_data_avail){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'mapToCID2'. Expected 2 arguments. Function Signature: mapToCID2(number, number)");if(char_data instanceof
Promise)throw new TypeError("1st input argument in function 'mapToCID2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof char_data)throw new TypeError("1st input argument '"+char_data+"' in function 'mapToCID2' is of type '"+typeof char_data+"'. Expected type 'number'. Function Signature: mapToCID2(number, number).");if(char_data_avail instanceof Promise)throw new TypeError("2nd input argument in function 'mapToCID2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof char_data_avail)throw new TypeError("2nd input argument '"+char_data_avail+"' in function 'mapToCID2' is of type '"+typeof char_data_avail+"'. Expected type 'number'. Function Signature: mapToCID2(number, number).");return PDFNet.messageHandler.sendWithPromise("Font.mapToCID2",{font:this.id,char_data:char_data,char_data_avail:char_data_avail},this.userPriority)};PDFNet.Function.create=function(funct_dict){"undefined"===typeof funct_dict&&(funct_dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");if(funct_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(funct_dict instanceof PDFNet.Obj)){if("object"==typeof funct_dict)throw new TypeError("1st input argument in function 'create' is of type '"+funct_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");
throw new TypeError("1st input argument '"+funct_dict+"' in function 'create' is of type '"+typeof funct_dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("functionCreate",{funct_dict:funct_dict.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Function(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Function.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Function)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.Function)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'Function'. Function Signature: assign(Function).");throw new TypeError("1st input argument '"+
right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'Function'. Function Signature: assign(Function).");}return PDFNet.messageHandler.sendWithPromise("Function.assign",{left:this.id,right:right.id},this.userPriority)};PDFNet.Function.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Function.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Function.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Function.getType",{f:this.id},this.userPriority)};PDFNet.Function.prototype.getInputCardinality=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getInputCardinality'. Expected 0 arguments. Function Signature: getInputCardinality()");return PDFNet.messageHandler.sendWithPromise("Function.getInputCardinality",
{f:this.id},this.userPriority)};PDFNet.Function.prototype.getOutputCardinality=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOutputCardinality'. Expected 0 arguments. Function Signature: getOutputCardinality()");return PDFNet.messageHandler.sendWithPromise("Function.getOutputCardinality",{f:this.id},this.userPriority)};PDFNet.Function.prototype.eval=function(inval,outval){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eval'. Expected 2 arguments. Function Signature: eval(number, number)");
if(inval instanceof Promise)throw new TypeError("1st input argument in function 'eval' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof inval)throw new TypeError("1st input argument '"+inval+"' in function 'eval' is of type '"+typeof inval+"'. Expected type 'number'. Function Signature: eval(number, number).");if(outval instanceof Promise)throw new TypeError("2nd input argument in function 'eval' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof outval)throw new TypeError("2nd input argument '"+outval+"' in function 'eval' is of type '"+typeof outval+"'. Expected type 'number'. Function Signature: eval(number, number).");return PDFNet.messageHandler.sendWithPromise("Function.eval",{f:this.id,inval:inval,outval:outval},this.userPriority)};PDFNet.Function.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");
return PDFNet.messageHandler.sendWithPromise("Function.getSDFObj",{f:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Highlights.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("highlightsCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Highlights(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Highlights.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Highlights.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Highlights.prototype.copyCtor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copyCtor'. Expected 0 arguments. Function Signature: copyCtor()");return PDFNet.messageHandler.sendWithPromise("Highlights.copyCtor",
{hlts:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Highlights(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Highlights.prototype.assign=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 0 arguments. Function Signature: assign()");return PDFNet.messageHandler.sendWithPromise("Highlights.assign",{hlts:this.id},this.userPriority).then(function(id){if("0"==id)return null;
id=new PDFNet.Highlights(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Highlights.prototype.add=function(hlts){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'add'. Expected 1 argument. Function Signature: add(Highlights)");if(hlts instanceof Promise)throw new TypeError("1st input argument in function 'add' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(hlts instanceof PDFNet.Highlights)){if("object"==
typeof hlts)throw new TypeError("1st input argument in function 'add' is of type '"+hlts.name+"'. Expected type 'Highlights'. Function Signature: add(Highlights).");throw new TypeError("1st input argument '"+hlts+"' in function 'add' is of type '"+typeof hlts+"'. Expected type 'Highlights'. Function Signature: add(Highlights).");}return PDFNet.messageHandler.sendWithPromise("Highlights.add",{hlts2:this.id,hlts:hlts.id},this.userPriority)};PDFNet.Highlights.prototype.load=function(file_name){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'load'. Expected 1 argument. Function Signature: load(string)");if(file_name instanceof Promise)throw new TypeError("1st input argument in function 'load' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof file_name)throw new TypeError("1st input argument '"+file_name+"' in function 'load' is of type '"+typeof file_name+"'. Expected type 'string'. Function Signature: load(string).");
return PDFNet.messageHandler.sendWithPromise("Highlights.load",{hlts:this.id,file_name:file_name},this.userPriority)};PDFNet.Highlights.prototype.save=function(file_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'save'. Expected 1 argument. Function Signature: save(string)");if(file_name instanceof Promise)throw new TypeError("1st input argument in function 'save' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof file_name)throw new TypeError("1st input argument '"+file_name+"' in function 'save' is of type '"+typeof file_name+"'. Expected type 'string'. Function Signature: save(string).");return PDFNet.messageHandler.sendWithPromise("Highlights.save",{hlts:this.id,file_name:file_name},this.userPriority)};PDFNet.Highlights.prototype.clear=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'clear'. Expected 0 arguments. Function Signature: clear()");
return PDFNet.messageHandler.sendWithPromise("Highlights.clear",{hlts:this.id},this.userPriority)};PDFNet.Highlights.prototype.begin=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 1 argument. Function Signature: begin(PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||
doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'begin' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: begin(PDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'begin' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: begin(PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("Highlights.begin",{hlts:this.id,doc:doc.id},this.userPriority)};
PDFNet.Highlights.prototype.hasNext=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasNext'. Expected 0 arguments. Function Signature: hasNext()");return PDFNet.messageHandler.sendWithPromise("Highlights.hasNext",{hlts:this.id},this.userPriority)};PDFNet.Highlights.prototype.next=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'next'. Expected 0 arguments. Function Signature: next()");
return PDFNet.messageHandler.sendWithPromise("Highlights.next",{hlts:this.id},this.userPriority)};PDFNet.Highlights.prototype.getCurrentPageNumber=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCurrentPageNumber'. Expected 0 arguments. Function Signature: getCurrentPageNumber()");return PDFNet.messageHandler.sendWithPromise("Highlights.getCurrentPageNumber",{hlts:this.id},this.userPriority)};PDFNet.HTML2PDF_Proxy.prototype.destroy=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF_Proxy.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.HTML2PDF_Proxy.prototype.setPort=function(port){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPort'. Expected 1 argument. Function Signature: setPort(number)");if(port instanceof Promise)throw new TypeError("1st input argument in function 'setPort' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof port)throw new TypeError("1st input argument '"+port+"' in function 'setPort' is of type '"+typeof port+"'. Expected type 'number'. Function Signature: setPort(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_Proxy.setPort",{proxy:this.id,port:port},this.userPriority)};PDFNet.HTML2PDF_Proxy.prototype.setHost=function(host){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHost'. Expected 1 argument. Function Signature: setHost(string)");
if(host instanceof Promise)throw new TypeError("1st input argument in function 'setHost' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof host)throw new TypeError("1st input argument '"+host+"' in function 'setHost' is of type '"+typeof host+"'. Expected type 'string'. Function Signature: setHost(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_Proxy.setHost",{proxy:this.id,host:host},this.userPriority)};PDFNet.HTML2PDF_Proxy.prototype.setUsername=
function(username){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUsername'. Expected 1 argument. Function Signature: setUsername(string)");if(username instanceof Promise)throw new TypeError("1st input argument in function 'setUsername' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof username)throw new TypeError("1st input argument '"+username+"' in function 'setUsername' is of type '"+typeof username+
"'. Expected type 'string'. Function Signature: setUsername(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_Proxy.setUsername",{proxy:this.id,username:username},this.userPriority)};PDFNet.HTML2PDF_Proxy.prototype.setPassword=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPassword'. Expected 1 argument. Function Signature: setPassword(string)");if(password instanceof Promise)throw new TypeError("1st input argument in function 'setPassword' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'setPassword' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: setPassword(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_Proxy.setPassword",{proxy:this.id,password:password},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");
for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.destroy",{auto_dealloc_obj:this.id},
this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setPrintBackground=function(background){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrintBackground'. Expected 1 argument. Function Signature: setPrintBackground(boolean)");if(background instanceof Promise)throw new TypeError("1st input argument in function 'setPrintBackground' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof background)throw new TypeError("1st input argument '"+
background+"' in function 'setPrintBackground' is of type '"+typeof background+"'. Expected type 'boolean'. Function Signature: setPrintBackground(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setPrintBackground",{settings:this.id,background:background},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setLoadImages=function(load){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLoadImages'. Expected 1 argument. Function Signature: setLoadImages(boolean)");
if(load instanceof Promise)throw new TypeError("1st input argument in function 'setLoadImages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof load)throw new TypeError("1st input argument '"+load+"' in function 'setLoadImages' is of type '"+typeof load+"'. Expected type 'boolean'. Function Signature: setLoadImages(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setLoadImages",{settings:this.id,load:load},this.userPriority)};
PDFNet.HTML2PDF_WebPageSettings.prototype.setAllowJavaScript=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAllowJavaScript'. Expected 1 argument. Function Signature: setAllowJavaScript(boolean)");if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setAllowJavaScript' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+
enable+"' in function 'setAllowJavaScript' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setAllowJavaScript(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setAllowJavaScript",{settings:this.id,enable:enable},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setSmartShrinking=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSmartShrinking'. Expected 1 argument. Function Signature: setSmartShrinking(boolean)");
if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setSmartShrinking' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'setSmartShrinking' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setSmartShrinking(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setSmartShrinking",{settings:this.id,
enable:enable},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setMinimumFontSize=function(size){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMinimumFontSize'. Expected 1 argument. Function Signature: setMinimumFontSize(number)");if(size instanceof Promise)throw new TypeError("1st input argument in function 'setMinimumFontSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size)throw new TypeError("1st input argument '"+
size+"' in function 'setMinimumFontSize' is of type '"+typeof size+"'. Expected type 'number'. Function Signature: setMinimumFontSize(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setMinimumFontSize",{settings:this.id,size:size},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setDefaultEncoding=function(encoding){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDefaultEncoding'. Expected 1 argument. Function Signature: setDefaultEncoding(string)");
if(encoding instanceof Promise)throw new TypeError("1st input argument in function 'setDefaultEncoding' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof encoding)throw new TypeError("1st input argument '"+encoding+"' in function 'setDefaultEncoding' is of type '"+typeof encoding+"'. Expected type 'string'. Function Signature: setDefaultEncoding(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setDefaultEncoding",
{settings:this.id,encoding:encoding},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setUserStyleSheet=function(url){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUserStyleSheet'. Expected 1 argument. Function Signature: setUserStyleSheet(string)");if(url instanceof Promise)throw new TypeError("1st input argument in function 'setUserStyleSheet' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof url)throw new TypeError("1st input argument '"+url+"' in function 'setUserStyleSheet' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: setUserStyleSheet(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setUserStyleSheet",{settings:this.id,url:url},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setAllowPlugins=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAllowPlugins'. Expected 1 argument. Function Signature: setAllowPlugins(boolean)");
if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setAllowPlugins' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'setAllowPlugins' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setAllowPlugins(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setAllowPlugins",{settings:this.id,
enable:enable},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setPrintMediaType=function(print){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrintMediaType'. Expected 1 argument. Function Signature: setPrintMediaType(boolean)");if(print instanceof Promise)throw new TypeError("1st input argument in function 'setPrintMediaType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof print)throw new TypeError("1st input argument '"+
print+"' in function 'setPrintMediaType' is of type '"+typeof print+"'. Expected type 'boolean'. Function Signature: setPrintMediaType(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setPrintMediaType",{settings:this.id,print:print},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setIncludeInOutline=function(include){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setIncludeInOutline'. Expected 1 argument. Function Signature: setIncludeInOutline(boolean)");
if(include instanceof Promise)throw new TypeError("1st input argument in function 'setIncludeInOutline' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof include)throw new TypeError("1st input argument '"+include+"' in function 'setIncludeInOutline' is of type '"+typeof include+"'. Expected type 'boolean'. Function Signature: setIncludeInOutline(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setIncludeInOutline",
{settings:this.id,include:include},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setUsername=function(username){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUsername'. Expected 1 argument. Function Signature: setUsername(string)");if(username instanceof Promise)throw new TypeError("1st input argument in function 'setUsername' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof username)throw new TypeError("1st input argument '"+
username+"' in function 'setUsername' is of type '"+typeof username+"'. Expected type 'string'. Function Signature: setUsername(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setUsername",{settings:this.id,username:username},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setPassword=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPassword'. Expected 1 argument. Function Signature: setPassword(string)");
if(password instanceof Promise)throw new TypeError("1st input argument in function 'setPassword' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'setPassword' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: setPassword(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setPassword",{settings:this.id,password:password},
this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setJavaScriptDelay=function(msec){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setJavaScriptDelay'. Expected 1 argument. Function Signature: setJavaScriptDelay(number)");if(msec instanceof Promise)throw new TypeError("1st input argument in function 'setJavaScriptDelay' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof msec)throw new TypeError("1st input argument '"+
msec+"' in function 'setJavaScriptDelay' is of type '"+typeof msec+"'. Expected type 'number'. Function Signature: setJavaScriptDelay(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setJavaScriptDelay",{settings:this.id,msec:msec},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setZoom=function(zoom){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setZoom'. Expected 1 argument. Function Signature: setZoom(number)");
if(zoom instanceof Promise)throw new TypeError("1st input argument in function 'setZoom' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof zoom)throw new TypeError("1st input argument '"+zoom+"' in function 'setZoom' is of type '"+typeof zoom+"'. Expected type 'number'. Function Signature: setZoom(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setZoom",{settings:this.id,zoom:zoom},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setBlockLocalFileAccess=
function(block){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBlockLocalFileAccess'. Expected 1 argument. Function Signature: setBlockLocalFileAccess(boolean)");if(block instanceof Promise)throw new TypeError("1st input argument in function 'setBlockLocalFileAccess' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof block)throw new TypeError("1st input argument '"+block+"' in function 'setBlockLocalFileAccess' is of type '"+
typeof block+"'. Expected type 'boolean'. Function Signature: setBlockLocalFileAccess(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setBlockLocalFileAccess",{settings:this.id,block:block},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setStopSlowScripts=function(stop){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStopSlowScripts'. Expected 1 argument. Function Signature: setStopSlowScripts(boolean)");
if(stop instanceof Promise)throw new TypeError("1st input argument in function 'setStopSlowScripts' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof stop)throw new TypeError("1st input argument '"+stop+"' in function 'setStopSlowScripts' is of type '"+typeof stop+"'. Expected type 'boolean'. Function Signature: setStopSlowScripts(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setStopSlowScripts",{settings:this.id,
stop:stop},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setDebugJavaScriptOutput=function(forward){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDebugJavaScriptOutput'. Expected 1 argument. Function Signature: setDebugJavaScriptOutput(boolean)");if(forward instanceof Promise)throw new TypeError("1st input argument in function 'setDebugJavaScriptOutput' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof forward)throw new TypeError("1st input argument '"+forward+"' in function 'setDebugJavaScriptOutput' is of type '"+typeof forward+"'. Expected type 'boolean'. Function Signature: setDebugJavaScriptOutput(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setDebugJavaScriptOutput",{settings:this.id,forward:forward},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setExternalLinks=function(convert){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setExternalLinks'. Expected 1 argument. Function Signature: setExternalLinks(boolean)");if(convert instanceof Promise)throw new TypeError("1st input argument in function 'setExternalLinks' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof convert)throw new TypeError("1st input argument '"+convert+"' in function 'setExternalLinks' is of type '"+typeof convert+"'. Expected type 'boolean'. Function Signature: setExternalLinks(boolean).");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setExternalLinks",{settings:this.id,convert:convert},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setInternalLinks=function(convert){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInternalLinks'. Expected 1 argument. Function Signature: setInternalLinks(boolean)");if(convert instanceof Promise)throw new TypeError("1st input argument in function 'setInternalLinks' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof convert)throw new TypeError("1st input argument '"+convert+"' in function 'setInternalLinks' is of type '"+typeof convert+"'. Expected type 'boolean'. Function Signature: setInternalLinks(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setInternalLinks",{settings:this.id,convert:convert},this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setProduceForms=function(forms){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setProduceForms'. Expected 1 argument. Function Signature: setProduceForms(boolean)");
if(forms instanceof Promise)throw new TypeError("1st input argument in function 'setProduceForms' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof forms)throw new TypeError("1st input argument '"+forms+"' in function 'setProduceForms' is of type '"+typeof forms+"'. Expected type 'boolean'. Function Signature: setProduceForms(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setProduceForms",{settings:this.id,forms:forms},
this.userPriority)};PDFNet.HTML2PDF_WebPageSettings.prototype.setProxy=function(proxy){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setProxy'. Expected 1 argument. Function Signature: setProxy(HTML2PDF_Proxy)");if(proxy instanceof Promise)throw new TypeError("1st input argument in function 'setProxy' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(proxy instanceof PDFNet.HTML2PDF_Proxy)){if("object"==typeof proxy)throw new TypeError("1st input argument in function 'setProxy' is of type '"+
proxy.name+"'. Expected type 'HTML2PDF_Proxy'. Function Signature: setProxy(HTML2PDF_Proxy).");throw new TypeError("1st input argument '"+proxy+"' in function 'setProxy' is of type '"+typeof proxy+"'. Expected type 'HTML2PDF_Proxy'. Function Signature: setProxy(HTML2PDF_Proxy).");}return PDFNet.messageHandler.sendWithPromise("HTML2PDF_WebPageSettings.setProxy",{settings:this.id,proxy:proxy.id},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.setDottedLines=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDottedLines'. Expected 1 argument. Function Signature: setDottedLines(boolean)");if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setDottedLines' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'setDottedLines' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setDottedLines(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setDottedLines",{settings:this.id,enable:enable},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.setLinks=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLinks'. Expected 1 argument. Function Signature: setLinks(boolean)");
if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setLinks' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'setLinks' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setLinks(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setLinks",{settings:this.id,enable:enable},this.userPriority)};
PDFNet.HTML2PDF_TOCSettings.prototype.setCaptionText=function(caption){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCaptionText'. Expected 1 argument. Function Signature: setCaptionText(string)");if(caption instanceof Promise)throw new TypeError("1st input argument in function 'setCaptionText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof caption)throw new TypeError("1st input argument '"+
caption+"' in function 'setCaptionText' is of type '"+typeof caption+"'. Expected type 'string'. Function Signature: setCaptionText(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setCaptionText",{settings:this.id,caption:caption},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.setLevelIndentation=function(indentation){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLevelIndentation'. Expected 1 argument. Function Signature: setLevelIndentation(number)");
if(indentation instanceof Promise)throw new TypeError("1st input argument in function 'setLevelIndentation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof indentation)throw new TypeError("1st input argument '"+indentation+"' in function 'setLevelIndentation' is of type '"+typeof indentation+"'. Expected type 'number'. Function Signature: setLevelIndentation(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setLevelIndentation",
{settings:this.id,indentation:indentation},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.setTextSizeShrink=function(shrink){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextSizeShrink'. Expected 1 argument. Function Signature: setTextSizeShrink(number)");if(shrink instanceof Promise)throw new TypeError("1st input argument in function 'setTextSizeShrink' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof shrink)throw new TypeError("1st input argument '"+shrink+"' in function 'setTextSizeShrink' is of type '"+typeof shrink+"'. Expected type 'number'. Function Signature: setTextSizeShrink(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setTextSizeShrink",{settings:this.id,shrink:shrink},this.userPriority)};PDFNet.HTML2PDF_TOCSettings.prototype.setXsl=function(style_sheet){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setXsl'. Expected 1 argument. Function Signature: setXsl(string)");
if(style_sheet instanceof Promise)throw new TypeError("1st input argument in function 'setXsl' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof style_sheet)throw new TypeError("1st input argument '"+style_sheet+"' in function 'setXsl' is of type '"+typeof style_sheet+"'. Expected type 'string'. Function Signature: setXsl(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF_TOCSettings.setXsl",{settings:this.id,style_sheet:style_sheet},
this.userPriority)};PDFNet.HTML2PDF.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("htmL2PDFCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.HTML2PDF(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.HTML2PDF.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.HTML2PDF.prototype.insertFromUrl=function(url){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertFromUrl'. Expected 1 argument. Function Signature: insertFromUrl(string)");if(url instanceof Promise)throw new TypeError("1st input argument in function 'insertFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof url)throw new TypeError("1st input argument '"+url+"' in function 'insertFromUrl' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: insertFromUrl(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertFromUrl",{html2pdf:this.id,url:url},this.userPriority)};PDFNet.HTML2PDF.prototype.insertFromUrl2=function(url,settings){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertFromUrl2'. Expected 2 arguments. Function Signature: insertFromUrl2(string, HTML2PDF_WebPageSettings)");
if(url instanceof Promise)throw new TypeError("1st input argument in function 'insertFromUrl2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof url)throw new TypeError("1st input argument '"+url+"' in function 'insertFromUrl2' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: insertFromUrl2(string, HTML2PDF_WebPageSettings).");if(settings instanceof Promise)throw new TypeError("2nd input argument in function 'insertFromUrl2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(settings instanceof PDFNet.HTML2PDF_WebPageSettings)){if("object"==typeof settings)throw new TypeError("2nd input argument in function 'insertFromUrl2' is of type '"+settings.name+"'. Expected type 'HTML2PDF_WebPageSettings'. Function Signature: insertFromUrl2(string, HTML2PDF_WebPageSettings).");throw new TypeError("2nd input argument '"+settings+"' in function 'insertFromUrl2' is of type '"+typeof settings+"'. Expected type 'HTML2PDF_WebPageSettings'. Function Signature: insertFromUrl2(string, HTML2PDF_WebPageSettings).");
}return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertFromUrl2",{html2pdf:this.id,url:url,settings:settings.id},this.userPriority)};PDFNet.HTML2PDF.prototype.insertFromHtmlString=function(html){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertFromHtmlString'. Expected 1 argument. Function Signature: insertFromHtmlString(string)");if(html instanceof Promise)throw new TypeError("1st input argument in function 'insertFromHtmlString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof html)throw new TypeError("1st input argument '"+html+"' in function 'insertFromHtmlString' is of type '"+typeof html+"'. Expected type 'string'. Function Signature: insertFromHtmlString(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertFromHtmlString",{html2pdf:this.id,html:html},this.userPriority)};PDFNet.HTML2PDF.prototype.insertFromHtmlString2=function(html,settings){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertFromHtmlString2'. Expected 2 arguments. Function Signature: insertFromHtmlString2(string, HTML2PDF_WebPageSettings)");
if(html instanceof Promise)throw new TypeError("1st input argument in function 'insertFromHtmlString2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof html)throw new TypeError("1st input argument '"+html+"' in function 'insertFromHtmlString2' is of type '"+typeof html+"'. Expected type 'string'. Function Signature: insertFromHtmlString2(string, HTML2PDF_WebPageSettings).");if(settings instanceof Promise)throw new TypeError("2nd input argument in function 'insertFromHtmlString2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(settings instanceof PDFNet.HTML2PDF_WebPageSettings)){if("object"==typeof settings)throw new TypeError("2nd input argument in function 'insertFromHtmlString2' is of type '"+settings.name+"'. Expected type 'HTML2PDF_WebPageSettings'. Function Signature: insertFromHtmlString2(string, HTML2PDF_WebPageSettings).");throw new TypeError("2nd input argument '"+settings+"' in function 'insertFromHtmlString2' is of type '"+typeof settings+"'. Expected type 'HTML2PDF_WebPageSettings'. Function Signature: insertFromHtmlString2(string, HTML2PDF_WebPageSettings).");
}return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertFromHtmlString2",{html2pdf:this.id,html:html,settings:settings.id},this.userPriority)};PDFNet.HTML2PDF.prototype.insertTOC=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertTOC'. Expected 0 arguments. Function Signature: insertTOC()");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertTOC",{html2pdf:this.id},this.userPriority)};PDFNet.HTML2PDF.prototype.insertTOC2=
function(settings){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertTOC2'. Expected 1 argument. Function Signature: insertTOC2(HTML2PDF_TOCSettings)");if(settings instanceof Promise)throw new TypeError("1st input argument in function 'insertTOC2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(settings instanceof PDFNet.HTML2PDF_TOCSettings)){if("object"==typeof settings)throw new TypeError("1st input argument in function 'insertTOC2' is of type '"+
settings.name+"'. Expected type 'HTML2PDF_TOCSettings'. Function Signature: insertTOC2(HTML2PDF_TOCSettings).");throw new TypeError("1st input argument '"+settings+"' in function 'insertTOC2' is of type '"+typeof settings+"'. Expected type 'HTML2PDF_TOCSettings'. Function Signature: insertTOC2(HTML2PDF_TOCSettings).");}return PDFNet.messageHandler.sendWithPromise("HTML2PDF.insertTOC2",{html2pdf:this.id,settings:settings.id},this.userPriority)};PDFNet.HTML2PDF.prototype.convert=function(doc){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'convert'. Expected 1 argument. Function Signature: convert(PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'convert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'convert' is of type '"+
doc.name+"'. Expected type 'PDFDoc'. Function Signature: convert(PDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'convert' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: convert(PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("HTML2PDF.convert",{html2pdf:this.id,doc:doc.id},this.userPriority)};PDFNet.HTML2PDF.prototype.getHttpErrorCode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHttpErrorCode'. Expected 0 arguments. Function Signature: getHttpErrorCode()");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF.getHttpErrorCode",{html2pdf:this.id},this.userPriority)};PDFNet.HTML2PDF.prototype.getLog=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLog'. Expected 0 arguments. Function Signature: getLog()");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.getLog",{html2pdf:this.id},this.userPriority)};PDFNet.HTML2PDF.prototype.setPaperSize2=function(width,height){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setPaperSize2'. Expected 2 arguments. Function Signature: setPaperSize2(string, string)");if(width instanceof Promise)throw new TypeError("1st input argument in function 'setPaperSize2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof width)throw new TypeError("1st input argument '"+width+"' in function 'setPaperSize2' is of type '"+typeof width+"'. Expected type 'string'. Function Signature: setPaperSize2(string, string).");
if(height instanceof Promise)throw new TypeError("2nd input argument in function 'setPaperSize2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof height)throw new TypeError("2nd input argument '"+height+"' in function 'setPaperSize2' is of type '"+typeof height+"'. Expected type 'string'. Function Signature: setPaperSize2(string, string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setPaperSize2",{html2pdf:this.id,width:width,height:height},
this.userPriority)};PDFNet.HTML2PDF.prototype.setLandscape=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLandscape'. Expected 1 argument. Function Signature: setLandscape(boolean)");if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setLandscape' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+
enable+"' in function 'setLandscape' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setLandscape(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setLandscape",{html2pdf:this.id,enable:enable},this.userPriority)};PDFNet.HTML2PDF.prototype.setDPI=function(dpi){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDPI'. Expected 1 argument. Function Signature: setDPI(number)");if(dpi instanceof Promise)throw new TypeError("1st input argument in function 'setDPI' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof dpi)throw new TypeError("1st input argument '"+dpi+"' in function 'setDPI' is of type '"+typeof dpi+"'. Expected type 'number'. Function Signature: setDPI(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setDPI",{html2pdf:this.id,dpi:dpi},this.userPriority)};PDFNet.HTML2PDF.prototype.setOutline=function(enable,depth){"undefined"===typeof depth&&(depth=4);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOutline'. Expected 1 to 2 arguments. Function Signature: setOutline(boolean, number)");
if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setOutline' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'setOutline' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setOutline(boolean, number).");if(depth instanceof Promise)throw new TypeError("2nd input argument in function 'setOutline' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof depth)throw new TypeError("2nd input argument '"+depth+"' in function 'setOutline' is of type '"+typeof depth+"'. Expected type 'number'. Function Signature: setOutline(boolean, number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setOutline",{html2pdf:this.id,enable:enable,depth:depth},this.userPriority)};PDFNet.HTML2PDF.prototype.dumpOutline=function(xml_file){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'dumpOutline'. Expected 1 argument. Function Signature: dumpOutline(string)");
if(xml_file instanceof Promise)throw new TypeError("1st input argument in function 'dumpOutline' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof xml_file)throw new TypeError("1st input argument '"+xml_file+"' in function 'dumpOutline' is of type '"+typeof xml_file+"'. Expected type 'string'. Function Signature: dumpOutline(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.dumpOutline",{html2pdf:this.id,xml_file:xml_file},this.userPriority)};
PDFNet.HTML2PDF.prototype.setPDFCompression=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPDFCompression'. Expected 1 argument. Function Signature: setPDFCompression(boolean)");if(enable instanceof Promise)throw new TypeError("1st input argument in function 'setPDFCompression' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+
enable+"' in function 'setPDFCompression' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: setPDFCompression(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setPDFCompression",{html2pdf:this.id,enable:enable},this.userPriority)};PDFNet.HTML2PDF.prototype.setMargins=function(top,bottom,left,right){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMargins'. Expected 4 arguments. Function Signature: setMargins(string, string, string, string)");
if(top instanceof Promise)throw new TypeError("1st input argument in function 'setMargins' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof top)throw new TypeError("1st input argument '"+top+"' in function 'setMargins' is of type '"+typeof top+"'. Expected type 'string'. Function Signature: setMargins(string, string, string, string).");if(bottom instanceof Promise)throw new TypeError("2nd input argument in function 'setMargins' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof bottom)throw new TypeError("2nd input argument '"+bottom+"' in function 'setMargins' is of type '"+typeof bottom+"'. Expected type 'string'. Function Signature: setMargins(string, string, string, string).");if(left instanceof Promise)throw new TypeError("3rd input argument in function 'setMargins' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof left)throw new TypeError("3rd input argument '"+left+"' in function 'setMargins' is of type '"+
typeof left+"'. Expected type 'string'. Function Signature: setMargins(string, string, string, string).");if(right instanceof Promise)throw new TypeError("4th input argument in function 'setMargins' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof right)throw new TypeError("4th input argument '"+right+"' in function 'setMargins' is of type '"+typeof right+"'. Expected type 'string'. Function Signature: setMargins(string, string, string, string).");
return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setMargins",{html2pdf:this.id,top:top,bottom:bottom,left:left,right:right},this.userPriority)};PDFNet.HTML2PDF.prototype.setImageDPI=function(dpi){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setImageDPI'. Expected 1 argument. Function Signature: setImageDPI(number)");if(dpi instanceof Promise)throw new TypeError("1st input argument in function 'setImageDPI' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof dpi)throw new TypeError("1st input argument '"+dpi+"' in function 'setImageDPI' is of type '"+typeof dpi+"'. Expected type 'number'. Function Signature: setImageDPI(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setImageDPI",{html2pdf:this.id,dpi:dpi},this.userPriority)};PDFNet.HTML2PDF.prototype.setImageQuality=function(quality){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setImageQuality'. Expected 1 argument. Function Signature: setImageQuality(number)");
if(quality instanceof Promise)throw new TypeError("1st input argument in function 'setImageQuality' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof quality)throw new TypeError("1st input argument '"+quality+"' in function 'setImageQuality' is of type '"+typeof quality+"'. Expected type 'number'. Function Signature: setImageQuality(number).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setImageQuality",{html2pdf:this.id,quality:quality},
this.userPriority)};PDFNet.HTML2PDF.prototype.setCookieJar=function(path){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCookieJar'. Expected 1 argument. Function Signature: setCookieJar(string)");if(path instanceof Promise)throw new TypeError("1st input argument in function 'setCookieJar' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("1st input argument '"+path+"' in function 'setCookieJar' is of type '"+
typeof path+"'. Expected type 'string'. Function Signature: setCookieJar(string).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setCookieJar",{html2pdf:this.id,path:path},this.userPriority)};PDFNet.HTML2PDF.prototype.setQuiet=function(quiet){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setQuiet'. Expected 1 argument. Function Signature: setQuiet(boolean)");if(quiet instanceof Promise)throw new TypeError("1st input argument in function 'setQuiet' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof quiet)throw new TypeError("1st input argument '"+quiet+"' in function 'setQuiet' is of type '"+typeof quiet+"'. Expected type 'boolean'. Function Signature: setQuiet(boolean).");return PDFNet.messageHandler.sendWithPromise("HTML2PDF.setQuiet",{html2pdf:this.id,quiet:quiet},this.userPriority)};PDFNet.HTML2PDF.setModulePath=function(path){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setModulePath'. Expected 1 argument. Function Signature: setModulePath(string)");
if(path instanceof Promise)throw new TypeError("1st input argument in function 'setModulePath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("1st input argument '"+path+"' in function 'setModulePath' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: setModulePath(string).");return PDFNet.messageHandler.sendWithPromise("htmL2PDFSetModulePath",{path:path},this.userPriority)};PDFNet.Image.createFromMemory=
function(doc,buf,width,height,bpc,color_space,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));buf instanceof Array&&(buf=new Float64Array(buf));if(6>arguments.length||7<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromMemory'. Expected 6 to 7 arguments. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromMemory' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromMemory' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");
}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createFromMemory' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");throw new TypeError("2nd input argument '"+
buf+"' in function 'createFromMemory' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");}if(width instanceof Promise)throw new TypeError("4th input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("4th input argument '"+width+"' in function 'createFromMemory' is of type '"+
typeof width+"'. Expected type 'number'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");if(height instanceof Promise)throw new TypeError("5th input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("5th input argument '"+height+"' in function 'createFromMemory' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");
if(bpc instanceof Promise)throw new TypeError("6th input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("6th input argument '"+bpc+"' in function 'createFromMemory' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");if(color_space instanceof Promise)throw new TypeError("7th input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(color_space instanceof PDFNet.ColorSpace)){if("object"==typeof color_space)throw new TypeError("7th input argument in function 'createFromMemory' is of type '"+color_space.name+"'. Expected type 'ColorSpace'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");throw new TypeError("7th input argument '"+color_space+"' in function 'createFromMemory' is of type '"+typeof color_space+"'. Expected type 'ColorSpace'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");
}if(encoder_hints instanceof Promise)throw new TypeError("8th input argument in function 'createFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("8th input argument in function 'createFromMemory' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");throw new TypeError("8th input argument '"+
encoder_hints+"' in function 'createFromMemory' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateFromMemory",{doc:doc.id,buf:buf.buffer,width:width,height:height,bpc:bpc,color_space:color_space.id,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createFromMemory2=
function(doc,buf,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));buf instanceof Array&&(buf=new Float64Array(buf));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromMemory2'. Expected 2 to 3 arguments. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromMemory2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromMemory2' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromMemory2' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");
}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createFromMemory2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createFromMemory2' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");throw new TypeError("2nd input argument '"+buf+"' in function 'createFromMemory2' is of type '"+
typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");}if(encoder_hints instanceof Promise)throw new TypeError("4th input argument in function 'createFromMemory2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("4th input argument in function 'createFromMemory2' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");
throw new TypeError("4th input argument '"+encoder_hints+"' in function 'createFromMemory2' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createFromMemory2(SDFDoc, ArrayBuffer, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateFromMemory2",{doc:doc.id,buf:buf.buffer,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createFromStream=function(doc,image_data,width,height,bpc,color_space,
encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));if(6>arguments.length||7<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromStream'. Expected 6 to 7 arguments. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromStream' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromStream' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");
}if(image_data instanceof Promise)throw new TypeError("2nd input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(image_data instanceof PDFNet.FilterReader)){if("object"==typeof image_data)throw new TypeError("2nd input argument in function 'createFromStream' is of type '"+image_data.name+"'. Expected type 'FilterReader'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");
throw new TypeError("2nd input argument '"+image_data+"' in function 'createFromStream' is of type '"+typeof image_data+"'. Expected type 'FilterReader'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");}if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+
width+"' in function 'createFromStream' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'createFromStream' is of type '"+
typeof height+"'. Expected type 'number'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");if(bpc instanceof Promise)throw new TypeError("5th input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("5th input argument '"+bpc+"' in function 'createFromStream' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");
if(color_space instanceof Promise)throw new TypeError("6th input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(color_space instanceof PDFNet.ColorSpace)){if("object"==typeof color_space)throw new TypeError("6th input argument in function 'createFromStream' is of type '"+color_space.name+"'. Expected type 'ColorSpace'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");
throw new TypeError("6th input argument '"+color_space+"' in function 'createFromStream' is of type '"+typeof color_space+"'. Expected type 'ColorSpace'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");}if(encoder_hints instanceof Promise)throw new TypeError("7th input argument in function 'createFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==
typeof encoder_hints)throw new TypeError("7th input argument in function 'createFromStream' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");throw new TypeError("7th input argument '"+encoder_hints+"' in function 'createFromStream' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, Obj).");
}return PDFNet.messageHandler.sendWithPromise("imageCreateFromStream",{doc:doc.id,image_data:image_data.id,width:width,height:height,bpc:bpc,color_space:color_space.id,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createFromStream2=function(doc,no_own_image_data,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createFromStream2'. Expected 2 to 3 arguments. Function Signature: createFromStream2(SDFDoc, Filter, Obj)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createFromStream2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromStream2' is of type '"+
doc.name+"'. Expected type 'SDFDoc'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromStream2' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");}if(no_own_image_data instanceof Promise)throw new TypeError("2nd input argument in function 'createFromStream2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_image_data instanceof
PDFNet.Filter)){if("object"==typeof no_own_image_data)throw new TypeError("2nd input argument in function 'createFromStream2' is of type '"+no_own_image_data.name+"'. Expected type 'Filter'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");throw new TypeError("2nd input argument '"+no_own_image_data+"' in function 'createFromStream2' is of type '"+typeof no_own_image_data+"'. Expected type 'Filter'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");}if(encoder_hints instanceof
Promise)throw new TypeError("3rd input argument in function 'createFromStream2' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("3rd input argument in function 'createFromStream2' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");throw new TypeError("3rd input argument '"+encoder_hints+"' in function 'createFromStream2' is of type '"+
typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createFromStream2(SDFDoc, Filter, Obj).");}var ownedObjIndex=-1;if(0!=no_own_image_data.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_image_data.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("imageCreateFromStream2",
{doc:doc.id,no_own_image_data:no_own_image_data.id,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createImageMask=function(doc,buf,width,height,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));buf instanceof Array&&(buf=new Float64Array(buf));if(4>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImageMask'. Expected 4 to 5 arguments. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createImageMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createImageMask' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");
throw new TypeError("1st input argument '"+doc+"' in function 'createImageMask' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createImageMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createImageMask' is of type '"+
buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");throw new TypeError("2nd input argument '"+buf+"' in function 'createImageMask' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");}if(width instanceof Promise)throw new TypeError("4th input argument in function 'createImageMask' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("4th input argument '"+width+"' in function 'createImageMask' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");if(height instanceof Promise)throw new TypeError("5th input argument in function 'createImageMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("5th input argument '"+height+
"' in function 'createImageMask' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");if(encoder_hints instanceof Promise)throw new TypeError("6th input argument in function 'createImageMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("6th input argument in function 'createImageMask' is of type '"+
encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");throw new TypeError("6th input argument '"+encoder_hints+"' in function 'createImageMask' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createImageMask(SDFDoc, ArrayBuffer, number, number, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateImageMask",{doc:doc.id,buf:buf.buffer,width:width,height:height,encoder_hints:encoder_hints.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createImageMaskFromStream=function(doc,image_data,width,height,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));if(4>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createImageMaskFromStream'. Expected 4 to 5 arguments. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createImageMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createImageMaskFromStream' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");
throw new TypeError("1st input argument '"+doc+"' in function 'createImageMaskFromStream' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");}if(image_data instanceof Promise)throw new TypeError("2nd input argument in function 'createImageMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(image_data instanceof PDFNet.FilterReader)){if("object"==typeof image_data)throw new TypeError("2nd input argument in function 'createImageMaskFromStream' is of type '"+
image_data.name+"'. Expected type 'FilterReader'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");throw new TypeError("2nd input argument '"+image_data+"' in function 'createImageMaskFromStream' is of type '"+typeof image_data+"'. Expected type 'FilterReader'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");}if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createImageMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'createImageMaskFromStream' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'createImageMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+
height+"' in function 'createImageMaskFromStream' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");if(encoder_hints instanceof Promise)throw new TypeError("5th input argument in function 'createImageMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("5th input argument in function 'createImageMaskFromStream' is of type '"+
encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");throw new TypeError("5th input argument '"+encoder_hints+"' in function 'createImageMaskFromStream' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createImageMaskFromStream(SDFDoc, FilterReader, number, number, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateImageMaskFromStream",{doc:doc.id,image_data:image_data.id,
width:width,height:height,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createSoftMask=function(doc,buf,width,height,bpc,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));buf instanceof Array&&(buf=new Float64Array(buf));if(5>arguments.length||6<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createSoftMask'. Expected 5 to 6 arguments. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createSoftMask' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");
throw new TypeError("1st input argument '"+doc+"' in function 'createSoftMask' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createSoftMask' is of type '"+
buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");throw new TypeError("2nd input argument '"+buf+"' in function 'createSoftMask' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");}if(width instanceof Promise)throw new TypeError("4th input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("4th input argument '"+width+"' in function 'createSoftMask' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");if(height instanceof Promise)throw new TypeError("5th input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("5th input argument '"+
height+"' in function 'createSoftMask' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");if(bpc instanceof Promise)throw new TypeError("6th input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("6th input argument '"+bpc+"' in function 'createSoftMask' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");
if(encoder_hints instanceof Promise)throw new TypeError("7th input argument in function 'createSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("7th input argument in function 'createSoftMask' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");throw new TypeError("7th input argument '"+
encoder_hints+"' in function 'createSoftMask' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createSoftMask(SDFDoc, ArrayBuffer, number, number, number, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateSoftMask",{doc:doc.id,buf:buf.buffer,width:width,height:height,bpc:bpc,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createSoftMaskFromStream=function(doc,image_data,width,
height,bpc,encoder_hints){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));if(5>arguments.length||6<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createSoftMaskFromStream'. Expected 5 to 6 arguments. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createSoftMaskFromStream' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createSoftMaskFromStream' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");
}if(image_data instanceof Promise)throw new TypeError("2nd input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(image_data instanceof PDFNet.FilterReader)){if("object"==typeof image_data)throw new TypeError("2nd input argument in function 'createSoftMaskFromStream' is of type '"+image_data.name+"'. Expected type 'FilterReader'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");
throw new TypeError("2nd input argument '"+image_data+"' in function 'createSoftMaskFromStream' is of type '"+typeof image_data+"'. Expected type 'FilterReader'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");}if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+
width+"' in function 'createSoftMaskFromStream' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'createSoftMaskFromStream' is of type '"+
typeof height+"'. Expected type 'number'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");if(bpc instanceof Promise)throw new TypeError("5th input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("5th input argument '"+bpc+"' in function 'createSoftMaskFromStream' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");
if(encoder_hints instanceof Promise)throw new TypeError("6th input argument in function 'createSoftMaskFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("6th input argument in function 'createSoftMaskFromStream' is of type '"+encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");
throw new TypeError("6th input argument '"+encoder_hints+"' in function 'createSoftMaskFromStream' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createSoftMaskFromStream(SDFDoc, FilterReader, number, number, number, Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateSoftMaskFromStream",{doc:doc.id,image_data:image_data.id,width:width,height:height,bpc:bpc,encoder_hints:encoder_hints.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};
PDFNet.Image.createDirectFromMemory=function(doc,buf,width,height,bpc,color_space,input_format){buf instanceof Array&&(buf=new Float64Array(buf));if(7!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDirectFromMemory'. Expected 7 arguments. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createDirectFromMemory' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");throw new TypeError("1st input argument '"+doc+"' in function 'createDirectFromMemory' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");
}if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("2nd input argument in function 'createDirectFromMemory' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");throw new TypeError("2nd input argument '"+
buf+"' in function 'createDirectFromMemory' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");}if(width instanceof Promise)throw new TypeError("4th input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("4th input argument '"+width+"' in function 'createDirectFromMemory' is of type '"+
typeof width+"'. Expected type 'number'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");if(height instanceof Promise)throw new TypeError("5th input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("5th input argument '"+height+"' in function 'createDirectFromMemory' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");
if(bpc instanceof Promise)throw new TypeError("6th input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("6th input argument '"+bpc+"' in function 'createDirectFromMemory' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");if(color_space instanceof Promise)throw new TypeError("7th input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(color_space instanceof PDFNet.ColorSpace)){if("object"==typeof color_space)throw new TypeError("7th input argument in function 'createDirectFromMemory' is of type '"+color_space.name+"'. Expected type 'ColorSpace'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");throw new TypeError("7th input argument '"+color_space+"' in function 'createDirectFromMemory' is of type '"+typeof color_space+"'. Expected type 'ColorSpace'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");
}if(input_format instanceof Promise)throw new TypeError("8th input argument in function 'createDirectFromMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof input_format)throw new TypeError("8th input argument '"+input_format+"' in function 'createDirectFromMemory' is of type '"+typeof input_format+"'. Expected type 'number'. Function Signature: createDirectFromMemory(SDFDoc, ArrayBuffer, number, number, number, ColorSpace, number).");return PDFNet.messageHandler.sendWithPromise("imageCreateDirectFromMemory",
{doc:doc.id,buf:buf.buffer,width:width,height:height,bpc:bpc,color_space:color_space.id,input_format:input_format},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createDirectFromStream=function(doc,image_data,width,height,bpc,color_space,input_format){if(7!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDirectFromStream'. Expected 7 arguments. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createDirectFromStream' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");
throw new TypeError("1st input argument '"+doc+"' in function 'createDirectFromStream' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");}if(image_data instanceof Promise)throw new TypeError("2nd input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(image_data instanceof PDFNet.FilterReader)){if("object"==
typeof image_data)throw new TypeError("2nd input argument in function 'createDirectFromStream' is of type '"+image_data.name+"'. Expected type 'FilterReader'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");throw new TypeError("2nd input argument '"+image_data+"' in function 'createDirectFromStream' is of type '"+typeof image_data+"'. Expected type 'FilterReader'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");
}if(width instanceof Promise)throw new TypeError("3rd input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'createDirectFromStream' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");if(height instanceof Promise)throw new TypeError("4th input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'createDirectFromStream' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");if(bpc instanceof Promise)throw new TypeError("5th input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof bpc)throw new TypeError("5th input argument '"+
bpc+"' in function 'createDirectFromStream' is of type '"+typeof bpc+"'. Expected type 'number'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");if(color_space instanceof Promise)throw new TypeError("6th input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(color_space instanceof PDFNet.ColorSpace)){if("object"==typeof color_space)throw new TypeError("6th input argument in function 'createDirectFromStream' is of type '"+
color_space.name+"'. Expected type 'ColorSpace'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");throw new TypeError("6th input argument '"+color_space+"' in function 'createDirectFromStream' is of type '"+typeof color_space+"'. Expected type 'ColorSpace'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");}if(input_format instanceof Promise)throw new TypeError("7th input argument in function 'createDirectFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof input_format)throw new TypeError("7th input argument '"+input_format+"' in function 'createDirectFromStream' is of type '"+typeof input_format+"'. Expected type 'number'. Function Signature: createDirectFromStream(SDFDoc, FilterReader, number, number, number, ColorSpace, number).");return PDFNet.messageHandler.sendWithPromise("imageCreateDirectFromStream",{doc:doc.id,image_data:image_data.id,width:width,height:height,bpc:bpc,color_space:color_space.id,input_format:input_format},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.createFromObj=function(image_xobject){"undefined"===typeof image_xobject&&(image_xobject=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 1 arguments. Function Signature: createFromObj(Obj)");if(image_xobject instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(image_xobject instanceof PDFNet.Obj)){if("object"==typeof image_xobject)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+image_xobject.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+image_xobject+"' in function 'createFromObj' is of type '"+typeof image_xobject+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("imageCreateFromObj",
{image_xobject:image_xobject.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("Image.copy",{c:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Image(id)})};PDFNet.Image.prototype.getSDFObj=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Image.getSDFObj",{img:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Image.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");
return PDFNet.messageHandler.sendWithPromise("Image.isValid",{img:this.id},this.userPriority)};PDFNet.Image.prototype.getImageData=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageData'. Expected 0 arguments. Function Signature: getImageData()");return PDFNet.messageHandler.sendWithPromise("Image.getImageData",{img:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.Image.prototype.getImageDataSize=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageDataSize'. Expected 0 arguments. Function Signature: getImageDataSize()");return PDFNet.messageHandler.sendWithPromise("Image.getImageDataSize",{img:this.id},this.userPriority)};PDFNet.Image.prototype.getImageColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageColorSpace'. Expected 0 arguments. Function Signature: getImageColorSpace()");
return PDFNet.messageHandler.sendWithPromise("Image.getImageColorSpace",{img:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Image.prototype.getImageWidth=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageWidth'. Expected 0 arguments. Function Signature: getImageWidth()");return PDFNet.messageHandler.sendWithPromise("Image.getImageWidth",
{img:this.id},this.userPriority)};PDFNet.Image.prototype.getImageHeight=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageHeight'. Expected 0 arguments. Function Signature: getImageHeight()");return PDFNet.messageHandler.sendWithPromise("Image.getImageHeight",{img:this.id},this.userPriority)};PDFNet.Image.prototype.getDecodeArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDecodeArray'. Expected 0 arguments. Function Signature: getDecodeArray()");
return PDFNet.messageHandler.sendWithPromise("Image.getDecodeArray",{img:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Image.prototype.getBitsPerComponent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBitsPerComponent'. Expected 0 arguments. Function Signature: getBitsPerComponent()");return PDFNet.messageHandler.sendWithPromise("Image.getBitsPerComponent",{img:this.id},this.userPriority)};
PDFNet.Image.prototype.getComponentNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getComponentNum'. Expected 0 arguments. Function Signature: getComponentNum()");return PDFNet.messageHandler.sendWithPromise("Image.getComponentNum",{img:this.id},this.userPriority)};PDFNet.Image.prototype.isImageMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isImageMask'. Expected 0 arguments. Function Signature: isImageMask()");
return PDFNet.messageHandler.sendWithPromise("Image.isImageMask",{img:this.id},this.userPriority)};PDFNet.Image.prototype.isImageInterpolate=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isImageInterpolate'. Expected 0 arguments. Function Signature: isImageInterpolate()");return PDFNet.messageHandler.sendWithPromise("Image.isImageInterpolate",{img:this.id},this.userPriority)};PDFNet.Image.prototype.getMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getMask'. Expected 0 arguments. Function Signature: getMask()");return PDFNet.messageHandler.sendWithPromise("Image.getMask",{img:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Image.prototype.setMask=function(image_mask){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMask'. Expected 1 argument. Function Signature: setMask(Image)");if(image_mask instanceof Promise)throw new TypeError("1st input argument in function 'setMask' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(image_mask instanceof PDFNet.Image)){if("object"==typeof image_mask)throw new TypeError("1st input argument in function 'setMask' is of type '"+image_mask.name+"'. Expected type 'Image'. Function Signature: setMask(Image).");throw new TypeError("1st input argument '"+image_mask+"' in function 'setMask' is of type '"+typeof image_mask+"'. Expected type 'Image'. Function Signature: setMask(Image).");}return PDFNet.messageHandler.sendWithPromise("Image.setMask",{img:this.id,image_mask:image_mask.id},
this.userPriority)};PDFNet.Image.prototype.setMaskWithObj=function(mask){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMaskWithObj'. Expected 1 argument. Function Signature: setMaskWithObj(Obj)");if(mask instanceof Promise)throw new TypeError("1st input argument in function 'setMaskWithObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mask instanceof PDFNet.Obj)){if("object"==typeof mask)throw new TypeError("1st input argument in function 'setMaskWithObj' is of type '"+
mask.name+"'. Expected type 'Obj'. Function Signature: setMaskWithObj(Obj).");throw new TypeError("1st input argument '"+mask+"' in function 'setMaskWithObj' is of type '"+typeof mask+"'. Expected type 'Obj'. Function Signature: setMaskWithObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("Image.setMaskWithObj",{img:this.id,mask:mask.id},this.userPriority)};PDFNet.Image.prototype.getSoftMask=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSoftMask'. Expected 0 arguments. Function Signature: getSoftMask()");
return PDFNet.messageHandler.sendWithPromise("Image.getSoftMask",{img:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Image.prototype.setSoftMask=function(soft_mask){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSoftMask'. Expected 1 argument. Function Signature: setSoftMask(Image)");if(soft_mask instanceof Promise)throw new TypeError("1st input argument in function 'setSoftMask' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(soft_mask instanceof PDFNet.Image)){if("object"==typeof soft_mask)throw new TypeError("1st input argument in function 'setSoftMask' is of type '"+soft_mask.name+"'. Expected type 'Image'. Function Signature: setSoftMask(Image).");throw new TypeError("1st input argument '"+soft_mask+"' in function 'setSoftMask' is of type '"+typeof soft_mask+"'. Expected type 'Image'. Function Signature: setSoftMask(Image).");}return PDFNet.messageHandler.sendWithPromise("Image.setSoftMask",{img:this.id,soft_mask:soft_mask.id},
this.userPriority)};PDFNet.Image.prototype.getImageRenderingIntent=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getImageRenderingIntent'. Expected 0 arguments. Function Signature: getImageRenderingIntent()");return PDFNet.messageHandler.sendWithPromise("Image.getImageRenderingIntent",{img:this.id},this.userPriority)};PDFNet.Image.prototype.exportFromStream=function(writer){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'exportFromStream'. Expected 1 argument. Function Signature: exportFromStream(FilterWriter)");
if(writer instanceof Promise)throw new TypeError("1st input argument in function 'exportFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(writer instanceof PDFNet.FilterWriter)){if("object"==typeof writer)throw new TypeError("1st input argument in function 'exportFromStream' is of type '"+writer.name+"'. Expected type 'FilterWriter'. Function Signature: exportFromStream(FilterWriter).");throw new TypeError("1st input argument '"+writer+"' in function 'exportFromStream' is of type '"+
typeof writer+"'. Expected type 'FilterWriter'. Function Signature: exportFromStream(FilterWriter).");}return PDFNet.messageHandler.sendWithPromise("Image.exportFromStream",{img:this.id,writer:writer.id},this.userPriority)};PDFNet.Image.prototype.exportAsTiffFromStream=function(writer){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'exportAsTiffFromStream'. Expected 1 argument. Function Signature: exportAsTiffFromStream(FilterWriter)");if(writer instanceof
Promise)throw new TypeError("1st input argument in function 'exportAsTiffFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(writer instanceof PDFNet.FilterWriter)){if("object"==typeof writer)throw new TypeError("1st input argument in function 'exportAsTiffFromStream' is of type '"+writer.name+"'. Expected type 'FilterWriter'. Function Signature: exportAsTiffFromStream(FilterWriter).");throw new TypeError("1st input argument '"+writer+"' in function 'exportAsTiffFromStream' is of type '"+
typeof writer+"'. Expected type 'FilterWriter'. Function Signature: exportAsTiffFromStream(FilterWriter).");}return PDFNet.messageHandler.sendWithPromise("Image.exportAsTiffFromStream",{img:this.id,writer:writer.id},this.userPriority)};PDFNet.Image.prototype.exportAsPngFromStream=function(writer){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'exportAsPngFromStream'. Expected 1 argument. Function Signature: exportAsPngFromStream(FilterWriter)");if(writer instanceof
Promise)throw new TypeError("1st input argument in function 'exportAsPngFromStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(writer instanceof PDFNet.FilterWriter)){if("object"==typeof writer)throw new TypeError("1st input argument in function 'exportAsPngFromStream' is of type '"+writer.name+"'. Expected type 'FilterWriter'. Function Signature: exportAsPngFromStream(FilterWriter).");throw new TypeError("1st input argument '"+writer+"' in function 'exportAsPngFromStream' is of type '"+
typeof writer+"'. Expected type 'FilterWriter'. Function Signature: exportAsPngFromStream(FilterWriter).");}return PDFNet.messageHandler.sendWithPromise("Image.exportAsPngFromStream",{img:this.id,writer:writer.id},this.userPriority)};PDFNet.Optimizer.imageSettingsInit=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'imageSettingsInit'. Expected 0 arguments. Function Signature: imageSettingsInit()");return PDFNet.messageHandler.sendWithPromise("optimizerImageSettingsInit",
{},this.userPriority)};PDFNet.Optimizer.monoImageSettingsInit=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'monoImageSettingsInit'. Expected 0 arguments. Function Signature: monoImageSettingsInit()");return PDFNet.messageHandler.sendWithPromise("optimizerMonoImageSettingsInit",{},this.userPriority)};PDFNet.Optimizer.textSettingsInit=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'textSettingsInit'. Expected 0 arguments. Function Signature: textSettingsInit()");
return PDFNet.messageHandler.sendWithPromise("optimizerTextSettingsInit",{},this.userPriority)};PDFNet.PageLabel.create=function(doc,style,prefix,start_at){"undefined"===typeof prefix&&(prefix="");"undefined"===typeof start_at&&(start_at=1);if(2>arguments.length||4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 to 4 arguments. Function Signature: create(SDFDoc, number, string, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number, string, number).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, number, string, number).");}if(style instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof style)throw new TypeError("2nd input argument '"+style+"' in function 'create' is of type '"+typeof style+"'. Expected type 'number'. Function Signature: create(SDFDoc, number, string, number).");if(prefix instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof prefix)throw new TypeError("3rd input argument '"+prefix+"' in function 'create' is of type '"+
typeof prefix+"'. Expected type 'string'. Function Signature: create(SDFDoc, number, string, number).");if(start_at instanceof Promise)throw new TypeError("4th input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof start_at)throw new TypeError("4th input argument '"+start_at+"' in function 'create' is of type '"+typeof start_at+"'. Expected type 'number'. Function Signature: create(SDFDoc, number, string, number).");
return PDFNet.messageHandler.sendWithPromise("pageLabelCreate",{doc:doc.id,style:style,prefix:prefix,start_at:start_at},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PageLabel(id)})};PDFNet.PageLabel.createFromObj=function(l,first_page,last_page){"undefined"===typeof l&&(l=new PDFNet.Obj("0"));"undefined"===typeof first_page&&(first_page=-1);"undefined"===typeof last_page&&(last_page=-1);if(3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected at most 3 arguments. Function Signature: createFromObj(Obj, number, number)");
if(l instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(l instanceof PDFNet.Obj)){if("object"==typeof l)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+l.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj, number, number).");throw new TypeError("1st input argument '"+l+"' in function 'createFromObj' is of type '"+typeof l+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj, number, number).");
}if(first_page instanceof Promise)throw new TypeError("2nd input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof first_page)throw new TypeError("2nd input argument '"+first_page+"' in function 'createFromObj' is of type '"+typeof first_page+"'. Expected type 'number'. Function Signature: createFromObj(Obj, number, number).");if(last_page instanceof Promise)throw new TypeError("3rd input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof last_page)throw new TypeError("3rd input argument '"+last_page+"' in function 'createFromObj' is of type '"+typeof last_page+"'. Expected type 'number'. Function Signature: createFromObj(Obj, number, number).");return PDFNet.messageHandler.sendWithPromise("pageLabelCreateFromObj",{l:l.id,first_page:first_page,last_page:last_page},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PageLabel(id)})};PDFNet.PageLabel.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(PageLabel)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.PageLabel)&&"PageLabel"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'PageLabel'. Function Signature: assign(PageLabel).");
throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'PageLabel'. Function Signature: assign(PageLabel).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof right.yieldFunction)throw Error("Function '"+
right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="PageLabel.assign";return PDFNet.messageHandler.sendWithPromise("PageLabel.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.PageLabel.prototype.compare=function(d){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(PageLabel)");if(d instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(d instanceof PDFNet.PageLabel)&&"PageLabel"!=d.name){if("object"==typeof d)throw new TypeError("1st input argument in function 'compare' is of type '"+d.name+"'. Expected type 'PageLabel'. Function Signature: compare(PageLabel).");
throw new TypeError("1st input argument '"+d+"' in function 'compare' is of type '"+typeof d+"'. Expected type 'PageLabel'. Function Signature: compare(PageLabel).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'compare'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof d.yieldFunction)throw Error("Function '"+d.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'compare'. Perhaps a yield statement is required for '"+d.yieldFunction+"'?");var me=this;this.yieldFunction="PageLabel.compare";return PDFNet.messageHandler.sendWithPromise("PageLabel.compare",{l:this,d:d},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me);return id.result})};PDFNet.PageLabel.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("PageLabel.isValid",{l:this},this.userPriority)};PDFNet.PageLabel.prototype.getLabelTitle=function(page_num){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLabelTitle'. Expected 1 argument. Function Signature: getLabelTitle(number)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'getLabelTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_num)throw new TypeError("1st input argument '"+page_num+"' in function 'getLabelTitle' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: getLabelTitle(number).");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getLabelTitle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="PageLabel.getLabelTitle";return PDFNet.messageHandler.sendWithPromise("PageLabel.getLabelTitle",{l:this,page_num:page_num},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me);
return id.result})};PDFNet.PageLabel.prototype.setStyle=function(style){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStyle'. Expected 1 argument. Function Signature: setStyle(number)");if(style instanceof Promise)throw new TypeError("1st input argument in function 'setStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof style)throw new TypeError("1st input argument '"+style+"' in function 'setStyle' is of type '"+
typeof style+"'. Expected type 'number'. Function Signature: setStyle(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setStyle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="PageLabel.setStyle";return PDFNet.messageHandler.sendWithPromise("PageLabel.setStyle",{l:this,style:style},this.userPriority).then(function(id){me.yieldFunction=
void 0;copyFunc(id.l,me)})};PDFNet.PageLabel.prototype.getStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStyle'. Expected 0 arguments. Function Signature: getStyle()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStyle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");
return PDFNet.messageHandler.sendWithPromise("PageLabel.getStyle",{l:this},this.userPriority)};PDFNet.PageLabel.prototype.getPrefix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPrefix'. Expected 0 arguments. Function Signature: getPrefix()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getPrefix'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("PageLabel.getPrefix",{l:this},this.userPriority)};PDFNet.PageLabel.prototype.setPrefix=function(prefix){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrefix'. Expected 1 argument. Function Signature: setPrefix(string)");if(prefix instanceof Promise)throw new TypeError("1st input argument in function 'setPrefix' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof prefix)throw new TypeError("1st input argument '"+prefix+"' in function 'setPrefix' is of type '"+typeof prefix+"'. Expected type 'string'. Function Signature: setPrefix(string).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setPrefix'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="PageLabel.setPrefix";
return PDFNet.messageHandler.sendWithPromise("PageLabel.setPrefix",{l:this,prefix:prefix},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me)})};PDFNet.PageLabel.prototype.getStart=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStart'. Expected 0 arguments. Function Signature: getStart()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStart'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("PageLabel.getStart",{l:this},this.userPriority)};PDFNet.PageLabel.prototype.setStart=function(start_at){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStart'. Expected 1 argument. Function Signature: setStart(number)");if(start_at instanceof Promise)throw new TypeError("1st input argument in function 'setStart' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof start_at)throw new TypeError("1st input argument '"+start_at+"' in function 'setStart' is of type '"+typeof start_at+"'. Expected type 'number'. Function Signature: setStart(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'setStart'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"PageLabel.setStart";return PDFNet.messageHandler.sendWithPromise("PageLabel.setStart",{l:this,start_at:start_at},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me)})};PDFNet.PageLabel.prototype.getFirstPageNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFirstPageNum'. Expected 0 arguments. Function Signature: getFirstPageNum()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+
" recently altered a struct object without yielding. That object is now being accessed by function 'getFirstPageNum'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="PageLabel.getFirstPageNum";return PDFNet.messageHandler.sendWithPromise("PageLabel.getFirstPageNum",{l:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me);return id.result})};PDFNet.PageLabel.prototype.getLastPageNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getLastPageNum'. Expected 0 arguments. Function Signature: getLastPageNum()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getLastPageNum'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="PageLabel.getLastPageNum";return PDFNet.messageHandler.sendWithPromise("PageLabel.getLastPageNum",
{l:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.l,me);return id.result})};PDFNet.PageLabel.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getSDFObj'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("PageLabel.getSDFObj",{l:this},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PageSet.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("pageSetCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PageSet(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PageSet.createSinglePage=function(one_page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createSinglePage'. Expected 1 argument. Function Signature: createSinglePage(number)");if(one_page instanceof Promise)throw new TypeError("1st input argument in function 'createSinglePage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof one_page)throw new TypeError("1st input argument '"+
one_page+"' in function 'createSinglePage' is of type '"+typeof one_page+"'. Expected type 'number'. Function Signature: createSinglePage(number).");return PDFNet.messageHandler.sendWithPromise("pageSetCreateSinglePage",{one_page:one_page},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PageSet(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PageSet.createRange=function(range_start,range_end){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createRange'. Expected 2 arguments. Function Signature: createRange(number, number)");if(range_start instanceof Promise)throw new TypeError("1st input argument in function 'createRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof range_start)throw new TypeError("1st input argument '"+range_start+"' in function 'createRange' is of type '"+typeof range_start+"'. Expected type 'number'. Function Signature: createRange(number, number).");
if(range_end instanceof Promise)throw new TypeError("2nd input argument in function 'createRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof range_end)throw new TypeError("2nd input argument '"+range_end+"' in function 'createRange' is of type '"+typeof range_end+"'. Expected type 'number'. Function Signature: createRange(number, number).");return PDFNet.messageHandler.sendWithPromise("pageSetCreateRange",{range_start:range_start,range_end:range_end},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PageSet(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PageSet.createFilteredRange=function(range_start,range_end,filter){"undefined"===typeof filter&&(filter=PDFNet.PageSet.Filter.e_all);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFilteredRange'. Expected 2 to 3 arguments. Function Signature: createFilteredRange(number, number, number)");
if(range_start instanceof Promise)throw new TypeError("1st input argument in function 'createFilteredRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof range_start)throw new TypeError("1st input argument '"+range_start+"' in function 'createFilteredRange' is of type '"+typeof range_start+"'. Expected type 'number'. Function Signature: createFilteredRange(number, number, number).");if(range_end instanceof Promise)throw new TypeError("2nd input argument in function 'createFilteredRange' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof range_end)throw new TypeError("2nd input argument '"+range_end+"' in function 'createFilteredRange' is of type '"+typeof range_end+"'. Expected type 'number'. Function Signature: createFilteredRange(number, number, number).");if(filter instanceof Promise)throw new TypeError("3rd input argument in function 'createFilteredRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof filter)throw new TypeError("3rd input argument '"+
filter+"' in function 'createFilteredRange' is of type '"+typeof filter+"'. Expected type 'number'. Function Signature: createFilteredRange(number, number, number).");return PDFNet.messageHandler.sendWithPromise("pageSetCreateFilteredRange",{range_start:range_start,range_end:range_end,filter:filter},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PageSet(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PageSet.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("PageSet.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PageSet.prototype.addPage=function(one_page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addPage'. Expected 1 argument. Function Signature: addPage(number)");if(one_page instanceof Promise)throw new TypeError("1st input argument in function 'addPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof one_page)throw new TypeError("1st input argument '"+one_page+"' in function 'addPage' is of type '"+typeof one_page+"'. Expected type 'number'. Function Signature: addPage(number).");return PDFNet.messageHandler.sendWithPromise("PageSet.addPage",{page_set:this.id,one_page:one_page},this.userPriority)};PDFNet.PageSet.prototype.addRange=function(range_start,range_end,filter){"undefined"===typeof filter&&(filter=PDFNet.PageSet.Filter.e_all);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'addRange'. Expected 2 to 3 arguments. Function Signature: addRange(number, number, number)");if(range_start instanceof Promise)throw new TypeError("1st input argument in function 'addRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof range_start)throw new TypeError("1st input argument '"+range_start+"' in function 'addRange' is of type '"+typeof range_start+"'. Expected type 'number'. Function Signature: addRange(number, number, number).");
if(range_end instanceof Promise)throw new TypeError("2nd input argument in function 'addRange' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof range_end)throw new TypeError("2nd input argument '"+range_end+"' in function 'addRange' is of type '"+typeof range_end+"'. Expected type 'number'. Function Signature: addRange(number, number, number).");if(filter instanceof Promise)throw new TypeError("3rd input argument in function 'addRange' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof filter)throw new TypeError("3rd input argument '"+filter+"' in function 'addRange' is of type '"+typeof filter+"'. Expected type 'number'. Function Signature: addRange(number, number, number).");return PDFNet.messageHandler.sendWithPromise("PageSet.addRange",{page_set:this.id,range_start:range_start,range_end:range_end,filter:filter},this.userPriority)};PDFNet.PatternColor.create=function(pattern){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.Obj)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'create' is of type '"+pattern.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+pattern+"' in function 'create' is of type '"+typeof pattern+"'. Expected type 'Obj'. Function Signature: create(Obj).");
}return PDFNet.messageHandler.sendWithPromise("patternColorCreate",{pattern:pattern.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PatternColor(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PatternColor.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("PatternColor.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PatternColor.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(PatternColor)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.PatternColor)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'PatternColor'. Function Signature: assign(PatternColor).");
throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'PatternColor'. Function Signature: assign(PatternColor).");}return PDFNet.messageHandler.sendWithPromise("PatternColor.assign",{left:this.id,right:right.id},this.userPriority)};PDFNet.PatternColor.getTypeFromObj=function(pattern){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTypeFromObj'. Expected 1 argument. Function Signature: getTypeFromObj(Obj)");
if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'getTypeFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pattern instanceof PDFNet.Obj)){if("object"==typeof pattern)throw new TypeError("1st input argument in function 'getTypeFromObj' is of type '"+pattern.name+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");throw new TypeError("1st input argument '"+pattern+"' in function 'getTypeFromObj' is of type '"+
typeof pattern+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("patternColorGetTypeFromObj",{pattern:pattern.id},this.userPriority)};PDFNet.PatternColor.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getType",{pc:this.id},this.userPriority)};
PDFNet.PatternColor.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getSDFObj",{pc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PatternColor.prototype.getMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMatrix'. Expected 0 arguments. Function Signature: getMatrix()");
return PDFNet.messageHandler.sendWithPromise("PatternColor.getMatrix",{pc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Matrix2D(id)})};PDFNet.PatternColor.prototype.getShading=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getShading'. Expected 0 arguments. Function Signature: getShading()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getShading",{pc:this.id},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.Shading(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PatternColor.prototype.getTilingType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTilingType'. Expected 0 arguments. Function Signature: getTilingType()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getTilingType",{pc:this.id},this.userPriority)};PDFNet.PatternColor.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getBBox",{pc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.PatternColor.prototype.getXStep=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getXStep'. Expected 0 arguments. Function Signature: getXStep()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getXStep",
{pc:this.id},this.userPriority)};PDFNet.PatternColor.prototype.getYStep=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getYStep'. Expected 0 arguments. Function Signature: getYStep()");return PDFNet.messageHandler.sendWithPromise("PatternColor.getYStep",{pc:this.id},this.userPriority)};PDFNet.GeometryCollection.prototype.snapToNearest=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'snapToNearest'. Expected 2 arguments. Function Signature: snapToNearest(number, number)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'snapToNearest' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'snapToNearest' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: snapToNearest(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'snapToNearest' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'snapToNearest' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: snapToNearest(number, number).");return PDFNet.messageHandler.sendWithPromise("GeometryCollection.snapToNearest",{self:this.id,x:x,y:y},this.userPriority)};PDFNet.GeometryCollection.prototype.snapToNearestPixel=function(x,y,dpi){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'snapToNearestPixel'. Expected 3 arguments. Function Signature: snapToNearestPixel(number, number, number)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'snapToNearestPixel' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'snapToNearestPixel' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: snapToNearestPixel(number, number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'snapToNearestPixel' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'snapToNearestPixel' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: snapToNearestPixel(number, number, number).");if(dpi instanceof Promise)throw new TypeError("3rd input argument in function 'snapToNearestPixel' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dpi)throw new TypeError("3rd input argument '"+dpi+"' in function 'snapToNearestPixel' is of type '"+
typeof dpi+"'. Expected type 'number'. Function Signature: snapToNearestPixel(number, number, number).");return PDFNet.messageHandler.sendWithPromise("GeometryCollection.snapToNearestPixel",{self:this.id,x:x,y:y,dpi:dpi},this.userPriority)};PDFNet.GeometryCollection.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=
i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("GeometryCollection.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.getTriggerAction=
function(trigger){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTriggerAction'. Expected 1 argument. Function Signature: getTriggerAction(number)");if(trigger instanceof Promise)throw new TypeError("1st input argument in function 'getTriggerAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof trigger)throw new TypeError("1st input argument '"+trigger+"' in function 'getTriggerAction' is of type '"+
typeof trigger+"'. Expected type 'number'. Function Signature: getTriggerAction(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getTriggerAction",{doc:this.id,trigger:trigger},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("pdfDocCreate",
{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.createFromFilter=function(no_own_stream){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromFilter'. Expected 1 argument. Function Signature: createFromFilter(Filter)");if(no_own_stream instanceof Promise)throw new TypeError("1st input argument in function 'createFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(no_own_stream instanceof PDFNet.Filter)){if("object"==typeof no_own_stream)throw new TypeError("1st input argument in function 'createFromFilter' is of type '"+no_own_stream.name+"'. Expected type 'Filter'. Function Signature: createFromFilter(Filter).");throw new TypeError("1st input argument '"+no_own_stream+"' in function 'createFromFilter' is of type '"+typeof no_own_stream+"'. Expected type 'Filter'. Function Signature: createFromFilter(Filter).");}var ownedObjIndex=-1;if(0!=no_own_stream.id){for(var i=
createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_stream.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("pdfDocCreateFromFilter",{no_own_stream:no_own_stream.id},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.createFromBuffer=function(buf){buf instanceof Array&&(buf=new Float64Array(buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromBuffer'. Expected 1 argument. Function Signature: createFromBuffer(ArrayBuffer)");if(buf instanceof Promise)throw new TypeError("1st input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("1st input argument in function 'createFromBuffer' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createFromBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+buf+"' in function 'createFromBuffer' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createFromBuffer(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("pdfDocCreateFromBuffer",
{buf:buf.buffer},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.createFromLayoutEls=function(buf){buf instanceof Array&&(buf=new Float64Array(buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromLayoutEls'. Expected 1 argument. Function Signature: createFromLayoutEls(ArrayBuffer)");if(buf instanceof Promise)throw new TypeError("1st input argument in function 'createFromLayoutEls' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(buf.buffer)){if("object"==typeof buf)throw new TypeError("1st input argument in function 'createFromLayoutEls' is of type '"+buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: createFromLayoutEls(ArrayBuffer).");throw new TypeError("1st input argument '"+buf+"' in function 'createFromLayoutEls' is of type '"+typeof buf+"'. Expected type 'ArrayBuffer'. Function Signature: createFromLayoutEls(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("pdfDocCreateFromLayoutEls",
{buf:buf.buffer},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.createShallowCopy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createShallowCopy'. Expected 0 arguments. Function Signature: createShallowCopy()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createShallowCopy",{source:this.id},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.PDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<
deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("PDFDoc.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.isEncrypted=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isEncrypted'. Expected 0 arguments. Function Signature: isEncrypted()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.isEncrypted",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.initStdSecurityHandler=function(password,password_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initStdSecurityHandler'. Expected 2 arguments. Function Signature: initStdSecurityHandler(string, number)");if(password instanceof Promise)throw new TypeError("1st input argument in function 'initStdSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initStdSecurityHandler' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initStdSecurityHandler(string, number).");if(password_sz instanceof Promise)throw new TypeError("2nd input argument in function 'initStdSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof password_sz)throw new TypeError("2nd input argument '"+
password_sz+"' in function 'initStdSecurityHandler' is of type '"+typeof password_sz+"'. Expected type 'number'. Function Signature: initStdSecurityHandler(string, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.initStdSecurityHandler",{doc:this.id,password:password,password_sz:password_sz},this.userPriority)};PDFNet.PDFDoc.prototype.initStdSecurityHandlerUString=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initStdSecurityHandlerUString'. Expected 1 argument. Function Signature: initStdSecurityHandlerUString(string)");
if(password instanceof Promise)throw new TypeError("1st input argument in function 'initStdSecurityHandlerUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initStdSecurityHandlerUString' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initStdSecurityHandlerUString(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.initStdSecurityHandlerUString",
{doc:this.id,password:password},this.userPriority)};PDFNet.PDFDoc.prototype.initStdSecurityHandlerBuffer=function(password_buf){password_buf instanceof Array&&(password_buf=new Float64Array(password_buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initStdSecurityHandlerBuffer'. Expected 1 argument. Function Signature: initStdSecurityHandlerBuffer(ArrayBuffer)");if(password_buf instanceof Promise)throw new TypeError("1st input argument in function 'initStdSecurityHandlerBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(password_buf.buffer)){if("object"==typeof password_buf)throw new TypeError("1st input argument in function 'initStdSecurityHandlerBuffer' is of type '"+password_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: initStdSecurityHandlerBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+password_buf+"' in function 'initStdSecurityHandlerBuffer' is of type '"+typeof password_buf+"'. Expected type 'ArrayBuffer'. Function Signature: initStdSecurityHandlerBuffer(ArrayBuffer).");
}return PDFNet.messageHandler.sendWithPromise("PDFDoc.initStdSecurityHandlerBuffer",{doc:this.id,password_buf:password_buf.buffer},this.userPriority)};PDFNet.PDFDoc.prototype.getSecurityHandler=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSecurityHandler'. Expected 0 arguments. Function Signature: getSecurityHandler()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getSecurityHandler",{doc:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.SecurityHandler(id)})};PDFNet.PDFDoc.prototype.setSecurityHandler=function(no_own_handler){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSecurityHandler'. Expected 1 argument. Function Signature: setSecurityHandler(SecurityHandler)");if(no_own_handler instanceof Promise)throw new TypeError("1st input argument in function 'setSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_handler instanceof
PDFNet.SecurityHandler)){if("object"==typeof no_own_handler)throw new TypeError("1st input argument in function 'setSecurityHandler' is of type '"+no_own_handler.name+"'. Expected type 'SecurityHandler'. Function Signature: setSecurityHandler(SecurityHandler).");throw new TypeError("1st input argument '"+no_own_handler+"' in function 'setSecurityHandler' is of type '"+typeof no_own_handler+"'. Expected type 'SecurityHandler'. Function Signature: setSecurityHandler(SecurityHandler).");}var ownedObjIndex=
-1;if(0!=no_own_handler.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_handler.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("PDFDoc.setSecurityHandler",
{doc:this.id,no_own_handler:no_own_handler.id},this.userPriority)};PDFNet.PDFDoc.prototype.removeSecurity=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeSecurity'. Expected 0 arguments. Function Signature: removeSecurity()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.removeSecurity",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.getDocInfo=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDocInfo'. Expected 0 arguments. Function Signature: getDocInfo()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getDocInfo",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PDFDocInfo(id)})};PDFNet.PDFDoc.prototype.getViewPrefs=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getViewPrefs'. Expected 0 arguments. Function Signature: getViewPrefs()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getViewPrefs",{doc:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.PDFDocViewPrefs(id)})};PDFNet.PDFDoc.prototype.isModified=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isModified'. Expected 0 arguments. Function Signature: isModified()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.isModified",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.hasRepairedXRef=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasRepairedXRef'. Expected 0 arguments. Function Signature: hasRepairedXRef()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.hasRepairedXRef",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.isLinearized=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isLinearized'. Expected 0 arguments. Function Signature: isLinearized()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.isLinearized",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.saveMemoryBuffer=function(flags){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'saveMemoryBuffer'. Expected 1 argument. Function Signature: saveMemoryBuffer(number)");if(flags instanceof Promise)throw new TypeError("1st input argument in function 'saveMemoryBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flags)throw new TypeError("1st input argument '"+flags+"' in function 'saveMemoryBuffer' is of type '"+typeof flags+"'. Expected type 'number'. Function Signature: saveMemoryBuffer(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.saveMemoryBuffer",{doc:this.id,flags:flags},this.userPriority).then(function(id){return new Uint8Array(id)})};PDFNet.PDFDoc.prototype.saveStream=function(stream,flags){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveStream'. Expected 2 arguments. Function Signature: saveStream(Filter, number)");if(stream instanceof Promise)throw new TypeError("1st input argument in function 'saveStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(stream instanceof PDFNet.Filter)){if("object"==typeof stream)throw new TypeError("1st input argument in function 'saveStream' is of type '"+stream.name+"'. Expected type 'Filter'. Function Signature: saveStream(Filter, number).");throw new TypeError("1st input argument '"+stream+"' in function 'saveStream' is of type '"+typeof stream+"'. Expected type 'Filter'. Function Signature: saveStream(Filter, number).");}if(flags instanceof Promise)throw new TypeError("2nd input argument in function 'saveStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flags)throw new TypeError("2nd input argument '"+flags+"' in function 'saveStream' is of type '"+typeof flags+"'. Expected type 'number'. Function Signature: saveStream(Filter, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.saveStream",{doc:this.id,stream:stream.id,flags:flags},this.userPriority)};PDFNet.PDFDoc.prototype.getPageIterator=function(page_number){"undefined"===typeof page_number&&(page_number=1);if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPageIterator'. Expected at most 1 arguments. Function Signature: getPageIterator(number)");if(page_number instanceof Promise)throw new TypeError("1st input argument in function 'getPageIterator' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_number)throw new TypeError("1st input argument '"+page_number+"' in function 'getPageIterator' is of type '"+typeof page_number+"'. Expected type 'number'. Function Signature: getPageIterator(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPageIterator",{doc:this.id,page_number:page_number},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getPage=function(page_number){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPage'. Expected 1 argument. Function Signature: getPage(number)");if(page_number instanceof Promise)throw new TypeError("1st input argument in function 'getPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof page_number)throw new TypeError("1st input argument '"+page_number+"' in function 'getPage' is of type '"+typeof page_number+"'. Expected type 'number'. Function Signature: getPage(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPage",{doc:this.id,page_number:page_number},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.PDFDoc.prototype.pageRemove=function(page_itr){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pageRemove'. Expected 1 argument. Function Signature: pageRemove(Iterator)");if(page_itr instanceof Promise)throw new TypeError("1st input argument in function 'pageRemove' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page_itr instanceof PDFNet.Iterator)){if("object"==typeof page_itr)throw new TypeError("1st input argument in function 'pageRemove' is of type '"+page_itr.name+"'. Expected type 'Iterator'. Function Signature: pageRemove(Iterator).");
throw new TypeError("1st input argument '"+page_itr+"' in function 'pageRemove' is of type '"+typeof page_itr+"'. Expected type 'Iterator'. Function Signature: pageRemove(Iterator).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.pageRemove",{doc:this.id,page_itr:page_itr.id},this.userPriority)};PDFNet.PDFDoc.prototype.pageInsert=function(where,page){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pageInsert'. Expected 2 arguments. Function Signature: pageInsert(Iterator, Page)");
if(where instanceof Promise)throw new TypeError("1st input argument in function 'pageInsert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(where instanceof PDFNet.Iterator)){if("object"==typeof where)throw new TypeError("1st input argument in function 'pageInsert' is of type '"+where.name+"'. Expected type 'Iterator'. Function Signature: pageInsert(Iterator, Page).");throw new TypeError("1st input argument '"+where+"' in function 'pageInsert' is of type '"+
typeof where+"'. Expected type 'Iterator'. Function Signature: pageInsert(Iterator, Page).");}if(page instanceof Promise)throw new TypeError("2nd input argument in function 'pageInsert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("2nd input argument in function 'pageInsert' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: pageInsert(Iterator, Page).");throw new TypeError("2nd input argument '"+
page+"' in function 'pageInsert' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: pageInsert(Iterator, Page).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.pageInsert",{doc:this.id,where:where.id,page:page.id},this.userPriority)};PDFNet.PDFDoc.prototype.insertPages=function(insert_before_page_number,src_doc,start_page,end_page,flag){"undefined"===typeof flag&&(flag=0);if(4>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertPages'. Expected 4 to 5 arguments. Function Signature: insertPages(number, PDFDoc, number, number, number)");
if(insert_before_page_number instanceof Promise)throw new TypeError("1st input argument in function 'insertPages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof insert_before_page_number)throw new TypeError("1st input argument '"+insert_before_page_number+"' in function 'insertPages' is of type '"+typeof insert_before_page_number+"'. Expected type 'number'. Function Signature: insertPages(number, PDFDoc, number, number, number).");if(src_doc instanceof
Promise)throw new TypeError("2nd input argument in function 'insertPages' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(src_doc instanceof PDFNet.PDFDoc||src_doc instanceof PDFNet.SDFDoc||src_doc instanceof PDFNet.FDFDoc)){if("object"==typeof src_doc)throw new TypeError("2nd input argument in function 'insertPages' is of type '"+src_doc.name+"'. Expected type 'PDFDoc'. Function Signature: insertPages(number, PDFDoc, number, number, number).");throw new TypeError("2nd input argument '"+
src_doc+"' in function 'insertPages' is of type '"+typeof src_doc+"'. Expected type 'PDFDoc'. Function Signature: insertPages(number, PDFDoc, number, number, number).");}if(start_page instanceof Promise)throw new TypeError("3rd input argument in function 'insertPages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof start_page)throw new TypeError("3rd input argument '"+start_page+"' in function 'insertPages' is of type '"+typeof start_page+"'. Expected type 'number'. Function Signature: insertPages(number, PDFDoc, number, number, number).");
if(end_page instanceof Promise)throw new TypeError("4th input argument in function 'insertPages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof end_page)throw new TypeError("4th input argument '"+end_page+"' in function 'insertPages' is of type '"+typeof end_page+"'. Expected type 'number'. Function Signature: insertPages(number, PDFDoc, number, number, number).");if(flag instanceof Promise)throw new TypeError("5th input argument in function 'insertPages' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flag)throw new TypeError("5th input argument '"+flag+"' in function 'insertPages' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: insertPages(number, PDFDoc, number, number, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.insertPages",{dest_doc:this.id,insert_before_page_number:insert_before_page_number,src_doc:src_doc.id,start_page:start_page,end_page:end_page,flag:flag},this.userPriority)};PDFNet.PDFDoc.prototype.insertPageSet=function(insert_before_page_number,
src_doc,source_page_set,flag){"undefined"===typeof flag&&(flag=0);if(3>arguments.length||4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertPageSet'. Expected 3 to 4 arguments. Function Signature: insertPageSet(number, PDFDoc, PageSet, number)");if(insert_before_page_number instanceof Promise)throw new TypeError("1st input argument in function 'insertPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof insert_before_page_number)throw new TypeError("1st input argument '"+insert_before_page_number+"' in function 'insertPageSet' is of type '"+typeof insert_before_page_number+"'. Expected type 'number'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");if(src_doc instanceof Promise)throw new TypeError("2nd input argument in function 'insertPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(src_doc instanceof PDFNet.PDFDoc||src_doc instanceof
PDFNet.SDFDoc||src_doc instanceof PDFNet.FDFDoc)){if("object"==typeof src_doc)throw new TypeError("2nd input argument in function 'insertPageSet' is of type '"+src_doc.name+"'. Expected type 'PDFDoc'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");throw new TypeError("2nd input argument '"+src_doc+"' in function 'insertPageSet' is of type '"+typeof src_doc+"'. Expected type 'PDFDoc'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");}if(source_page_set instanceof
Promise)throw new TypeError("3rd input argument in function 'insertPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(source_page_set instanceof PDFNet.PageSet)){if("object"==typeof source_page_set)throw new TypeError("3rd input argument in function 'insertPageSet' is of type '"+source_page_set.name+"'. Expected type 'PageSet'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");throw new TypeError("3rd input argument '"+source_page_set+
"' in function 'insertPageSet' is of type '"+typeof source_page_set+"'. Expected type 'PageSet'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");}if(flag instanceof Promise)throw new TypeError("4th input argument in function 'insertPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("4th input argument '"+flag+"' in function 'insertPageSet' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: insertPageSet(number, PDFDoc, PageSet, number).");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.insertPageSet",{dest_doc:this.id,insert_before_page_number:insert_before_page_number,src_doc:src_doc.id,source_page_set:source_page_set.id,flag:flag},this.userPriority)};PDFNet.PDFDoc.prototype.movePages=function(move_before_page_number,src_doc,start_page,end_page,flag){"undefined"===typeof flag&&(flag=0);if(4>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'movePages'. Expected 4 to 5 arguments. Function Signature: movePages(number, PDFDoc, number, number, number)");
if(move_before_page_number instanceof Promise)throw new TypeError("1st input argument in function 'movePages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof move_before_page_number)throw new TypeError("1st input argument '"+move_before_page_number+"' in function 'movePages' is of type '"+typeof move_before_page_number+"'. Expected type 'number'. Function Signature: movePages(number, PDFDoc, number, number, number).");if(src_doc instanceof Promise)throw new TypeError("2nd input argument in function 'movePages' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(src_doc instanceof PDFNet.PDFDoc||src_doc instanceof PDFNet.SDFDoc||src_doc instanceof PDFNet.FDFDoc)){if("object"==typeof src_doc)throw new TypeError("2nd input argument in function 'movePages' is of type '"+src_doc.name+"'. Expected type 'PDFDoc'. Function Signature: movePages(number, PDFDoc, number, number, number).");throw new TypeError("2nd input argument '"+src_doc+"' in function 'movePages' is of type '"+typeof src_doc+"'. Expected type 'PDFDoc'. Function Signature: movePages(number, PDFDoc, number, number, number).");
}if(start_page instanceof Promise)throw new TypeError("3rd input argument in function 'movePages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof start_page)throw new TypeError("3rd input argument '"+start_page+"' in function 'movePages' is of type '"+typeof start_page+"'. Expected type 'number'. Function Signature: movePages(number, PDFDoc, number, number, number).");if(end_page instanceof Promise)throw new TypeError("4th input argument in function 'movePages' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof end_page)throw new TypeError("4th input argument '"+end_page+"' in function 'movePages' is of type '"+typeof end_page+"'. Expected type 'number'. Function Signature: movePages(number, PDFDoc, number, number, number).");if(flag instanceof Promise)throw new TypeError("5th input argument in function 'movePages' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("5th input argument '"+flag+"' in function 'movePages' is of type '"+
typeof flag+"'. Expected type 'number'. Function Signature: movePages(number, PDFDoc, number, number, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.movePages",{dest_doc:this.id,move_before_page_number:move_before_page_number,src_doc:src_doc.id,start_page:start_page,end_page:end_page,flag:flag},this.userPriority)};PDFNet.PDFDoc.prototype.movePageSet=function(move_before_page_number,src_doc,source_page_set,flag){"undefined"===typeof flag&&(flag=0);if(3>arguments.length||4<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'movePageSet'. Expected 3 to 4 arguments. Function Signature: movePageSet(number, PDFDoc, PageSet, number)");if(move_before_page_number instanceof Promise)throw new TypeError("1st input argument in function 'movePageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof move_before_page_number)throw new TypeError("1st input argument '"+move_before_page_number+"' in function 'movePageSet' is of type '"+typeof move_before_page_number+
"'. Expected type 'number'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");if(src_doc instanceof Promise)throw new TypeError("2nd input argument in function 'movePageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(src_doc instanceof PDFNet.PDFDoc||src_doc instanceof PDFNet.SDFDoc||src_doc instanceof PDFNet.FDFDoc)){if("object"==typeof src_doc)throw new TypeError("2nd input argument in function 'movePageSet' is of type '"+src_doc.name+
"'. Expected type 'PDFDoc'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");throw new TypeError("2nd input argument '"+src_doc+"' in function 'movePageSet' is of type '"+typeof src_doc+"'. Expected type 'PDFDoc'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");}if(source_page_set instanceof Promise)throw new TypeError("3rd input argument in function 'movePageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(source_page_set instanceof
PDFNet.PageSet)){if("object"==typeof source_page_set)throw new TypeError("3rd input argument in function 'movePageSet' is of type '"+source_page_set.name+"'. Expected type 'PageSet'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");throw new TypeError("3rd input argument '"+source_page_set+"' in function 'movePageSet' is of type '"+typeof source_page_set+"'. Expected type 'PageSet'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");}if(flag instanceof Promise)throw new TypeError("4th input argument in function 'movePageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flag)throw new TypeError("4th input argument '"+flag+"' in function 'movePageSet' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: movePageSet(number, PDFDoc, PageSet, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.movePageSet",{dest_doc:this.id,move_before_page_number:move_before_page_number,src_doc:src_doc.id,source_page_set:source_page_set.id,flag:flag},this.userPriority)};PDFNet.PDFDoc.prototype.pagePushFront=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pagePushFront'. Expected 1 argument. Function Signature: pagePushFront(Page)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'pagePushFront' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'pagePushFront' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: pagePushFront(Page).");
throw new TypeError("1st input argument '"+page+"' in function 'pagePushFront' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: pagePushFront(Page).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.pagePushFront",{doc:this.id,page:page.id},this.userPriority)};PDFNet.PDFDoc.prototype.pagePushBack=function(page){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pagePushBack'. Expected 1 argument. Function Signature: pagePushBack(Page)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'pagePushBack' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'pagePushBack' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: pagePushBack(Page).");throw new TypeError("1st input argument '"+page+"' in function 'pagePushBack' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: pagePushBack(Page).");
}return PDFNet.messageHandler.sendWithPromise("PDFDoc.pagePushBack",{doc:this.id,page:page.id},this.userPriority)};PDFNet.PDFDoc.prototype.pageCreate=function(media_box){"undefined"===typeof media_box&&(media_box=new PDFNet.Rect(0,0,612,792));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pageCreate'. Expected at most 1 arguments. Function Signature: pageCreate(Rect)");if(media_box instanceof Promise)throw new TypeError("1st input argument in function 'pageCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(media_box instanceof PDFNet.Rect)&&"Rect"!=media_box.name){if("object"==typeof media_box)throw new TypeError("1st input argument in function 'pageCreate' is of type '"+media_box.name+"'. Expected type 'Rect'. Function Signature: pageCreate(Rect).");throw new TypeError("1st input argument '"+media_box+"' in function 'pageCreate' is of type '"+typeof media_box+"'. Expected type 'Rect'. Function Signature: pageCreate(Rect).");}if("undefined"!=typeof media_box.yieldFunction)throw Error("Function '"+
media_box.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'pageCreate'. Perhaps a yield statement is required for '"+media_box.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFDoc.pageCreate",{doc:this.id,media_box:media_box},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.PDFDoc.prototype.getFirstBookmark=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getFirstBookmark'. Expected 0 arguments. Function Signature: getFirstBookmark()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getFirstBookmark",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Bookmark(id)})};PDFNet.PDFDoc.prototype.addRootBookmark=function(root_bookmark){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addRootBookmark'. Expected 1 argument. Function Signature: addRootBookmark(Bookmark)");
if(root_bookmark instanceof Promise)throw new TypeError("1st input argument in function 'addRootBookmark' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(root_bookmark instanceof PDFNet.Bookmark)){if("object"==typeof root_bookmark)throw new TypeError("1st input argument in function 'addRootBookmark' is of type '"+root_bookmark.name+"'. Expected type 'Bookmark'. Function Signature: addRootBookmark(Bookmark).");throw new TypeError("1st input argument '"+root_bookmark+
"' in function 'addRootBookmark' is of type '"+typeof root_bookmark+"'. Expected type 'Bookmark'. Function Signature: addRootBookmark(Bookmark).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.addRootBookmark",{doc:this.id,root_bookmark:root_bookmark.id},this.userPriority)};PDFNet.PDFDoc.prototype.getTrailer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTrailer'. Expected 0 arguments. Function Signature: getTrailer()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getTrailer",
{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.getRoot=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRoot'. Expected 0 arguments. Function Signature: getRoot()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getRoot",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.jsContextInitialize=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'jsContextInitialize'. Expected 0 arguments. Function Signature: jsContextInitialize()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.jsContextInitialize",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.getPages=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPages'. Expected 0 arguments. Function Signature: getPages()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPages",
{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.getPageCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPageCount'. Expected 0 arguments. Function Signature: getPageCount()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPageCount",{doc:this.id},this.userPriority)};PDFNet.pdfGetDownloadedByteCount=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pdfGetDownloadedByteCount'. Expected 1 argument. Function Signature: pdfGetDownloadedByteCount(PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'pdfGetDownloadedByteCount' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'pdfGetDownloadedByteCount' is of type '"+
doc.name+"'. Expected type 'PDFDoc'. Function Signature: pdfGetDownloadedByteCount(PDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'pdfGetDownloadedByteCount' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: pdfGetDownloadedByteCount(PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("pdfGetDownloadedByteCount",{doc:doc.id},this.userPriority)};PDFNet.pdfGetTotalRemoteByteCount=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pdfGetTotalRemoteByteCount'. Expected 1 argument. Function Signature: pdfGetTotalRemoteByteCount(PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'pdfGetTotalRemoteByteCount' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'pdfGetTotalRemoteByteCount' is of type '"+
doc.name+"'. Expected type 'PDFDoc'. Function Signature: pdfGetTotalRemoteByteCount(PDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'pdfGetTotalRemoteByteCount' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: pdfGetTotalRemoteByteCount(PDFDoc).");}return PDFNet.messageHandler.sendWithPromise("pdfGetTotalRemoteByteCount",{doc:doc.id},this.userPriority)};PDFNet.PDFDoc.prototype.getFieldIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getFieldIteratorBegin'. Expected 0 arguments. Function Signature: getFieldIteratorBegin()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getFieldIteratorBegin",{doc:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getFieldIterator=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIterator'. Expected 1 argument. Function Signature: getFieldIterator(string)");
if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'getFieldIterator' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'getFieldIterator' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: getFieldIterator(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getFieldIterator",{doc:this.id,field_name:field_name},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getField=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getField'. Expected 1 argument. Function Signature: getField(string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'getField' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'getField' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: getField(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getField",{doc:this.id,field_name:field_name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Field(id)})};PDFNet.PDFDoc.prototype.fieldCreate=function(field_name,type,field_value,def_field_value){"undefined"===typeof field_value&&
(field_value=new PDFNet.Obj("0"));"undefined"===typeof def_field_value&&(def_field_value=new PDFNet.Obj("0"));if(2>arguments.length||4<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fieldCreate'. Expected 2 to 4 arguments. Function Signature: fieldCreate(string, number, Obj, Obj)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'fieldCreate' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: fieldCreate(string, number, Obj, Obj).");if(type instanceof Promise)throw new TypeError("2nd input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("2nd input argument '"+type+"' in function 'fieldCreate' is of type '"+
typeof type+"'. Expected type 'number'. Function Signature: fieldCreate(string, number, Obj, Obj).");if(field_value instanceof Promise)throw new TypeError("3rd input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(field_value instanceof PDFNet.Obj)){if("object"==typeof field_value)throw new TypeError("3rd input argument in function 'fieldCreate' is of type '"+field_value.name+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj, Obj).");
throw new TypeError("3rd input argument '"+field_value+"' in function 'fieldCreate' is of type '"+typeof field_value+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj, Obj).");}if(def_field_value instanceof Promise)throw new TypeError("4th input argument in function 'fieldCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(def_field_value instanceof PDFNet.Obj)){if("object"==typeof def_field_value)throw new TypeError("4th input argument in function 'fieldCreate' is of type '"+
def_field_value.name+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj, Obj).");throw new TypeError("4th input argument '"+def_field_value+"' in function 'fieldCreate' is of type '"+typeof def_field_value+"'. Expected type 'Obj'. Function Signature: fieldCreate(string, number, Obj, Obj).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.fieldCreate",{doc:this.id,field_name:field_name,type:type,field_value:field_value.id,def_field_value:def_field_value.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Field(id)})};PDFNet.PDFDoc.prototype.fieldCreateFromStrings=function(field_name,type,field_value,def_field_value){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fieldCreateFromStrings'. Expected 4 arguments. Function Signature: fieldCreateFromStrings(string, number, string, string)");if(field_name instanceof Promise)throw new TypeError("1st input argument in function 'fieldCreateFromStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof field_name)throw new TypeError("1st input argument '"+field_name+"' in function 'fieldCreateFromStrings' is of type '"+typeof field_name+"'. Expected type 'string'. Function Signature: fieldCreateFromStrings(string, number, string, string).");if(type instanceof Promise)throw new TypeError("2nd input argument in function 'fieldCreateFromStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("2nd input argument '"+
type+"' in function 'fieldCreateFromStrings' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: fieldCreateFromStrings(string, number, string, string).");if(field_value instanceof Promise)throw new TypeError("3rd input argument in function 'fieldCreateFromStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_value)throw new TypeError("3rd input argument '"+field_value+"' in function 'fieldCreateFromStrings' is of type '"+
typeof field_value+"'. Expected type 'string'. Function Signature: fieldCreateFromStrings(string, number, string, string).");if(def_field_value instanceof Promise)throw new TypeError("4th input argument in function 'fieldCreateFromStrings' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof def_field_value)throw new TypeError("4th input argument '"+def_field_value+"' in function 'fieldCreateFromStrings' is of type '"+typeof def_field_value+"'. Expected type 'string'. Function Signature: fieldCreateFromStrings(string, number, string, string).");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.fieldCreateFromStrings",{doc:this.id,field_name:field_name,type:type,field_value:field_value,def_field_value:def_field_value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Field(id)})};PDFNet.PDFDoc.prototype.refreshFieldAppearances=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'refreshFieldAppearances'. Expected 0 arguments. Function Signature: refreshFieldAppearances()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.refreshFieldAppearances",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.flattenAnnotations=function(forms_only){"undefined"===typeof forms_only&&(forms_only=!1);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flattenAnnotations'. Expected at most 1 arguments. Function Signature: flattenAnnotations(boolean)");if(forms_only instanceof Promise)throw new TypeError("1st input argument in function 'flattenAnnotations' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof forms_only)throw new TypeError("1st input argument '"+forms_only+"' in function 'flattenAnnotations' is of type '"+typeof forms_only+"'. Expected type 'boolean'. Function Signature: flattenAnnotations(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.flattenAnnotations",{doc:this.id,forms_only:forms_only},this.userPriority)};PDFNet.PDFDoc.prototype.flattenAnnotationsAdvanced=function(flags){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'flattenAnnotationsAdvanced'. Expected 1 argument. Function Signature: flattenAnnotationsAdvanced(number)");
if(flags instanceof Promise)throw new TypeError("1st input argument in function 'flattenAnnotationsAdvanced' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flags)throw new TypeError("1st input argument '"+flags+"' in function 'flattenAnnotationsAdvanced' is of type '"+typeof flags+"'. Expected type 'number'. Function Signature: flattenAnnotationsAdvanced(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.flattenAnnotationsAdvanced",
{doc:this.id,flags:flags},this.userPriority)};PDFNet.PDFDoc.prototype.getAcroForm=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAcroForm'. Expected 0 arguments. Function Signature: getAcroForm()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getAcroForm",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.fdfExtract=function(flag){"undefined"===typeof flag&&(flag=
PDFNet.PDFDoc.ExtractFlag.e_forms_only);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fdfExtract'. Expected at most 1 arguments. Function Signature: fdfExtract(number)");if(flag instanceof Promise)throw new TypeError("1st input argument in function 'fdfExtract' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'fdfExtract' is of type '"+
typeof flag+"'. Expected type 'number'. Function Signature: fdfExtract(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfExtract",{doc:this.id,flag:flag},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.fdfExtractPageSet=function(pages_to_extract,flag){"undefined"===typeof flag&&(flag=PDFNet.PDFDoc.ExtractFlag.e_forms_only);if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'fdfExtractPageSet'. Expected 1 to 2 arguments. Function Signature: fdfExtractPageSet(PageSet, number)");if(pages_to_extract instanceof Promise)throw new TypeError("1st input argument in function 'fdfExtractPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pages_to_extract instanceof PDFNet.PageSet)){if("object"==typeof pages_to_extract)throw new TypeError("1st input argument in function 'fdfExtractPageSet' is of type '"+
pages_to_extract.name+"'. Expected type 'PageSet'. Function Signature: fdfExtractPageSet(PageSet, number).");throw new TypeError("1st input argument '"+pages_to_extract+"' in function 'fdfExtractPageSet' is of type '"+typeof pages_to_extract+"'. Expected type 'PageSet'. Function Signature: fdfExtractPageSet(PageSet, number).");}if(flag instanceof Promise)throw new TypeError("2nd input argument in function 'fdfExtractPageSet' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flag)throw new TypeError("2nd input argument '"+flag+"' in function 'fdfExtractPageSet' is of type '"+typeof flag+"'. Expected type 'number'. Function Signature: fdfExtractPageSet(PageSet, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfExtractPageSet",{doc:this.id,pages_to_extract:pages_to_extract.id,flag:flag},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.fdfExtractAnnots=
function(annot_buf){annot_buf instanceof Array&&(annot_buf=new Float64Array(annot_buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fdfExtractAnnots'. Expected 1 argument. Function Signature: fdfExtractAnnots(ArrayBuffer)");if(annot_buf instanceof Promise)throw new TypeError("1st input argument in function 'fdfExtractAnnots' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(annot_buf.buffer)){if("object"==
typeof annot_buf)throw new TypeError("1st input argument in function 'fdfExtractAnnots' is of type '"+annot_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractAnnots(ArrayBuffer).");throw new TypeError("1st input argument '"+annot_buf+"' in function 'fdfExtractAnnots' is of type '"+typeof annot_buf+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractAnnots(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfExtractAnnots",{doc:this.id,annot_buf:annot_buf.buffer},
this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.fdfExtractCommand=function(annot_added_buf,annot_modified_buf,annot_deleted_buf){annot_added_buf instanceof Array&&(annot_added_buf=new Float64Array(annot_added_buf));annot_modified_buf instanceof Array&&(annot_modified_buf=new Float64Array(annot_modified_buf));annot_deleted_buf instanceof Array&&(annot_deleted_buf=new Float64Array(annot_deleted_buf));
if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fdfExtractCommand'. Expected 3 arguments. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer)");if(annot_added_buf instanceof Promise)throw new TypeError("1st input argument in function 'fdfExtractCommand' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(annot_added_buf.buffer)){if("object"==typeof annot_added_buf)throw new TypeError("1st input argument in function 'fdfExtractCommand' is of type '"+
annot_added_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");throw new TypeError("1st input argument '"+annot_added_buf+"' in function 'fdfExtractCommand' is of type '"+typeof annot_added_buf+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");}if(annot_modified_buf instanceof Promise)throw new TypeError("3rd input argument in function 'fdfExtractCommand' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(annot_modified_buf.buffer)){if("object"==typeof annot_modified_buf)throw new TypeError("3rd input argument in function 'fdfExtractCommand' is of type '"+annot_modified_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");throw new TypeError("3rd input argument '"+annot_modified_buf+"' in function 'fdfExtractCommand' is of type '"+typeof annot_modified_buf+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");
}if(annot_deleted_buf instanceof Promise)throw new TypeError("5th input argument in function 'fdfExtractCommand' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(annot_deleted_buf.buffer)){if("object"==typeof annot_deleted_buf)throw new TypeError("5th input argument in function 'fdfExtractCommand' is of type '"+annot_deleted_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");
throw new TypeError("5th input argument '"+annot_deleted_buf+"' in function 'fdfExtractCommand' is of type '"+typeof annot_deleted_buf+"'. Expected type 'ArrayBuffer'. Function Signature: fdfExtractCommand(ArrayBuffer, ArrayBuffer, ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfExtractCommand",{doc:this.id,annot_added_buf:annot_added_buf.buffer,annot_modified_buf:annot_modified_buf.buffer,annot_deleted_buf:annot_deleted_buf.buffer},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.FDFDoc(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.fdfMerge=function(fdf_doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fdfMerge'. Expected 1 argument. Function Signature: fdfMerge(FDFDoc)");if(fdf_doc instanceof Promise)throw new TypeError("1st input argument in function 'fdfMerge' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(fdf_doc instanceof
PDFNet.PDFDoc||fdf_doc instanceof PDFNet.SDFDoc||fdf_doc instanceof PDFNet.FDFDoc)){if("object"==typeof fdf_doc)throw new TypeError("1st input argument in function 'fdfMerge' is of type '"+fdf_doc.name+"'. Expected type 'FDFDoc'. Function Signature: fdfMerge(FDFDoc).");throw new TypeError("1st input argument '"+fdf_doc+"' in function 'fdfMerge' is of type '"+typeof fdf_doc+"'. Expected type 'FDFDoc'. Function Signature: fdfMerge(FDFDoc).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfMerge",
{doc:this.id,fdf_doc:fdf_doc.id},this.userPriority)};PDFNet.PDFDoc.prototype.fdfUpdate=function(fdf_doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fdfUpdate'. Expected 1 argument. Function Signature: fdfUpdate(FDFDoc)");if(fdf_doc instanceof Promise)throw new TypeError("1st input argument in function 'fdfUpdate' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(fdf_doc instanceof PDFNet.PDFDoc||fdf_doc instanceof
PDFNet.SDFDoc||fdf_doc instanceof PDFNet.FDFDoc)){if("object"==typeof fdf_doc)throw new TypeError("1st input argument in function 'fdfUpdate' is of type '"+fdf_doc.name+"'. Expected type 'FDFDoc'. Function Signature: fdfUpdate(FDFDoc).");throw new TypeError("1st input argument '"+fdf_doc+"' in function 'fdfUpdate' is of type '"+typeof fdf_doc+"'. Expected type 'FDFDoc'. Function Signature: fdfUpdate(FDFDoc).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.fdfUpdate",{doc:this.id,fdf_doc:fdf_doc.id},
this.userPriority)};PDFNet.PDFDoc.prototype.getOpenAction=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOpenAction'. Expected 0 arguments. Function Signature: getOpenAction()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getOpenAction",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Action(id)})};PDFNet.PDFDoc.prototype.setOpenAction=function(action){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setOpenAction'. Expected 1 argument. Function Signature: setOpenAction(Action)");if(action instanceof Promise)throw new TypeError("1st input argument in function 'setOpenAction' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(action instanceof PDFNet.Action)){if("object"==typeof action)throw new TypeError("1st input argument in function 'setOpenAction' is of type '"+action.name+"'. Expected type 'Action'. Function Signature: setOpenAction(Action).");
throw new TypeError("1st input argument '"+action+"' in function 'setOpenAction' is of type '"+typeof action+"'. Expected type 'Action'. Function Signature: setOpenAction(Action).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.setOpenAction",{doc:this.id,action:action.id},this.userPriority)};PDFNet.PDFDoc.prototype.addFileAttachment=function(file_key,embedded_file){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addFileAttachment'. Expected 2 arguments. Function Signature: addFileAttachment(string, FileSpec)");
if(file_key instanceof Promise)throw new TypeError("1st input argument in function 'addFileAttachment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof file_key)throw new TypeError("1st input argument '"+file_key+"' in function 'addFileAttachment' is of type '"+typeof file_key+"'. Expected type 'string'. Function Signature: addFileAttachment(string, FileSpec).");if(embedded_file instanceof Promise)throw new TypeError("2nd input argument in function 'addFileAttachment' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(embedded_file instanceof PDFNet.FileSpec)){if("object"==typeof embedded_file)throw new TypeError("2nd input argument in function 'addFileAttachment' is of type '"+embedded_file.name+"'. Expected type 'FileSpec'. Function Signature: addFileAttachment(string, FileSpec).");throw new TypeError("2nd input argument '"+embedded_file+"' in function 'addFileAttachment' is of type '"+typeof embedded_file+"'. Expected type 'FileSpec'. Function Signature: addFileAttachment(string, FileSpec).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.addFileAttachment",
{doc:this.id,file_key:file_key,embedded_file:embedded_file.id},this.userPriority)};PDFNet.PDFDoc.prototype.getPageLabel=function(page_num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPageLabel'. Expected 1 argument. Function Signature: getPageLabel(number)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'getPageLabel' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof page_num)throw new TypeError("1st input argument '"+page_num+"' in function 'getPageLabel' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: getPageLabel(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPageLabel",{doc:this.id,page_num:page_num},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PageLabel(id)})};PDFNet.PDFDoc.prototype.setPageLabel=function(page_num,label){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setPageLabel'. Expected 2 arguments. Function Signature: setPageLabel(number, PageLabel)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'setPageLabel' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_num)throw new TypeError("1st input argument '"+page_num+"' in function 'setPageLabel' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: setPageLabel(number, PageLabel).");
if(label instanceof Promise)throw new TypeError("2nd input argument in function 'setPageLabel' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(label instanceof PDFNet.PageLabel)&&"PageLabel"!=label.name){if("object"==typeof label)throw new TypeError("2nd input argument in function 'setPageLabel' is of type '"+label.name+"'. Expected type 'PageLabel'. Function Signature: setPageLabel(number, PageLabel).");throw new TypeError("2nd input argument '"+label+"' in function 'setPageLabel' is of type '"+
typeof label+"'. Expected type 'PageLabel'. Function Signature: setPageLabel(number, PageLabel).");}if("undefined"!=typeof label.yieldFunction)throw Error("Function '"+label.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'setPageLabel'. Perhaps a yield statement is required for '"+label.yieldFunction+"'?");var me=this;this.yieldFunction="PDFDoc.setPageLabel";return PDFNet.messageHandler.sendWithPromise("PDFDoc.setPageLabel",
{doc:this.id,page_num:page_num,label:label},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.label,me)})};PDFNet.PDFDoc.prototype.removePageLabel=function(page_num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removePageLabel'. Expected 1 argument. Function Signature: removePageLabel(number)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'removePageLabel' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof page_num)throw new TypeError("1st input argument '"+page_num+"' in function 'removePageLabel' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: removePageLabel(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.removePageLabel",{doc:this.id,page_num:page_num},this.userPriority)};PDFNet.PDFDoc.prototype.getStructTree=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStructTree'. Expected 0 arguments. Function Signature: getStructTree()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getStructTree",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.STree(id)})};PDFNet.PDFDoc.prototype.hasOC=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasOC'. Expected 0 arguments. Function Signature: hasOC()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.hasOC",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.getOCGs=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOCGs'. Expected 0 arguments. Function Signature: getOCGs()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getOCGs",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.getOCGConfig=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOCGConfig'. Expected 0 arguments. Function Signature: getOCGConfig()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getOCGConfig",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OCGConfig(id)})};PDFNet.PDFDoc.prototype.createIndirectName=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectName'. Expected 1 argument. Function Signature: createIndirectName(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'createIndirectName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: createIndirectName(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectName",{doc:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createIndirectArray'. Expected 0 arguments. Function Signature: createIndirectArray()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectArray",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectBool=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectBool'. Expected 1 argument. Function Signature: createIndirectBool(boolean)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createIndirectBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: createIndirectBool(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectBool",{doc:this.id,value:value},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectDict'. Expected 0 arguments. Function Signature: createIndirectDict()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectDict",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectNull=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectNull'. Expected 0 arguments. Function Signature: createIndirectNull()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectNull",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectNumber=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectNumber'. Expected 1 argument. Function Signature: createIndirectNumber(number)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createIndirectNumber' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: createIndirectNumber(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectNumber",{doc:this.id,value:value},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectString=function(value,buf_size){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectString'. Expected 2 arguments. Function Signature: createIndirectString(number, number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createIndirectString' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: createIndirectString(number, number).");if(buf_size instanceof Promise)throw new TypeError("2nd input argument in function 'createIndirectString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof buf_size)throw new TypeError("2nd input argument '"+buf_size+"' in function 'createIndirectString' is of type '"+
typeof buf_size+"'. Expected type 'number'. Function Signature: createIndirectString(number, number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectString",{doc:this.id,value:value,buf_size:buf_size},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectStringFromUString=function(str){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStringFromUString'. Expected 1 argument. Function Signature: createIndirectStringFromUString(string)");
if(str instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectStringFromUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof str)throw new TypeError("1st input argument '"+str+"' in function 'createIndirectStringFromUString' is of type '"+typeof str+"'. Expected type 'string'. Function Signature: createIndirectStringFromUString(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectStringFromUString",
{doc:this.id,str:str},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectStreamFromFilter=function(data,no_own_filter_chain){"undefined"===typeof no_own_filter_chain&&(no_own_filter_chain=new PDFNet.Filter("0"));if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStreamFromFilter'. Expected 1 to 2 arguments. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter)");
if(data instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectStreamFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(data instanceof PDFNet.FilterReader)){if("object"==typeof data)throw new TypeError("1st input argument in function 'createIndirectStreamFromFilter' is of type '"+data.name+"'. Expected type 'FilterReader'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");throw new TypeError("1st input argument '"+
data+"' in function 'createIndirectStreamFromFilter' is of type '"+typeof data+"'. Expected type 'FilterReader'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");}if(no_own_filter_chain instanceof Promise)throw new TypeError("2nd input argument in function 'createIndirectStreamFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter_chain instanceof PDFNet.Filter)){if("object"==typeof no_own_filter_chain)throw new TypeError("2nd input argument in function 'createIndirectStreamFromFilter' is of type '"+
no_own_filter_chain.name+"'. Expected type 'Filter'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");throw new TypeError("2nd input argument '"+no_own_filter_chain+"' in function 'createIndirectStreamFromFilter' is of type '"+typeof no_own_filter_chain+"'. Expected type 'Filter'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");}var ownedObjIndex=-1;if(0!=no_own_filter_chain.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
no_own_filter_chain.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectStreamFromFilter",{doc:this.id,data:data.id,no_own_filter_chain:no_own_filter_chain.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.createIndirectStream=function(data,data_size,no_own_filter_chain){"undefined"===typeof no_own_filter_chain&&(no_own_filter_chain=new PDFNet.Filter("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStream'. Expected 2 to 3 arguments. Function Signature: createIndirectStream(string, number, Filter)");if(data instanceof
Promise)throw new TypeError("1st input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof data&&null!==data)throw new TypeError("1st input argument '"+data+"' in function 'createIndirectStream' is of type '"+typeof data+"'. Expected type 'string'. Function Signature: createIndirectStream(string, number, Filter).");if(data_size instanceof Promise)throw new TypeError("2nd input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof data_size)throw new TypeError("2nd input argument '"+data_size+"' in function 'createIndirectStream' is of type '"+typeof data_size+"'. Expected type 'number'. Function Signature: createIndirectStream(string, number, Filter).");if(no_own_filter_chain instanceof Promise)throw new TypeError("3rd input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter_chain instanceof PDFNet.Filter)){if("object"==
typeof no_own_filter_chain)throw new TypeError("3rd input argument in function 'createIndirectStream' is of type '"+no_own_filter_chain.name+"'. Expected type 'Filter'. Function Signature: createIndirectStream(string, number, Filter).");throw new TypeError("3rd input argument '"+no_own_filter_chain+"' in function 'createIndirectStream' is of type '"+typeof no_own_filter_chain+"'. Expected type 'Filter'. Function Signature: createIndirectStream(string, number, Filter).");}var ownedObjIndex=-1;if(0!=
no_own_filter_chain.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_filter_chain.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("PDFDoc.createIndirectStream",
{doc:this.id,data:data,data_size:data_size,no_own_filter_chain:no_own_filter_chain.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDoc.prototype.getSDFDoc=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFDoc'. Expected 0 arguments. Function Signature: getSDFDoc()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getSDFDoc",{doc:this.id},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.SDFDoc(id)})};PDFNet.PDFDoc.prototype.addHighlights=function(hilite){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addHighlights'. Expected 1 argument. Function Signature: addHighlights(string)");if(hilite instanceof Promise)throw new TypeError("1st input argument in function 'addHighlights' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof hilite)throw new TypeError("1st input argument '"+
hilite+"' in function 'addHighlights' is of type '"+typeof hilite+"'. Expected type 'string'. Function Signature: addHighlights(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.addHighlights",{doc:this.id,hilite:hilite},this.userPriority)};PDFNet.PDFDoc.prototype.isTagged=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isTagged'. Expected 0 arguments. Function Signature: isTagged()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.isTagged",
{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.hasSignatures=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasSignatures'. Expected 0 arguments. Function Signature: hasSignatures()");return PDFNet.messageHandler.sendWithPromise("PDFDoc.hasSignatures",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.addSignatureHandler=function(signature_handler){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addSignatureHandler'. Expected 1 argument. Function Signature: addSignatureHandler(SignatureHandler)");
if(signature_handler instanceof Promise)throw new TypeError("1st input argument in function 'addSignatureHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(signature_handler instanceof PDFNet.SignatureHandler)){if("object"==typeof signature_handler)throw new TypeError("1st input argument in function 'addSignatureHandler' is of type '"+signature_handler.name+"'. Expected type 'SignatureHandler'. Function Signature: addSignatureHandler(SignatureHandler).");
throw new TypeError("1st input argument '"+signature_handler+"' in function 'addSignatureHandler' is of type '"+typeof signature_handler+"'. Expected type 'SignatureHandler'. Function Signature: addSignatureHandler(SignatureHandler).");}return PDFNet.messageHandler.sendWithPromise("PDFDoc.addSignatureHandler",{doc:this.id,signature_handler:signature_handler.id},this.userPriority)};PDFNet.PDFDoc.prototype.addStdSignatureHandlerFromBuffer=function(pkcs12_buffer,pkcs12_pass){pkcs12_buffer instanceof
Array&&(pkcs12_buffer=new Float64Array(pkcs12_buffer));if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addStdSignatureHandlerFromBuffer'. Expected 2 arguments. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string)");if(pkcs12_buffer instanceof Promise)throw new TypeError("1st input argument in function 'addStdSignatureHandlerFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(pkcs12_buffer.buffer)){if("object"==
typeof pkcs12_buffer)throw new TypeError("1st input argument in function 'addStdSignatureHandlerFromBuffer' is of type '"+pkcs12_buffer.name+"'. Expected type 'ArrayBuffer'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string).");throw new TypeError("1st input argument '"+pkcs12_buffer+"' in function 'addStdSignatureHandlerFromBuffer' is of type '"+typeof pkcs12_buffer+"'. Expected type 'ArrayBuffer'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string).");
}if(pkcs12_pass instanceof Promise)throw new TypeError("3rd input argument in function 'addStdSignatureHandlerFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof pkcs12_pass)throw new TypeError("3rd input argument '"+pkcs12_pass+"' in function 'addStdSignatureHandlerFromBuffer' is of type '"+typeof pkcs12_pass+"'. Expected type 'string'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.addStdSignatureHandlerFromBuffer",
{doc:this.id,pkcs12_buffer:pkcs12_buffer.buffer,pkcs12_pass:pkcs12_pass},this.userPriority)};PDFNet.PDFDoc.prototype.removeSignatureHandler=function(signature_handler_id){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeSignatureHandler'. Expected 1 argument. Function Signature: removeSignatureHandler(number)");if(signature_handler_id instanceof Promise)throw new TypeError("1st input argument in function 'removeSignatureHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof signature_handler_id)throw new TypeError("1st input argument '"+signature_handler_id+"' in function 'removeSignatureHandler' is of type '"+typeof signature_handler_id+"'. Expected type 'number'. Function Signature: removeSignatureHandler(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.removeSignatureHandler",{doc:this.id,signature_handler_id:signature_handler_id},this.userPriority)};PDFNet.PDFDoc.prototype.getSignatureHandler=function(signature_handler_id){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSignatureHandler'. Expected 1 argument. Function Signature: getSignatureHandler(number)");if(signature_handler_id instanceof Promise)throw new TypeError("1st input argument in function 'getSignatureHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof signature_handler_id)throw new TypeError("1st input argument '"+signature_handler_id+"' in function 'getSignatureHandler' is of type '"+
typeof signature_handler_id+"'. Expected type 'number'. Function Signature: getSignatureHandler(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getSignatureHandler",{doc:this.id,signature_handler_id:signature_handler_id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SignatureHandler(id)})};PDFNet.PDFDoc.prototype.generateThumbnails=function(size){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'generateThumbnails'. Expected 1 argument. Function Signature: generateThumbnails(number)");
if(size instanceof Promise)throw new TypeError("1st input argument in function 'generateThumbnails' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size)throw new TypeError("1st input argument '"+size+"' in function 'generateThumbnails' is of type '"+typeof size+"'. Expected type 'number'. Function Signature: generateThumbnails(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.generateThumbnails",{doc:this.id,size:size},this.userPriority)};
PDFNet.PDFDoc.prototype.appendVisualDiff=function(p1,p2,opts){if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'appendVisualDiff'. Expected 2 to 3 arguments. Function Signature: appendVisualDiff(Page, Page, OptionBase)");if(p1 instanceof Promise)throw new TypeError("1st input argument in function 'appendVisualDiff' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(p1 instanceof PDFNet.Page)){if("object"==
typeof p1)throw new TypeError("1st input argument in function 'appendVisualDiff' is of type '"+p1.name+"'. Expected type 'Page'. Function Signature: appendVisualDiff(Page, Page, OptionBase).");throw new TypeError("1st input argument '"+p1+"' in function 'appendVisualDiff' is of type '"+typeof p1+"'. Expected type 'Page'. Function Signature: appendVisualDiff(Page, Page, OptionBase).");}if(p2 instanceof Promise)throw new TypeError("2nd input argument in function 'appendVisualDiff' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(p2 instanceof PDFNet.Page)){if("object"==typeof p2)throw new TypeError("2nd input argument in function 'appendVisualDiff' is of type '"+p2.name+"'. Expected type 'Page'. Function Signature: appendVisualDiff(Page, Page, OptionBase).");throw new TypeError("2nd input argument '"+p2+"' in function 'appendVisualDiff' is of type '"+typeof p2+"'. Expected type 'Page'. Function Signature: appendVisualDiff(Page, Page, OptionBase).");}if(opts instanceof Promise)throw new TypeError("3rd input argument in function 'appendVisualDiff' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(opts)if("object"===typeof opts)if("function"===typeof opts.getJsonString)opts=opts.getJsonString();else throw new TypeError("3rd input argument in function 'appendVisualDiff' is an 'oject' which is expected to have the 'getJsonString' function");else throw new TypeError("3rd input argument in function 'appendVisualDiff' is of type '"+opts.name+"'. Expected type 'object'. Function Signature: appendVisualDiff(Page, Page, OptionBase).");else opts="{}";if("undefined"!=typeof opts.yieldFunction)throw Error("Function '"+
opts.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'appendVisualDiff'. Perhaps a yield statement is required for '"+opts.yieldFunction+"'?");var me=this;this.yieldFunction="PDFDoc.appendVisualDiff";return PDFNet.messageHandler.sendWithPromise("PDFDoc.appendVisualDiff",{doc:this.id,p1:p1.id,p2:p2.id,opts:opts},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.opts,me)})};PDFNet.PDFDoc.prototype.getGeometryCollectionForPage=
function(page_num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getGeometryCollectionForPage'. Expected 1 argument. Function Signature: getGeometryCollectionForPage(number)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'getGeometryCollectionForPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_num)throw new TypeError("1st input argument '"+page_num+
"' in function 'getGeometryCollectionForPage' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: getGeometryCollectionForPage(number).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getGeometryCollectionForPage",{in_pdfdoc:this.id,page_num:page_num},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.GeometryCollection(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDocInfo.prototype.getTitle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTitle'. Expected 0 arguments. Function Signature: getTitle()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getTitle",{info:this.id},this.userPriority)};PDFNet.PDFDocInfo.prototype.getTitleObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTitleObj'. Expected 0 arguments. Function Signature: getTitleObj()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getTitleObj",{info:this.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setTitle=function(title){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTitle'. Expected 1 argument. Function Signature: setTitle(string)");if(title instanceof Promise)throw new TypeError("1st input argument in function 'setTitle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof title)throw new TypeError("1st input argument '"+
title+"' in function 'setTitle' is of type '"+typeof title+"'. Expected type 'string'. Function Signature: setTitle(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setTitle",{info:this.id,title:title},this.userPriority)};PDFNet.PDFDocInfo.prototype.getAuthor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAuthor'. Expected 0 arguments. Function Signature: getAuthor()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getAuthor",
{info:this.id},this.userPriority)};PDFNet.PDFDocInfo.prototype.getAuthorObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAuthorObj'. Expected 0 arguments. Function Signature: getAuthorObj()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getAuthorObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setAuthor=function(author){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setAuthor'. Expected 1 argument. Function Signature: setAuthor(string)");if(author instanceof Promise)throw new TypeError("1st input argument in function 'setAuthor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof author)throw new TypeError("1st input argument '"+author+"' in function 'setAuthor' is of type '"+typeof author+"'. Expected type 'string'. Function Signature: setAuthor(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setAuthor",
{info:this.id,author:author},this.userPriority)};PDFNet.PDFDocInfo.prototype.getSubject=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSubject'. Expected 0 arguments. Function Signature: getSubject()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getSubject",{info:this.id},this.userPriority)};PDFNet.PDFDocInfo.prototype.getSubjectObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSubjectObj'. Expected 0 arguments. Function Signature: getSubjectObj()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getSubjectObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setSubject=function(subject){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSubject'. Expected 1 argument. Function Signature: setSubject(string)");if(subject instanceof Promise)throw new TypeError("1st input argument in function 'setSubject' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof subject)throw new TypeError("1st input argument '"+subject+"' in function 'setSubject' is of type '"+typeof subject+"'. Expected type 'string'. Function Signature: setSubject(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setSubject",{info:this.id,subject:subject},this.userPriority)};PDFNet.PDFDocInfo.prototype.getKeywords=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getKeywords'. Expected 0 arguments. Function Signature: getKeywords()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getKeywords",{info:this.id},this.userPriority)};PDFNet.PDFDocInfo.prototype.getKeywordsObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getKeywordsObj'. Expected 0 arguments. Function Signature: getKeywordsObj()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getKeywordsObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setKeywords=
function(keywords){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setKeywords'. Expected 1 argument. Function Signature: setKeywords(string)");if(keywords instanceof Promise)throw new TypeError("1st input argument in function 'setKeywords' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof keywords)throw new TypeError("1st input argument '"+keywords+"' in function 'setKeywords' is of type '"+typeof keywords+
"'. Expected type 'string'. Function Signature: setKeywords(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setKeywords",{info:this.id,keywords:keywords},this.userPriority)};PDFNet.PDFDocInfo.prototype.getCreator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCreator'. Expected 0 arguments. Function Signature: getCreator()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getCreator",{info:this.id},this.userPriority)};
PDFNet.PDFDocInfo.prototype.getCreatorObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCreatorObj'. Expected 0 arguments. Function Signature: getCreatorObj()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getCreatorObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setCreator=function(creator){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setCreator'. Expected 1 argument. Function Signature: setCreator(string)");if(creator instanceof Promise)throw new TypeError("1st input argument in function 'setCreator' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof creator)throw new TypeError("1st input argument '"+creator+"' in function 'setCreator' is of type '"+typeof creator+"'. Expected type 'string'. Function Signature: setCreator(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setCreator",
{info:this.id,creator:creator},this.userPriority)};PDFNet.PDFDocInfo.prototype.getProducer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getProducer'. Expected 0 arguments. Function Signature: getProducer()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getProducer",{info:this.id},this.userPriority)};PDFNet.PDFDocInfo.prototype.getProducerObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getProducerObj'. Expected 0 arguments. Function Signature: getProducerObj()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getProducerObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.prototype.setProducer=function(producer){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setProducer'. Expected 1 argument. Function Signature: setProducer(string)");if(producer instanceof Promise)throw new TypeError("1st input argument in function 'setProducer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof producer)throw new TypeError("1st input argument '"+producer+"' in function 'setProducer' is of type '"+typeof producer+"'. Expected type 'string'. Function Signature: setProducer(string).");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setProducer",{info:this.id,producer:producer},this.userPriority)};PDFNet.PDFDocInfo.prototype.getCreationDate=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCreationDate'. Expected 0 arguments. Function Signature: getCreationDate()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getCreationDate",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Date(id)})};PDFNet.PDFDocInfo.prototype.setCreationDate=function(creation_date){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCreationDate'. Expected 1 argument. Function Signature: setCreationDate(Date)");if(creation_date instanceof Promise)throw new TypeError("1st input argument in function 'setCreationDate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(creation_date instanceof PDFNet.Date)&&"Date"!=creation_date.name){if("object"==typeof creation_date)throw new TypeError("1st input argument in function 'setCreationDate' is of type '"+creation_date.name+"'. Expected type 'Date'. Function Signature: setCreationDate(Date).");throw new TypeError("1st input argument '"+creation_date+"' in function 'setCreationDate' is of type '"+typeof creation_date+"'. Expected type 'Date'. Function Signature: setCreationDate(Date).");}if("undefined"!=typeof creation_date.yieldFunction)throw Error("Function '"+
creation_date.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setCreationDate'. Perhaps a yield statement is required for '"+creation_date.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setCreationDate",{info:this.id,creation_date:creation_date},this.userPriority)};PDFNet.PDFDocInfo.prototype.getModDate=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getModDate'. Expected 0 arguments. Function Signature: getModDate()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getModDate",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Date(id)})};PDFNet.PDFDocInfo.prototype.setModDate=function(mod_date){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setModDate'. Expected 1 argument. Function Signature: setModDate(Date)");if(mod_date instanceof Promise)throw new TypeError("1st input argument in function 'setModDate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(mod_date instanceof PDFNet.Date)&&"Date"!=mod_date.name){if("object"==typeof mod_date)throw new TypeError("1st input argument in function 'setModDate' is of type '"+mod_date.name+"'. Expected type 'Date'. Function Signature: setModDate(Date).");throw new TypeError("1st input argument '"+mod_date+"' in function 'setModDate' is of type '"+typeof mod_date+"'. Expected type 'Date'. Function Signature: setModDate(Date).");}if("undefined"!=typeof mod_date.yieldFunction)throw Error("Function '"+mod_date.yieldFunction+
"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setModDate'. Perhaps a yield statement is required for '"+mod_date.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.setModDate",{info:this.id,mod_date:mod_date},this.userPriority)};PDFNet.PDFDocInfo.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");
return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.getSDFObj",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocInfo.create=function(tr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(tr instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(tr instanceof PDFNet.Obj)){if("object"==typeof tr)throw new TypeError("1st input argument in function 'create' is of type '"+tr.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+tr+"' in function 'create' is of type '"+typeof tr+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("pdfDocInfoCreate",{tr:tr.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PDFDocInfo(id)})};
PDFNet.PDFDocInfo.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("PDFDocInfo.copy",{info:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PDFDocInfo(id)})};PDFNet.PDFDocViewPrefs.prototype.setInitialPage=function(dest){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setInitialPage'. Expected 1 argument. Function Signature: setInitialPage(Destination)");
if(dest instanceof Promise)throw new TypeError("1st input argument in function 'setInitialPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest instanceof PDFNet.Destination)){if("object"==typeof dest)throw new TypeError("1st input argument in function 'setInitialPage' is of type '"+dest.name+"'. Expected type 'Destination'. Function Signature: setInitialPage(Destination).");throw new TypeError("1st input argument '"+dest+"' in function 'setInitialPage' is of type '"+
typeof dest+"'. Expected type 'Destination'. Function Signature: setInitialPage(Destination).");}return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setInitialPage",{p:this.id,dest:dest.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setPageMode=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPageMode'. Expected 1 argument. Function Signature: setPageMode(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setPageMode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'setPageMode' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setPageMode(number).");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setPageMode",{p:this.id,mode:mode},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getPageMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPageMode'. Expected 0 arguments. Function Signature: getPageMode()");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getPageMode",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setLayoutMode=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLayoutMode'. Expected 1 argument. Function Signature: setLayoutMode(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setLayoutMode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'setLayoutMode' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setLayoutMode(number).");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setLayoutMode",{p:this.id,mode:mode},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getLayoutMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLayoutMode'. Expected 0 arguments. Function Signature: getLayoutMode()");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getLayoutMode",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setPref=function(pref,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPref'. Expected 2 arguments. Function Signature: setPref(number, boolean)");if(pref instanceof Promise)throw new TypeError("1st input argument in function 'setPref' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pref)throw new TypeError("1st input argument '"+pref+"' in function 'setPref' is of type '"+typeof pref+"'. Expected type 'number'. Function Signature: setPref(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'setPref' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'setPref' is of type '"+typeof value+
"'. Expected type 'boolean'. Function Signature: setPref(number, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setPref",{p:this.id,pref:pref,value:value},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getPref=function(pref){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPref'. Expected 1 argument. Function Signature: getPref(number)");if(pref instanceof Promise)throw new TypeError("1st input argument in function 'getPref' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pref)throw new TypeError("1st input argument '"+pref+"' in function 'getPref' is of type '"+typeof pref+"'. Expected type 'number'. Function Signature: getPref(number).");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getPref",{p:this.id,pref:pref},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setNonFullScreenPageMode=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setNonFullScreenPageMode'. Expected 1 argument. Function Signature: setNonFullScreenPageMode(number)");
if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setNonFullScreenPageMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'setNonFullScreenPageMode' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setNonFullScreenPageMode(number).");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setNonFullScreenPageMode",
{p:this.id,mode:mode},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getNonFullScreenPageMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNonFullScreenPageMode'. Expected 0 arguments. Function Signature: getNonFullScreenPageMode()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getNonFullScreenPageMode",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setDirection=function(left_to_right){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setDirection'. Expected 1 argument. Function Signature: setDirection(boolean)");if(left_to_right instanceof Promise)throw new TypeError("1st input argument in function 'setDirection' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof left_to_right)throw new TypeError("1st input argument '"+left_to_right+"' in function 'setDirection' is of type '"+typeof left_to_right+"'. Expected type 'boolean'. Function Signature: setDirection(boolean).");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setDirection",{p:this.id,left_to_right:left_to_right},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getDirection=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDirection'. Expected 0 arguments. Function Signature: getDirection()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getDirection",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setViewArea=
function(box){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setViewArea'. Expected 1 argument. Function Signature: setViewArea(number)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setViewArea' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box)throw new TypeError("1st input argument '"+box+"' in function 'setViewArea' is of type '"+typeof box+"'. Expected type 'number'. Function Signature: setViewArea(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setViewArea",{p:this.id,box:box},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getViewArea=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getViewArea'. Expected 0 arguments. Function Signature: getViewArea()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getViewArea",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setViewClip=function(box){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setViewClip'. Expected 1 argument. Function Signature: setViewClip(number)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setViewClip' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box)throw new TypeError("1st input argument '"+box+"' in function 'setViewClip' is of type '"+typeof box+"'. Expected type 'number'. Function Signature: setViewClip(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setViewClip",{p:this.id,box:box},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getViewClip=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getViewClip'. Expected 0 arguments. Function Signature: getViewClip()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getViewClip",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setPrintArea=function(box){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrintArea'. Expected 1 argument. Function Signature: setPrintArea(number)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setPrintArea' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box)throw new TypeError("1st input argument '"+box+"' in function 'setPrintArea' is of type '"+typeof box+"'. Expected type 'number'. Function Signature: setPrintArea(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setPrintArea",{p:this.id,box:box},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getPrintArea=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPrintArea'. Expected 0 arguments. Function Signature: getPrintArea()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getPrintArea",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.setPrintClip=function(box){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrintClip'. Expected 1 argument. Function Signature: setPrintClip(number)");if(box instanceof Promise)throw new TypeError("1st input argument in function 'setPrintClip' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof box)throw new TypeError("1st input argument '"+box+"' in function 'setPrintClip' is of type '"+typeof box+"'. Expected type 'number'. Function Signature: setPrintClip(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.setPrintClip",{p:this.id,box:box},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getPrintClip=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPrintClip'. Expected 0 arguments. Function Signature: getPrintClip()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getPrintClip",{p:this.id},this.userPriority)};PDFNet.PDFDocViewPrefs.prototype.getSDFObj=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.getSDFObj",{p:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.PDFDocViewPrefs.create=function(tr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");
if(tr instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(tr instanceof PDFNet.Obj)){if("object"==typeof tr)throw new TypeError("1st input argument in function 'create' is of type '"+tr.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+tr+"' in function 'create' is of type '"+typeof tr+"'. Expected type 'Obj'. Function Signature: create(Obj).");
}return PDFNet.messageHandler.sendWithPromise("pdfDocViewPrefsCreate",{tr:tr.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PDFDocViewPrefs(id)})};PDFNet.PDFDocViewPrefs.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("PDFDocViewPrefs.copy",{prefs:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.PDFDocViewPrefs(id)})};PDFNet.PDFRasterizer.create=function(type){"undefined"===typeof type&&(type=PDFNet.PDFRasterizer.Type.e_BuiltIn);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof type)throw new TypeError("1st input argument '"+type+"' in function 'create' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: create(number).");return PDFNet.messageHandler.sendWithPromise("pdfRasterizerCreate",{type:type},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFRasterizer(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFRasterizer.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.getChunkRendererPath=function(page,file_path,width,height,demult,device_mtx,clip,scrl_clp_regions,cancel){if(9!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getChunkRendererPath'. Expected 9 arguments. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean)");
if(page instanceof Promise)throw new TypeError("1st input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'getChunkRendererPath' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");throw new TypeError("1st input argument '"+
page+"' in function 'getChunkRendererPath' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");}if(file_path instanceof Promise)throw new TypeError("2nd input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof file_path)throw new TypeError("2nd input argument '"+file_path+"' in function 'getChunkRendererPath' is of type '"+
typeof file_path+"'. Expected type 'string'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");if(width instanceof Promise)throw new TypeError("3rd input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof width)throw new TypeError("3rd input argument '"+width+"' in function 'getChunkRendererPath' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");
if(height instanceof Promise)throw new TypeError("4th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("4th input argument '"+height+"' in function 'getChunkRendererPath' is of type '"+typeof height+"'. Expected type 'number'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");if(demult instanceof Promise)throw new TypeError("5th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof demult)throw new TypeError("5th input argument '"+demult+"' in function 'getChunkRendererPath' is of type '"+typeof demult+"'. Expected type 'boolean'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");if(device_mtx instanceof Promise)throw new TypeError("6th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(device_mtx instanceof
PDFNet.Matrix2D)&&"Matrix2D"!=device_mtx.name){if("object"==typeof device_mtx)throw new TypeError("6th input argument in function 'getChunkRendererPath' is of type '"+device_mtx.name+"'. Expected type 'Matrix2D'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");throw new TypeError("6th input argument '"+device_mtx+"' in function 'getChunkRendererPath' is of type '"+typeof device_mtx+"'. Expected type 'Matrix2D'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");
}if(clip instanceof Promise)throw new TypeError("7th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(clip instanceof PDFNet.Rect)&&"Rect"!=clip.name){if("object"==typeof clip)throw new TypeError("7th input argument in function 'getChunkRendererPath' is of type '"+clip.name+"'. Expected type 'Rect'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");
throw new TypeError("7th input argument '"+clip+"' in function 'getChunkRendererPath' is of type '"+typeof clip+"'. Expected type 'Rect'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");}if(scrl_clp_regions instanceof Promise)throw new TypeError("8th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(scrl_clp_regions instanceof PDFNet.Rect)&&"Rect"!=
scrl_clp_regions.name){if("object"==typeof scrl_clp_regions)throw new TypeError("8th input argument in function 'getChunkRendererPath' is of type '"+scrl_clp_regions.name+"'. Expected type 'Rect'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");throw new TypeError("8th input argument '"+scrl_clp_regions+"' in function 'getChunkRendererPath' is of type '"+typeof scrl_clp_regions+"'. Expected type 'Rect'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");
}if(cancel instanceof Promise)throw new TypeError("9th input argument in function 'getChunkRendererPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof cancel)throw new TypeError("9th input argument '"+cancel+"' in function 'getChunkRendererPath' is of type '"+typeof cancel+"'. Expected type 'boolean'. Function Signature: getChunkRendererPath(Page, string, number, number, boolean, Matrix2D, Rect, Rect, boolean).");if("undefined"!=typeof device_mtx.yieldFunction)throw Error("Function '"+
device_mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 6th input argument in function 'getChunkRendererPath'. Perhaps a yield statement is required for '"+device_mtx.yieldFunction+"'?");if("undefined"!=typeof clip.yieldFunction)throw Error("Function '"+clip.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 7th input argument in function 'getChunkRendererPath'. Perhaps a yield statement is required for '"+
clip.yieldFunction+"'?");if("undefined"!=typeof scrl_clp_regions.yieldFunction)throw Error("Function '"+scrl_clp_regions.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 8th input argument in function 'getChunkRendererPath'. Perhaps a yield statement is required for '"+scrl_clp_regions.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.getChunkRendererPath",{r:this.id,page:page.id,file_path:file_path,width:width,
height:height,demult:demult,device_mtx:device_mtx,clip:clip,scrl_clp_regions:scrl_clp_regions,cancel:cancel},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.ChunkRenderer(id)})};PDFNet.PDFRasterizer.prototype.setDrawAnnotations=function(render_annots){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDrawAnnotations'. Expected 1 argument. Function Signature: setDrawAnnotations(boolean)");if(render_annots instanceof Promise)throw new TypeError("1st input argument in function 'setDrawAnnotations' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof render_annots)throw new TypeError("1st input argument '"+render_annots+"' in function 'setDrawAnnotations' is of type '"+typeof render_annots+"'. Expected type 'boolean'. Function Signature: setDrawAnnotations(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setDrawAnnotations",{r:this.id,render_annots:render_annots},this.userPriority)};PDFNet.PDFRasterizer.prototype.setHighlightFields=function(highlight){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setHighlightFields'. Expected 1 argument. Function Signature: setHighlightFields(boolean)");if(highlight instanceof Promise)throw new TypeError("1st input argument in function 'setHighlightFields' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof highlight)throw new TypeError("1st input argument '"+highlight+"' in function 'setHighlightFields' is of type '"+typeof highlight+"'. Expected type 'boolean'. Function Signature: setHighlightFields(boolean).");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setHighlightFields",{r:this.id,highlight:highlight},this.userPriority)};PDFNet.PDFRasterizer.prototype.setAntiAliasing=function(enable_aa){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAntiAliasing'. Expected 1 argument. Function Signature: setAntiAliasing(boolean)");if(enable_aa instanceof Promise)throw new TypeError("1st input argument in function 'setAntiAliasing' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof enable_aa)throw new TypeError("1st input argument '"+enable_aa+"' in function 'setAntiAliasing' is of type '"+typeof enable_aa+"'. Expected type 'boolean'. Function Signature: setAntiAliasing(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setAntiAliasing",{r:this.id,enable_aa:enable_aa},this.userPriority)};PDFNet.PDFRasterizer.prototype.setPathHinting=function(enable_hinting){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathHinting'. Expected 1 argument. Function Signature: setPathHinting(boolean)");
if(enable_hinting instanceof Promise)throw new TypeError("1st input argument in function 'setPathHinting' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable_hinting)throw new TypeError("1st input argument '"+enable_hinting+"' in function 'setPathHinting' is of type '"+typeof enable_hinting+"'. Expected type 'boolean'. Function Signature: setPathHinting(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setPathHinting",
{r:this.id,enable_hinting:enable_hinting},this.userPriority)};PDFNet.PDFRasterizer.prototype.setThinLineAdjustment=function(grid_fit,stroke_adjust){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setThinLineAdjustment'. Expected 2 arguments. Function Signature: setThinLineAdjustment(boolean, boolean)");if(grid_fit instanceof Promise)throw new TypeError("1st input argument in function 'setThinLineAdjustment' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof grid_fit)throw new TypeError("1st input argument '"+grid_fit+"' in function 'setThinLineAdjustment' is of type '"+typeof grid_fit+"'. Expected type 'boolean'. Function Signature: setThinLineAdjustment(boolean, boolean).");if(stroke_adjust instanceof Promise)throw new TypeError("2nd input argument in function 'setThinLineAdjustment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof stroke_adjust)throw new TypeError("2nd input argument '"+
stroke_adjust+"' in function 'setThinLineAdjustment' is of type '"+typeof stroke_adjust+"'. Expected type 'boolean'. Function Signature: setThinLineAdjustment(boolean, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setThinLineAdjustment",{r:this.id,grid_fit:grid_fit,stroke_adjust:stroke_adjust},this.userPriority)};PDFNet.PDFRasterizer.prototype.setGamma=function(expgamma){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setGamma'. Expected 1 argument. Function Signature: setGamma(number)");
if(expgamma instanceof Promise)throw new TypeError("1st input argument in function 'setGamma' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof expgamma)throw new TypeError("1st input argument '"+expgamma+"' in function 'setGamma' is of type '"+typeof expgamma+"'. Expected type 'number'. Function Signature: setGamma(number).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setGamma",{r:this.id,expgamma:expgamma},this.userPriority)};
PDFNet.PDFRasterizer.prototype.setOCGContext=function(ctx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOCGContext'. Expected 1 argument. Function Signature: setOCGContext(OCGContext)");if(ctx instanceof Promise)throw new TypeError("1st input argument in function 'setOCGContext' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("1st input argument in function 'setOCGContext' is of type '"+
ctx.name+"'. Expected type 'OCGContext'. Function Signature: setOCGContext(OCGContext).");throw new TypeError("1st input argument '"+ctx+"' in function 'setOCGContext' is of type '"+typeof ctx+"'. Expected type 'OCGContext'. Function Signature: setOCGContext(OCGContext).");}return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setOCGContext",{r:this.id,ctx:ctx.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.setPrintMode=function(is_printing){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setPrintMode'. Expected 1 argument. Function Signature: setPrintMode(boolean)");if(is_printing instanceof Promise)throw new TypeError("1st input argument in function 'setPrintMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof is_printing)throw new TypeError("1st input argument '"+is_printing+"' in function 'setPrintMode' is of type '"+typeof is_printing+"'. Expected type 'boolean'. Function Signature: setPrintMode(boolean).");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setPrintMode",{r:this.id,is_printing:is_printing},this.userPriority)};PDFNet.PDFRasterizer.prototype.setImageSmoothing=function(smoothing_enabled,hq_image_resampling){"undefined"===typeof smoothing_enabled&&(smoothing_enabled=!0);"undefined"===typeof hq_image_resampling&&(hq_image_resampling=!1);if(2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setImageSmoothing'. Expected at most 2 arguments. Function Signature: setImageSmoothing(boolean, boolean)");
if(smoothing_enabled instanceof Promise)throw new TypeError("1st input argument in function 'setImageSmoothing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof smoothing_enabled)throw new TypeError("1st input argument '"+smoothing_enabled+"' in function 'setImageSmoothing' is of type '"+typeof smoothing_enabled+"'. Expected type 'boolean'. Function Signature: setImageSmoothing(boolean, boolean).");if(hq_image_resampling instanceof Promise)throw new TypeError("2nd input argument in function 'setImageSmoothing' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof hq_image_resampling)throw new TypeError("2nd input argument '"+hq_image_resampling+"' in function 'setImageSmoothing' is of type '"+typeof hq_image_resampling+"'. Expected type 'boolean'. Function Signature: setImageSmoothing(boolean, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setImageSmoothing",{r:this.id,smoothing_enabled:smoothing_enabled,hq_image_resampling:hq_image_resampling},this.userPriority)};PDFNet.PDFRasterizer.prototype.setOverprint=function(op){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOverprint'. Expected 1 argument. Function Signature: setOverprint(number)");if(op instanceof Promise)throw new TypeError("1st input argument in function 'setOverprint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof op)throw new TypeError("1st input argument '"+op+"' in function 'setOverprint' is of type '"+typeof op+"'. Expected type 'number'. Function Signature: setOverprint(number).");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setOverprint",{r:this.id,op:op},this.userPriority)};PDFNet.PDFRasterizer.prototype.setCaching=function(enabled){"undefined"===typeof enabled&&(enabled=!0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCaching'. Expected at most 1 arguments. Function Signature: setCaching(boolean)");if(enabled instanceof Promise)throw new TypeError("1st input argument in function 'setCaching' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof enabled)throw new TypeError("1st input argument '"+enabled+"' in function 'setCaching' is of type '"+typeof enabled+"'. Expected type 'boolean'. Function Signature: setCaching(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setCaching",{r:this.id,enabled:enabled},this.userPriority)};PDFNet.PDFDraw.prototype.setOCGContext=function(ctx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOCGContext'. Expected 1 argument. Function Signature: setOCGContext(OCGContext)");
if(ctx instanceof Promise)throw new TypeError("1st input argument in function 'setOCGContext' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(ctx instanceof PDFNet.OCGContext)){if("object"==typeof ctx)throw new TypeError("1st input argument in function 'setOCGContext' is of type '"+ctx.name+"'. Expected type 'OCGContext'. Function Signature: setOCGContext(OCGContext).");throw new TypeError("1st input argument '"+ctx+"' in function 'setOCGContext' is of type '"+
typeof ctx+"'. Expected type 'OCGContext'. Function Signature: setOCGContext(OCGContext).");}return PDFNet.messageHandler.sendWithPromise("PDFDraw.setOCGContext",{r:this.id,ctx:ctx.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.setAnnotationState=function(annot,new_view_state){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAnnotationState'. Expected 2 arguments. Function Signature: setAnnotationState(Annot, number)");if(annot instanceof Promise)throw new TypeError("1st input argument in function 'setAnnotationState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'setAnnotationState' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: setAnnotationState(Annot, number).");throw new TypeError("1st input argument '"+annot+"' in function 'setAnnotationState' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: setAnnotationState(Annot, number).");}if(new_view_state instanceof Promise)throw new TypeError("2nd input argument in function 'setAnnotationState' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof new_view_state)throw new TypeError("2nd input argument '"+new_view_state+"' in function 'setAnnotationState' is of type '"+typeof new_view_state+"'. Expected type 'number'. Function Signature: setAnnotationState(Annot, number).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setAnnotationState",{r:this.id,annot:annot.id,new_view_state:new_view_state},this.userPriority)};PDFNet.PDFRasterizer.prototype.setRasterizerType=function(type){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setRasterizerType'. Expected 1 argument. Function Signature: setRasterizerType(number)");if(type instanceof Promise)throw new TypeError("1st input argument in function 'setRasterizerType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setRasterizerType' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: setRasterizerType(number).");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setRasterizerType",{r:this.id,type:type},this.userPriority)};PDFNet.PDFRasterizer.prototype.getRasterizerType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRasterizerType'. Expected 0 arguments. Function Signature: getRasterizerType()");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.getRasterizerType",{r:this.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.setColorPostProcessMode=
function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColorPostProcessMode'. Expected 1 argument. Function Signature: setColorPostProcessMode(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setColorPostProcessMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'setColorPostProcessMode' is of type '"+
typeof mode+"'. Expected type 'number'. Function Signature: setColorPostProcessMode(number).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.setColorPostProcessMode",{r:this.id,mode:mode},this.userPriority)};PDFNet.PDFRasterizer.prototype.getColorPostProcessMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorPostProcessMode'. Expected 0 arguments. Function Signature: getColorPostProcessMode()");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.getColorPostProcessMode",
{r:this.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.enableDisplayListCaching=function(enabled){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'enableDisplayListCaching'. Expected 1 argument. Function Signature: enableDisplayListCaching(boolean)");if(enabled instanceof Promise)throw new TypeError("1st input argument in function 'enableDisplayListCaching' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=
typeof enabled)throw new TypeError("1st input argument '"+enabled+"' in function 'enableDisplayListCaching' is of type '"+typeof enabled+"'. Expected type 'boolean'. Function Signature: enableDisplayListCaching(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.enableDisplayListCaching",{r:this.id,enabled:enabled},this.userPriority)};PDFNet.PDFRasterizer.prototype.updateBuffer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'updateBuffer'. Expected 0 arguments. Function Signature: updateBuffer()");
return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.updateBuffer",{r:this.id},this.userPriority)};PDFNet.PDFRasterizer.prototype.rasterizeAnnot=function(annot,page,device_mtx,demult,cancel){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'rasterizeAnnot'. Expected 5 arguments. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean)");if(annot instanceof Promise)throw new TypeError("1st input argument in function 'rasterizeAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'rasterizeAnnot' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");throw new TypeError("1st input argument '"+annot+"' in function 'rasterizeAnnot' is of type '"+typeof annot+"'. Expected type 'Annot'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");}if(page instanceof Promise)throw new TypeError("2nd input argument in function 'rasterizeAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("2nd input argument in function 'rasterizeAnnot' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");throw new TypeError("2nd input argument '"+page+"' in function 'rasterizeAnnot' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");}if(device_mtx instanceof Promise)throw new TypeError("3rd input argument in function 'rasterizeAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(device_mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=device_mtx.name){if("object"==typeof device_mtx)throw new TypeError("3rd input argument in function 'rasterizeAnnot' is of type '"+device_mtx.name+"'. Expected type 'Matrix2D'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");throw new TypeError("3rd input argument '"+device_mtx+"' in function 'rasterizeAnnot' is of type '"+typeof device_mtx+"'. Expected type 'Matrix2D'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");
}if(demult instanceof Promise)throw new TypeError("4th input argument in function 'rasterizeAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof demult)throw new TypeError("4th input argument '"+demult+"' in function 'rasterizeAnnot' is of type '"+typeof demult+"'. Expected type 'boolean'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");if(cancel instanceof Promise)throw new TypeError("5th input argument in function 'rasterizeAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof cancel)throw new TypeError("5th input argument '"+cancel+"' in function 'rasterizeAnnot' is of type '"+typeof cancel+"'. Expected type 'boolean'. Function Signature: rasterizeAnnot(Annot, Page, Matrix2D, boolean, boolean).");if("undefined"!=typeof device_mtx.yieldFunction)throw Error("Function '"+device_mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 3rd input argument in function 'rasterizeAnnot'. Perhaps a yield statement is required for '"+
device_mtx.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFRasterizer.rasterizeAnnot",{r:this.id,annot:annot.id,page:page.id,device_mtx:device_mtx,demult:demult,cancel:cancel},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.OwnedBitmap(id)})};PDFNet.PDFDraw.create=function(dpi){"undefined"===typeof dpi&&(dpi=92);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(number)");
if(dpi instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dpi)throw new TypeError("1st input argument '"+dpi+"' in function 'create' is of type '"+typeof dpi+"'. Expected type 'number'. Function Signature: create(number).");return PDFNet.messageHandler.sendWithPromise("pdfDrawCreate",{dpi:dpi},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.PDFDraw(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDraw.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("PDFDraw.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.PDFDraw.prototype.setRasterizerType=function(type){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRasterizerType'. Expected 1 argument. Function Signature: setRasterizerType(number)");if(type instanceof
Promise)throw new TypeError("1st input argument in function 'setRasterizerType' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof type)throw new TypeError("1st input argument '"+type+"' in function 'setRasterizerType' is of type '"+typeof type+"'. Expected type 'number'. Function Signature: setRasterizerType(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setRasterizerType",{d:this.id,type:type},this.userPriority)};PDFNet.PDFDraw.prototype.setDPI=
function(dpi){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDPI'. Expected 1 argument. Function Signature: setDPI(number)");if(dpi instanceof Promise)throw new TypeError("1st input argument in function 'setDPI' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof dpi)throw new TypeError("1st input argument '"+dpi+"' in function 'setDPI' is of type '"+typeof dpi+"'. Expected type 'number'. Function Signature: setDPI(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDraw.setDPI",{d:this.id,dpi:dpi},this.userPriority)};PDFNet.PDFDraw.prototype.setImageSize=function(width,height,preserve_aspect_ratio){"undefined"===typeof preserve_aspect_ratio&&(preserve_aspect_ratio=!0);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setImageSize'. Expected 2 to 3 arguments. Function Signature: setImageSize(number, number, boolean)");if(width instanceof Promise)throw new TypeError("1st input argument in function 'setImageSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof width)throw new TypeError("1st input argument '"+width+"' in function 'setImageSize' is of type '"+typeof width+"'. Expected type 'number'. Function Signature: setImageSize(number, number, boolean).");if(height instanceof Promise)throw new TypeError("2nd input argument in function 'setImageSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof height)throw new TypeError("2nd input argument '"+height+"' in function 'setImageSize' is of type '"+
typeof height+"'. Expected type 'number'. Function Signature: setImageSize(number, number, boolean).");if(preserve_aspect_ratio instanceof Promise)throw new TypeError("3rd input argument in function 'setImageSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof preserve_aspect_ratio)throw new TypeError("3rd input argument '"+preserve_aspect_ratio+"' in function 'setImageSize' is of type '"+typeof preserve_aspect_ratio+"'. Expected type 'boolean'. Function Signature: setImageSize(number, number, boolean).");
return PDFNet.messageHandler.sendWithPromise("PDFDraw.setImageSize",{d:this.id,width:width,height:height,preserve_aspect_ratio:preserve_aspect_ratio},this.userPriority)};PDFNet.PDFDraw.prototype.setPageBox=function(region){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPageBox'. Expected 1 argument. Function Signature: setPageBox(number)");if(region instanceof Promise)throw new TypeError("1st input argument in function 'setPageBox' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof region)throw new TypeError("1st input argument '"+region+"' in function 'setPageBox' is of type '"+typeof region+"'. Expected type 'number'. Function Signature: setPageBox(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setPageBox",{d:this.id,region:region},this.userPriority)};PDFNet.PDFDraw.prototype.setClipRect=function(rect){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setClipRect'. Expected 1 argument. Function Signature: setClipRect(Rect)");
if(rect instanceof Promise)throw new TypeError("1st input argument in function 'setClipRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(rect instanceof PDFNet.Rect)&&"Rect"!=rect.name){if("object"==typeof rect)throw new TypeError("1st input argument in function 'setClipRect' is of type '"+rect.name+"'. Expected type 'Rect'. Function Signature: setClipRect(Rect).");throw new TypeError("1st input argument '"+rect+"' in function 'setClipRect' is of type '"+
typeof rect+"'. Expected type 'Rect'. Function Signature: setClipRect(Rect).");}if("undefined"!=typeof rect.yieldFunction)throw Error("Function '"+rect.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setClipRect'. Perhaps a yield statement is required for '"+rect.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setClipRect",{d:this.id,rect:rect},this.userPriority)};PDFNet.PDFDraw.prototype.setFlipYAxis=
function(flip_y){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFlipYAxis'. Expected 1 argument. Function Signature: setFlipYAxis(boolean)");if(flip_y instanceof Promise)throw new TypeError("1st input argument in function 'setFlipYAxis' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof flip_y)throw new TypeError("1st input argument '"+flip_y+"' in function 'setFlipYAxis' is of type '"+typeof flip_y+
"'. Expected type 'boolean'. Function Signature: setFlipYAxis(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setFlipYAxis",{d:this.id,flip_y:flip_y},this.userPriority)};PDFNet.PDFDraw.prototype.setRotate=function(angle){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRotate'. Expected 1 argument. Function Signature: setRotate(number)");if(angle instanceof Promise)throw new TypeError("1st input argument in function 'setRotate' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof angle)throw new TypeError("1st input argument '"+angle+"' in function 'setRotate' is of type '"+typeof angle+"'. Expected type 'number'. Function Signature: setRotate(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setRotate",{d:this.id,angle:angle},this.userPriority)};PDFNet.PDFDraw.prototype.setDrawAnnotations=function(render_annots){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDrawAnnotations'. Expected 1 argument. Function Signature: setDrawAnnotations(boolean)");
if(render_annots instanceof Promise)throw new TypeError("1st input argument in function 'setDrawAnnotations' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof render_annots)throw new TypeError("1st input argument '"+render_annots+"' in function 'setDrawAnnotations' is of type '"+typeof render_annots+"'. Expected type 'boolean'. Function Signature: setDrawAnnotations(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setDrawAnnotations",
{d:this.id,render_annots:render_annots},this.userPriority)};PDFNet.PDFDraw.prototype.setHighlightFields=function(highlight){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setHighlightFields'. Expected 1 argument. Function Signature: setHighlightFields(boolean)");if(highlight instanceof Promise)throw new TypeError("1st input argument in function 'setHighlightFields' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=
typeof highlight)throw new TypeError("1st input argument '"+highlight+"' in function 'setHighlightFields' is of type '"+typeof highlight+"'. Expected type 'boolean'. Function Signature: setHighlightFields(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setHighlightFields",{d:this.id,highlight:highlight},this.userPriority)};PDFNet.PDFDraw.prototype.setAntiAliasing=function(enable_aa){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAntiAliasing'. Expected 1 argument. Function Signature: setAntiAliasing(boolean)");
if(enable_aa instanceof Promise)throw new TypeError("1st input argument in function 'setAntiAliasing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable_aa)throw new TypeError("1st input argument '"+enable_aa+"' in function 'setAntiAliasing' is of type '"+typeof enable_aa+"'. Expected type 'boolean'. Function Signature: setAntiAliasing(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setAntiAliasing",{d:this.id,enable_aa:enable_aa},
this.userPriority)};PDFNet.PDFDraw.prototype.setPathHinting=function(enable_hinting){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPathHinting'. Expected 1 argument. Function Signature: setPathHinting(boolean)");if(enable_hinting instanceof Promise)throw new TypeError("1st input argument in function 'setPathHinting' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable_hinting)throw new TypeError("1st input argument '"+
enable_hinting+"' in function 'setPathHinting' is of type '"+typeof enable_hinting+"'. Expected type 'boolean'. Function Signature: setPathHinting(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setPathHinting",{d:this.id,enable_hinting:enable_hinting},this.userPriority)};PDFNet.PDFDraw.prototype.setThinLineAdjustment=function(grid_fit,stroke_adjust){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setThinLineAdjustment'. Expected 2 arguments. Function Signature: setThinLineAdjustment(boolean, boolean)");
if(grid_fit instanceof Promise)throw new TypeError("1st input argument in function 'setThinLineAdjustment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof grid_fit)throw new TypeError("1st input argument '"+grid_fit+"' in function 'setThinLineAdjustment' is of type '"+typeof grid_fit+"'. Expected type 'boolean'. Function Signature: setThinLineAdjustment(boolean, boolean).");if(stroke_adjust instanceof Promise)throw new TypeError("2nd input argument in function 'setThinLineAdjustment' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof stroke_adjust)throw new TypeError("2nd input argument '"+stroke_adjust+"' in function 'setThinLineAdjustment' is of type '"+typeof stroke_adjust+"'. Expected type 'boolean'. Function Signature: setThinLineAdjustment(boolean, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setThinLineAdjustment",{d:this.id,grid_fit:grid_fit,stroke_adjust:stroke_adjust},this.userPriority)};PDFNet.PDFDraw.prototype.setGamma=function(exp){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'setGamma'. Expected 1 argument. Function Signature: setGamma(number)");if(exp instanceof Promise)throw new TypeError("1st input argument in function 'setGamma' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof exp)throw new TypeError("1st input argument '"+exp+"' in function 'setGamma' is of type '"+typeof exp+"'. Expected type 'number'. Function Signature: setGamma(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setGamma",
{d:this.id,exp:exp},this.userPriority)};PDFNet.PDFDraw.prototype.setPrintMode=function(is_printing){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPrintMode'. Expected 1 argument. Function Signature: setPrintMode(boolean)");if(is_printing instanceof Promise)throw new TypeError("1st input argument in function 'setPrintMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof is_printing)throw new TypeError("1st input argument '"+
is_printing+"' in function 'setPrintMode' is of type '"+typeof is_printing+"'. Expected type 'boolean'. Function Signature: setPrintMode(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setPrintMode",{d:this.id,is_printing:is_printing},this.userPriority)};PDFNet.PDFDraw.prototype.setPageTransparent=function(is_transparent){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPageTransparent'. Expected 1 argument. Function Signature: setPageTransparent(boolean)");
if(is_transparent instanceof Promise)throw new TypeError("1st input argument in function 'setPageTransparent' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof is_transparent)throw new TypeError("1st input argument '"+is_transparent+"' in function 'setPageTransparent' is of type '"+typeof is_transparent+"'. Expected type 'boolean'. Function Signature: setPageTransparent(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setPageTransparent",
{d:this.id,is_transparent:is_transparent},this.userPriority)};PDFNet.PDFDraw.prototype.setDefaultPageColor=function(r,g,b){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDefaultPageColor'. Expected 3 arguments. Function Signature: setDefaultPageColor(number, number, number)");if(r instanceof Promise)throw new TypeError("1st input argument in function 'setDefaultPageColor' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof r)throw new TypeError("1st input argument '"+r+"' in function 'setDefaultPageColor' is of type '"+typeof r+"'. Expected type 'number'. Function Signature: setDefaultPageColor(number, number, number).");if(g instanceof Promise)throw new TypeError("2nd input argument in function 'setDefaultPageColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof g)throw new TypeError("2nd input argument '"+g+"' in function 'setDefaultPageColor' is of type '"+
typeof g+"'. Expected type 'number'. Function Signature: setDefaultPageColor(number, number, number).");if(b instanceof Promise)throw new TypeError("3rd input argument in function 'setDefaultPageColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("3rd input argument '"+b+"' in function 'setDefaultPageColor' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: setDefaultPageColor(number, number, number).");
return PDFNet.messageHandler.sendWithPromise("PDFDraw.setDefaultPageColor",{d:this.id,r:r,g:g,b:b},this.userPriority)};PDFNet.PDFDraw.prototype.setOverprint=function(op){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOverprint'. Expected 1 argument. Function Signature: setOverprint(number)");if(op instanceof Promise)throw new TypeError("1st input argument in function 'setOverprint' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof op)throw new TypeError("1st input argument '"+op+"' in function 'setOverprint' is of type '"+typeof op+"'. Expected type 'number'. Function Signature: setOverprint(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setOverprint",{d:this.id,op:op},this.userPriority)};PDFNet.PDFDraw.prototype.setImageSmoothing=function(smoothing_enabled,hq_image_resampling){"undefined"===typeof smoothing_enabled&&(smoothing_enabled=!0);"undefined"===typeof hq_image_resampling&&(hq_image_resampling=
!1);if(2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setImageSmoothing'. Expected at most 2 arguments. Function Signature: setImageSmoothing(boolean, boolean)");if(smoothing_enabled instanceof Promise)throw new TypeError("1st input argument in function 'setImageSmoothing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof smoothing_enabled)throw new TypeError("1st input argument '"+smoothing_enabled+
"' in function 'setImageSmoothing' is of type '"+typeof smoothing_enabled+"'. Expected type 'boolean'. Function Signature: setImageSmoothing(boolean, boolean).");if(hq_image_resampling instanceof Promise)throw new TypeError("2nd input argument in function 'setImageSmoothing' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof hq_image_resampling)throw new TypeError("2nd input argument '"+hq_image_resampling+"' in function 'setImageSmoothing' is of type '"+
typeof hq_image_resampling+"'. Expected type 'boolean'. Function Signature: setImageSmoothing(boolean, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setImageSmoothing",{d:this.id,smoothing_enabled:smoothing_enabled,hq_image_resampling:hq_image_resampling},this.userPriority)};PDFNet.PDFDraw.prototype.setCaching=function(enabled){"undefined"===typeof enabled&&(enabled=!0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setCaching'. Expected at most 1 arguments. Function Signature: setCaching(boolean)");
if(enabled instanceof Promise)throw new TypeError("1st input argument in function 'setCaching' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enabled)throw new TypeError("1st input argument '"+enabled+"' in function 'setCaching' is of type '"+typeof enabled+"'. Expected type 'boolean'. Function Signature: setCaching(boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setCaching",{d:this.id,enabled:enabled},this.userPriority)};
PDFNet.PDFDraw.prototype.setColorPostProcessMode=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColorPostProcessMode'. Expected 1 argument. Function Signature: setColorPostProcessMode(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setColorPostProcessMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+
mode+"' in function 'setColorPostProcessMode' is of type '"+typeof mode+"'. Expected type 'number'. Function Signature: setColorPostProcessMode(number).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.setColorPostProcessMode",{d:this.id,mode:mode},this.userPriority)};PDFNet.enableJavaScript=function(enable){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'enableJavaScript'. Expected 1 argument. Function Signature: enableJavaScript(boolean)");if(enable instanceof
Promise)throw new TypeError("1st input argument in function 'enableJavaScript' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof enable)throw new TypeError("1st input argument '"+enable+"' in function 'enableJavaScript' is of type '"+typeof enable+"'. Expected type 'boolean'. Function Signature: enableJavaScript(boolean).");return PDFNet.messageHandler.sendWithPromise("pdfNetEnableJavaScript",{enable:enable},this.userPriority)};PDFNet.isJavaScriptEnabled=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isJavaScriptEnabled'. Expected 0 arguments. Function Signature: isJavaScriptEnabled()");return PDFNet.messageHandler.sendWithPromise("pdfNetIsJavaScriptEnabled",{},this.userPriority)};PDFNet.addResourceSearchPath=function(path){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addResourceSearchPath'. Expected 1 argument. Function Signature: addResourceSearchPath(string)");
if(path instanceof Promise)throw new TypeError("1st input argument in function 'addResourceSearchPath' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof path)throw new TypeError("1st input argument '"+path+"' in function 'addResourceSearchPath' is of type '"+typeof path+"'. Expected type 'string'. Function Signature: addResourceSearchPath(string).");return PDFNet.messageHandler.sendWithPromise("pdfNetAddResourceSearchPath",{path:path},this.userPriority)};
PDFNet.setColorManagement=function(t){"undefined"===typeof t&&(t=PDFNet.CMSType.e_lcms);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setColorManagement'. Expected at most 1 arguments. Function Signature: setColorManagement(number)");if(t instanceof Promise)throw new TypeError("1st input argument in function 'setColorManagement' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof t)throw new TypeError("1st input argument '"+
t+"' in function 'setColorManagement' is of type '"+typeof t+"'. Expected type 'number'. Function Signature: setColorManagement(number).");return PDFNet.messageHandler.sendWithPromise("pdfNetSetColorManagement",{t:t},this.userPriority)};PDFNet.setDefaultDeviceRGBProfile=function(icc_filename){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDefaultDeviceRGBProfile'. Expected 1 argument. Function Signature: setDefaultDeviceRGBProfile(string)");if(icc_filename instanceof
Promise)throw new TypeError("1st input argument in function 'setDefaultDeviceRGBProfile' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof icc_filename)throw new TypeError("1st input argument '"+icc_filename+"' in function 'setDefaultDeviceRGBProfile' is of type '"+typeof icc_filename+"'. Expected type 'string'. Function Signature: setDefaultDeviceRGBProfile(string).");return PDFNet.messageHandler.sendWithPromise("pdfNetSetDefaultDeviceRGBProfile",
{icc_filename:icc_filename},this.userPriority)};PDFNet.setDefaultFlateCompressionLevel=function(level){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setDefaultFlateCompressionLevel'. Expected 1 argument. Function Signature: setDefaultFlateCompressionLevel(number)");if(level instanceof Promise)throw new TypeError("1st input argument in function 'setDefaultFlateCompressionLevel' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof level)throw new TypeError("1st input argument '"+level+"' in function 'setDefaultFlateCompressionLevel' is of type '"+typeof level+"'. Expected type 'number'. Function Signature: setDefaultFlateCompressionLevel(number).");return PDFNet.messageHandler.sendWithPromise("pdfNetSetDefaultFlateCompressionLevel",{level:level},this.userPriority)};PDFNet.getVersion=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getVersion'. Expected 0 arguments. Function Signature: getVersion()");
return PDFNet.messageHandler.sendWithPromise("pdfNetGetVersion",{},this.userPriority)};PDFNet.setLogLevel=function(level){"undefined"===typeof level&&(level=PDFNet.LogLevel.e_LogLevel_Fatal);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setLogLevel'. Expected at most 1 arguments. Function Signature: setLogLevel(number)");if(level instanceof Promise)throw new TypeError("1st input argument in function 'setLogLevel' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof level)throw new TypeError("1st input argument '"+level+"' in function 'setLogLevel' is of type '"+typeof level+"'. Expected type 'number'. Function Signature: setLogLevel(number).");return PDFNet.messageHandler.sendWithPromise("pdfNetSetLogLevel",{level:level},this.userPriority)};PDFNet.Rect.init=function(x1,y1,x2,y2){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'init'. Expected 4 arguments. Function Signature: init(number, number, number, number)");
if(x1 instanceof Promise)throw new TypeError("1st input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x1)throw new TypeError("1st input argument '"+x1+"' in function 'init' is of type '"+typeof x1+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");if(y1 instanceof Promise)throw new TypeError("2nd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y1)throw new TypeError("2nd input argument '"+y1+"' in function 'init' is of type '"+typeof y1+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");if(x2 instanceof Promise)throw new TypeError("3rd input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x2)throw new TypeError("3rd input argument '"+x2+"' in function 'init' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");
if(y2 instanceof Promise)throw new TypeError("4th input argument in function 'init' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y2)throw new TypeError("4th input argument '"+y2+"' in function 'init' is of type '"+typeof y2+"'. Expected type 'number'. Function Signature: init(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("rectInit",{x1:x1,y1:y1,x2:x2,y2:y2},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Rect(id)})};PDFNet.Rect.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Rect)");if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.Rect)&&"Rect"!=right.name){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+
right.name+"'. Expected type 'Rect'. Function Signature: assign(Rect).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'Rect'. Function Signature: assign(Rect).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'assign'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=
typeof right.yieldFunction)throw Error("Function '"+right.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'assign'. Perhaps a yield statement is required for '"+right.yieldFunction+"'?");var me=this;this.yieldFunction="Rect.assign";return PDFNet.messageHandler.sendWithPromise("Rect.assign",{left:this,right:right},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.left,me)})};PDFNet.Rect.prototype.attach=
function(obj){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'attach'. Expected 1 argument. Function Signature: attach(Obj)");if(obj instanceof Promise)throw new TypeError("1st input argument in function 'attach' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(obj instanceof PDFNet.Obj)){if("object"==typeof obj)throw new TypeError("1st input argument in function 'attach' is of type '"+obj.name+"'. Expected type 'Obj'. Function Signature: attach(Obj).");
throw new TypeError("1st input argument '"+obj+"' in function 'attach' is of type '"+typeof obj+"'. Expected type 'Obj'. Function Signature: attach(Obj).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'attach'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Rect.attach";return PDFNet.messageHandler.sendWithPromise("Rect.attach",
{rect:this,obj:obj.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me)})};PDFNet.Rect.prototype.update=function(obj){"undefined"===typeof obj&&(obj=new PDFNet.Obj("__null"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'update'. Expected at most 1 arguments. Function Signature: update(Obj)");if(obj instanceof Promise)throw new TypeError("1st input argument in function 'update' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(obj instanceof PDFNet.Obj)){if("object"==typeof obj)throw new TypeError("1st input argument in function 'update' is of type '"+obj.name+"'. Expected type 'Obj'. Function Signature: update(Obj).");throw new TypeError("1st input argument '"+obj+"' in function 'update' is of type '"+typeof obj+"'. Expected type 'Obj'. Function Signature: update(Obj).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'update'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Rect.update";return PDFNet.messageHandler.sendWithPromise("Rect.update",{rect:this,obj:obj.id},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me);return id.result})};PDFNet.Rect.prototype.get=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'get'. Expected 0 arguments. Function Signature: get()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'get'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Rect.get",{rect:this},this.userPriority)};PDFNet.Rect.prototype.set=function(x1,y1,x2,y2){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'set'. Expected 4 arguments. Function Signature: set(number, number, number, number)");
if(x1 instanceof Promise)throw new TypeError("1st input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x1)throw new TypeError("1st input argument '"+x1+"' in function 'set' is of type '"+typeof x1+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");if(y1 instanceof Promise)throw new TypeError("2nd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y1)throw new TypeError("2nd input argument '"+y1+"' in function 'set' is of type '"+typeof y1+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");if(x2 instanceof Promise)throw new TypeError("3rd input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x2)throw new TypeError("3rd input argument '"+x2+"' in function 'set' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");
if(y2 instanceof Promise)throw new TypeError("4th input argument in function 'set' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y2)throw new TypeError("4th input argument '"+y2+"' in function 'set' is of type '"+typeof y2+"'. Expected type 'number'. Function Signature: set(number, number, number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'set'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="Rect.set";return PDFNet.messageHandler.sendWithPromise("Rect.set",{rect:this,x1:x1,y1:y1,x2:x2,y2:y2},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me)})};PDFNet.Rect.prototype.width=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'width'. Expected 0 arguments. Function Signature: width()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'width'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Rect.width",{rect:this},this.userPriority)};PDFNet.Rect.prototype.height=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'height'. Expected 0 arguments. Function Signature: height()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'height'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Rect.height",{rect:this},this.userPriority)};PDFNet.Rect.prototype.contains=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'contains'. Expected 2 arguments. Function Signature: contains(number, number)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'contains' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'contains' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: contains(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'contains' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'contains' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: contains(number, number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'contains'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Rect.contains",
{rect:this,x:x,y:y},this.userPriority)};PDFNet.Rect.prototype.intersectRect=function(rect1,rect2){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'intersectRect'. Expected 2 arguments. Function Signature: intersectRect(Rect, Rect)");if(rect1 instanceof Promise)throw new TypeError("1st input argument in function 'intersectRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(rect1 instanceof PDFNet.Rect)&&"Rect"!=
rect1.name){if("object"==typeof rect1)throw new TypeError("1st input argument in function 'intersectRect' is of type '"+rect1.name+"'. Expected type 'Rect'. Function Signature: intersectRect(Rect, Rect).");throw new TypeError("1st input argument '"+rect1+"' in function 'intersectRect' is of type '"+typeof rect1+"'. Expected type 'Rect'. Function Signature: intersectRect(Rect, Rect).");}if(rect2 instanceof Promise)throw new TypeError("2nd input argument in function 'intersectRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(rect2 instanceof PDFNet.Rect)&&"Rect"!=rect2.name){if("object"==typeof rect2)throw new TypeError("2nd input argument in function 'intersectRect' is of type '"+rect2.name+"'. Expected type 'Rect'. Function Signature: intersectRect(Rect, Rect).");throw new TypeError("2nd input argument '"+rect2+"' in function 'intersectRect' is of type '"+typeof rect2+"'. Expected type 'Rect'. Function Signature: intersectRect(Rect, Rect).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+
" recently altered a struct object without yielding. That object is now being accessed by function 'intersectRect'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof rect1.yieldFunction)throw Error("Function '"+rect1.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'intersectRect'. Perhaps a yield statement is required for '"+rect1.yieldFunction+"'?");if("undefined"!=
typeof rect2.yieldFunction)throw Error("Function '"+rect2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'intersectRect'. Perhaps a yield statement is required for '"+rect2.yieldFunction+"'?");var me=this;this.yieldFunction="Rect.intersectRect";return PDFNet.messageHandler.sendWithPromise("Rect.intersectRect",{rect:this,rect1:rect1,rect2:rect2},this.userPriority).then(function(id){me.yieldFunction=void 0;
copyFunc(id.rect,me);return id.result})};PDFNet.Rect.prototype.normalize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'normalize'. Expected 0 arguments. Function Signature: normalize()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'normalize'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");var me=this;this.yieldFunction="Rect.normalize";return PDFNet.messageHandler.sendWithPromise("Rect.normalize",{rect:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me)})};PDFNet.Rect.prototype.inflate1=function(amount){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'inflate1'. Expected 1 argument. Function Signature: inflate1(number)");if(amount instanceof Promise)throw new TypeError("1st input argument in function 'inflate1' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof amount)throw new TypeError("1st input argument '"+amount+"' in function 'inflate1' is of type '"+typeof amount+"'. Expected type 'number'. Function Signature: inflate1(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'inflate1'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Rect.inflate1";
return PDFNet.messageHandler.sendWithPromise("Rect.inflate1",{rect:this,amount:amount},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me)})};PDFNet.Rect.prototype.inflate2=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'inflate2'. Expected 2 arguments. Function Signature: inflate2(number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'inflate2' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'inflate2' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: inflate2(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'inflate2' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'inflate2' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: inflate2(number, number).");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'inflate2'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="Rect.inflate2";return PDFNet.messageHandler.sendWithPromise("Rect.inflate2",{rect:this,x:x,y:y},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.rect,me)})};PDFNet.Redactor.redactionCreate=
function(page_num,bbox,negative,text){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'redactionCreate'. Expected 4 arguments. Function Signature: redactionCreate(number, Rect, boolean, string)");if(page_num instanceof Promise)throw new TypeError("1st input argument in function 'redactionCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_num)throw new TypeError("1st input argument '"+page_num+
"' in function 'redactionCreate' is of type '"+typeof page_num+"'. Expected type 'number'. Function Signature: redactionCreate(number, Rect, boolean, string).");if(bbox instanceof Promise)throw new TypeError("2nd input argument in function 'redactionCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(bbox instanceof PDFNet.Rect)&&"Rect"!=bbox.name){if("object"==typeof bbox)throw new TypeError("2nd input argument in function 'redactionCreate' is of type '"+
bbox.name+"'. Expected type 'Rect'. Function Signature: redactionCreate(number, Rect, boolean, string).");throw new TypeError("2nd input argument '"+bbox+"' in function 'redactionCreate' is of type '"+typeof bbox+"'. Expected type 'Rect'. Function Signature: redactionCreate(number, Rect, boolean, string).");}if(negative instanceof Promise)throw new TypeError("3rd input argument in function 'redactionCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=
typeof negative)throw new TypeError("3rd input argument '"+negative+"' in function 'redactionCreate' is of type '"+typeof negative+"'. Expected type 'boolean'. Function Signature: redactionCreate(number, Rect, boolean, string).");if(text instanceof Promise)throw new TypeError("4th input argument in function 'redactionCreate' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof text)throw new TypeError("4th input argument '"+text+"' in function 'redactionCreate' is of type '"+
typeof text+"'. Expected type 'string'. Function Signature: redactionCreate(number, Rect, boolean, string).");if("undefined"!=typeof bbox.yieldFunction)throw Error("Function '"+bbox.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'redactionCreate'. Perhaps a yield statement is required for '"+bbox.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("redactor_RedactionCreate",{page_num:page_num,
bbox:bbox,negative:negative,text:text},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Redaction(id)})};PDFNet.Redactor.redactionDestroy=function(redaction){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'redactionDestroy'. Expected 1 argument. Function Signature: redactionDestroy(Redaction)");if(redaction instanceof Promise)throw new TypeError("1st input argument in function 'redactionDestroy' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(redaction instanceof PDFNet.Redaction)){if("object"==typeof redaction)throw new TypeError("1st input argument in function 'redactionDestroy' is of type '"+redaction.name+"'. Expected type 'Redaction'. Function Signature: redactionDestroy(Redaction).");throw new TypeError("1st input argument '"+redaction+"' in function 'redactionDestroy' is of type '"+typeof redaction+"'. Expected type 'Redaction'. Function Signature: redactionDestroy(Redaction).");}return PDFNet.messageHandler.sendWithPromise("redactor_RedactionDestroy",
{redaction:redaction.id},this.userPriority)};PDFNet.Redactor.redactionCopy=function(other){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'redactionCopy'. Expected 1 argument. Function Signature: redactionCopy(Redaction)");if(other instanceof Promise)throw new TypeError("1st input argument in function 'redactionCopy' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(other instanceof PDFNet.Redaction)){if("object"==
typeof other)throw new TypeError("1st input argument in function 'redactionCopy' is of type '"+other.name+"'. Expected type 'Redaction'. Function Signature: redactionCopy(Redaction).");throw new TypeError("1st input argument '"+other+"' in function 'redactionCopy' is of type '"+typeof other+"'. Expected type 'Redaction'. Function Signature: redactionCopy(Redaction).");}return PDFNet.messageHandler.sendWithPromise("redactor_RedactionCopy",{other:other.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Redaction(id)})};PDFNet.RedactionAppearance.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];
else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("RedactionAppearance.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Shading.create=function(shading_dict){"undefined"===typeof shading_dict&&(shading_dict=new PDFNet.Obj("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected at most 1 arguments. Function Signature: create(Obj)");
if(shading_dict instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(shading_dict instanceof PDFNet.Obj)){if("object"==typeof shading_dict)throw new TypeError("1st input argument in function 'create' is of type '"+shading_dict.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+shading_dict+"' in function 'create' is of type '"+
typeof shading_dict+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("shadingCreate",{shading_dict:shading_dict.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Shading(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Shading.prototype.assign=function(right){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'assign'. Expected 1 argument. Function Signature: assign(Shading)");
if(right instanceof Promise)throw new TypeError("1st input argument in function 'assign' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(right instanceof PDFNet.Shading)){if("object"==typeof right)throw new TypeError("1st input argument in function 'assign' is of type '"+right.name+"'. Expected type 'Shading'. Function Signature: assign(Shading).");throw new TypeError("1st input argument '"+right+"' in function 'assign' is of type '"+typeof right+"'. Expected type 'Shading'. Function Signature: assign(Shading).");
}return PDFNet.messageHandler.sendWithPromise("Shading.assign",{left:this.id,right:right.id},this.userPriority)};PDFNet.Shading.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-
1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Shading.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Shading.getTypeFromObj=function(shading_dict){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTypeFromObj'. Expected 1 argument. Function Signature: getTypeFromObj(Obj)");
if(shading_dict instanceof Promise)throw new TypeError("1st input argument in function 'getTypeFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(shading_dict instanceof PDFNet.Obj)){if("object"==typeof shading_dict)throw new TypeError("1st input argument in function 'getTypeFromObj' is of type '"+shading_dict.name+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");throw new TypeError("1st input argument '"+shading_dict+"' in function 'getTypeFromObj' is of type '"+
typeof shading_dict+"'. Expected type 'Obj'. Function Signature: getTypeFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("shadingGetTypeFromObj",{shading_dict:shading_dict.id},this.userPriority)};PDFNet.Shading.prototype.getType=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Shading.getType",{s:this.id},this.userPriority)};
PDFNet.Shading.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("Shading.getSDFObj",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Shading.prototype.getBaseColorSpace=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBaseColorSpace'. Expected 0 arguments. Function Signature: getBaseColorSpace()");
return PDFNet.messageHandler.sendWithPromise("Shading.getBaseColorSpace",{s:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorSpace(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Shading.prototype.hasBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasBBox'. Expected 0 arguments. Function Signature: hasBBox()");return PDFNet.messageHandler.sendWithPromise("Shading.hasBBox",{s:this.id},
this.userPriority)};PDFNet.Shading.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");return PDFNet.messageHandler.sendWithPromise("Shading.getBBox",{s:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Rect(id)})};PDFNet.Shading.prototype.hasBackground=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasBackground'. Expected 0 arguments. Function Signature: hasBackground()");
return PDFNet.messageHandler.sendWithPromise("Shading.hasBackground",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getBackground=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBackground'. Expected 0 arguments. Function Signature: getBackground()");return PDFNet.messageHandler.sendWithPromise("Shading.getBackground",{s:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ColorPt(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.Shading.prototype.getAntialias=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAntialias'. Expected 0 arguments. Function Signature: getAntialias()");return PDFNet.messageHandler.sendWithPromise("Shading.getAntialias",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getParamStart=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParamStart'. Expected 0 arguments. Function Signature: getParamStart()");
return PDFNet.messageHandler.sendWithPromise("Shading.getParamStart",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getParamEnd=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParamEnd'. Expected 0 arguments. Function Signature: getParamEnd()");return PDFNet.messageHandler.sendWithPromise("Shading.getParamEnd",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.isExtendStart=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isExtendStart'. Expected 0 arguments. Function Signature: isExtendStart()");return PDFNet.messageHandler.sendWithPromise("Shading.isExtendStart",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.isExtendEnd=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isExtendEnd'. Expected 0 arguments. Function Signature: isExtendEnd()");return PDFNet.messageHandler.sendWithPromise("Shading.isExtendEnd",{s:this.id},
this.userPriority)};PDFNet.Shading.prototype.getColor=function(t){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColor'. Expected 1 argument. Function Signature: getColor(number)");if(t instanceof Promise)throw new TypeError("1st input argument in function 'getColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof t)throw new TypeError("1st input argument '"+t+"' in function 'getColor' is of type '"+
typeof t+"'. Expected type 'number'. Function Signature: getColor(number).");var me=this;this.yieldFunction="Shading.getColor";return PDFNet.messageHandler.sendWithPromise("Shading.getColor",{s:this.id,t:t},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.Shading.prototype.getCoords=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCoords'. Expected 0 arguments. Function Signature: getCoords()");
return PDFNet.messageHandler.sendWithPromise("Shading.getCoords",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getCoordsRadial=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCoordsRadial'. Expected 0 arguments. Function Signature: getCoordsRadial()");return PDFNet.messageHandler.sendWithPromise("Shading.getCoordsRadial",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getDomain=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getDomain'. Expected 0 arguments. Function Signature: getDomain()");return PDFNet.messageHandler.sendWithPromise("Shading.getDomain",{s:this.id},this.userPriority)};PDFNet.Shading.prototype.getMatrix=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMatrix'. Expected 0 arguments. Function Signature: getMatrix()");return PDFNet.messageHandler.sendWithPromise("Shading.getMatrix",{s:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Matrix2D(id)})};PDFNet.Shading.prototype.getColorForFunction=function(t1,t2){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getColorForFunction'. Expected 2 arguments. Function Signature: getColorForFunction(number, number)");if(t1 instanceof Promise)throw new TypeError("1st input argument in function 'getColorForFunction' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof t1)throw new TypeError("1st input argument '"+
t1+"' in function 'getColorForFunction' is of type '"+typeof t1+"'. Expected type 'number'. Function Signature: getColorForFunction(number, number).");if(t2 instanceof Promise)throw new TypeError("2nd input argument in function 'getColorForFunction' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof t2)throw new TypeError("2nd input argument '"+t2+"' in function 'getColorForFunction' is of type '"+typeof t2+"'. Expected type 'number'. Function Signature: getColorForFunction(number, number).");
var me=this;this.yieldFunction="Shading.getColorForFunction";return PDFNet.messageHandler.sendWithPromise("Shading.getColorForFunction",{s:this.id,t1:t1,t2:t2},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.out_color,me)})};PDFNet.Stamper.create=function(size_type,a,b){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 3 arguments. Function Signature: create(number, number, number)");if(size_type instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof size_type)throw new TypeError("1st input argument '"+size_type+"' in function 'create' is of type '"+typeof size_type+"'. Expected type 'number'. Function Signature: create(number, number, number).");if(a instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof a)throw new TypeError("2nd input argument '"+a+"' in function 'create' is of type '"+typeof a+
"'. Expected type 'number'. Function Signature: create(number, number, number).");if(b instanceof Promise)throw new TypeError("3rd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("3rd input argument '"+b+"' in function 'create' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: create(number, number, number).");return PDFNet.messageHandler.sendWithPromise("stamperCreate",
{size_type:size_type,a:a,b:b},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Stamper(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Stamper.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,
1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("Stamper.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.Stamper.prototype.stampImage=function(dest_doc,img,dest_pages){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'stampImage'. Expected 3 arguments. Function Signature: stampImage(PDFDoc, Image, PageSet)");
if(dest_doc instanceof Promise)throw new TypeError("1st input argument in function 'stampImage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest_doc instanceof PDFNet.PDFDoc||dest_doc instanceof PDFNet.SDFDoc||dest_doc instanceof PDFNet.FDFDoc)){if("object"==typeof dest_doc)throw new TypeError("1st input argument in function 'stampImage' is of type '"+dest_doc.name+"'. Expected type 'PDFDoc'. Function Signature: stampImage(PDFDoc, Image, PageSet).");throw new TypeError("1st input argument '"+
dest_doc+"' in function 'stampImage' is of type '"+typeof dest_doc+"'. Expected type 'PDFDoc'. Function Signature: stampImage(PDFDoc, Image, PageSet).");}if(img instanceof Promise)throw new TypeError("2nd input argument in function 'stampImage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(img instanceof PDFNet.Image)){if("object"==typeof img)throw new TypeError("2nd input argument in function 'stampImage' is of type '"+img.name+"'. Expected type 'Image'. Function Signature: stampImage(PDFDoc, Image, PageSet).");
throw new TypeError("2nd input argument '"+img+"' in function 'stampImage' is of type '"+typeof img+"'. Expected type 'Image'. Function Signature: stampImage(PDFDoc, Image, PageSet).");}if(dest_pages instanceof Promise)throw new TypeError("3rd input argument in function 'stampImage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest_pages instanceof PDFNet.PageSet)){if("object"==typeof dest_pages)throw new TypeError("3rd input argument in function 'stampImage' is of type '"+
dest_pages.name+"'. Expected type 'PageSet'. Function Signature: stampImage(PDFDoc, Image, PageSet).");throw new TypeError("3rd input argument '"+dest_pages+"' in function 'stampImage' is of type '"+typeof dest_pages+"'. Expected type 'PageSet'. Function Signature: stampImage(PDFDoc, Image, PageSet).");}return PDFNet.messageHandler.sendWithPromise("Stamper.stampImage",{stamp:this.id,dest_doc:dest_doc.id,img:img.id,dest_pages:dest_pages.id},this.userPriority)};PDFNet.Stamper.prototype.stampPage=function(dest_doc,
page,dest_pages){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'stampPage'. Expected 3 arguments. Function Signature: stampPage(PDFDoc, Page, PageSet)");if(dest_doc instanceof Promise)throw new TypeError("1st input argument in function 'stampPage' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(dest_doc instanceof PDFNet.PDFDoc||dest_doc instanceof PDFNet.SDFDoc||dest_doc instanceof PDFNet.FDFDoc)){if("object"==
typeof dest_doc)throw new TypeError("1st input argument in function 'stampPage' is of type '"+dest_doc.name+"'. Expected type 'PDFDoc'. Function Signature: stampPage(PDFDoc, Page, PageSet).");throw new TypeError("1st input argument '"+dest_doc+"' in function 'stampPage' is of type '"+typeof dest_doc+"'. Expected type 'PDFDoc'. Function Signature: stampPage(PDFDoc, Page, PageSet).");}if(page instanceof Promise)throw new TypeError("2nd input argument in function 'stampPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("2nd input argument in function 'stampPage' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: stampPage(PDFDoc, Page, PageSet).");throw new TypeError("2nd input argument '"+page+"' in function 'stampPage' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: stampPage(PDFDoc, Page, PageSet).");}if(dest_pages instanceof Promise)throw new TypeError("3rd input argument in function 'stampPage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dest_pages instanceof PDFNet.PageSet)){if("object"==typeof dest_pages)throw new TypeError("3rd input argument in function 'stampPage' is of type '"+dest_pages.name+"'. Expected type 'PageSet'. Function Signature: stampPage(PDFDoc, Page, PageSet).");throw new TypeError("3rd input argument '"+dest_pages+"' in function 'stampPage' is of type '"+typeof dest_pages+"'. Expected type 'PageSet'. Function Signature: stampPage(PDFDoc, Page, PageSet).");}return PDFNet.messageHandler.sendWithPromise("Stamper.stampPage",
{stamp:this.id,dest_doc:dest_doc.id,page:page.id,dest_pages:dest_pages.id},this.userPriority)};PDFNet.Stamper.prototype.stampText=function(dest_doc,txt,dest_pages){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'stampText'. Expected 3 arguments. Function Signature: stampText(PDFDoc, string, PageSet)");if(dest_doc instanceof Promise)throw new TypeError("1st input argument in function 'stampText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dest_doc instanceof PDFNet.PDFDoc||dest_doc instanceof PDFNet.SDFDoc||dest_doc instanceof PDFNet.FDFDoc)){if("object"==typeof dest_doc)throw new TypeError("1st input argument in function 'stampText' is of type '"+dest_doc.name+"'. Expected type 'PDFDoc'. Function Signature: stampText(PDFDoc, string, PageSet).");throw new TypeError("1st input argument '"+dest_doc+"' in function 'stampText' is of type '"+typeof dest_doc+"'. Expected type 'PDFDoc'. Function Signature: stampText(PDFDoc, string, PageSet).");
}if(txt instanceof Promise)throw new TypeError("2nd input argument in function 'stampText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof txt)throw new TypeError("2nd input argument '"+txt+"' in function 'stampText' is of type '"+typeof txt+"'. Expected type 'string'. Function Signature: stampText(PDFDoc, string, PageSet).");if(dest_pages instanceof Promise)throw new TypeError("3rd input argument in function 'stampText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(dest_pages instanceof PDFNet.PageSet)){if("object"==typeof dest_pages)throw new TypeError("3rd input argument in function 'stampText' is of type '"+dest_pages.name+"'. Expected type 'PageSet'. Function Signature: stampText(PDFDoc, string, PageSet).");throw new TypeError("3rd input argument '"+dest_pages+"' in function 'stampText' is of type '"+typeof dest_pages+"'. Expected type 'PageSet'. Function Signature: stampText(PDFDoc, string, PageSet).");}return PDFNet.messageHandler.sendWithPromise("Stamper.stampText",
{stamp:this.id,dest_doc:dest_doc.id,txt:txt,dest_pages:dest_pages.id},this.userPriority)};PDFNet.Stamper.prototype.setFont=function(font){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFont'. Expected 1 argument. Function Signature: setFont(Font)");if(font instanceof Promise)throw new TypeError("1st input argument in function 'setFont' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(font instanceof PDFNet.Font)){if("object"==
typeof font)throw new TypeError("1st input argument in function 'setFont' is of type '"+font.name+"'. Expected type 'Font'. Function Signature: setFont(Font).");throw new TypeError("1st input argument '"+font+"' in function 'setFont' is of type '"+typeof font+"'. Expected type 'Font'. Function Signature: setFont(Font).");}return PDFNet.messageHandler.sendWithPromise("Stamper.setFont",{stamp:this.id,font:font.id},this.userPriority)};PDFNet.Stamper.prototype.setFontColor=function(font_color){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setFontColor'. Expected 1 argument. Function Signature: setFontColor(ColorPt)");if(font_color instanceof Promise)throw new TypeError("1st input argument in function 'setFontColor' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(font_color instanceof PDFNet.ColorPt)&&"ColorPt"!=font_color.name){if("object"==typeof font_color)throw new TypeError("1st input argument in function 'setFontColor' is of type '"+
font_color.name+"'. Expected type 'ColorPt'. Function Signature: setFontColor(ColorPt).");throw new TypeError("1st input argument '"+font_color+"' in function 'setFontColor' is of type '"+typeof font_color+"'. Expected type 'ColorPt'. Function Signature: setFontColor(ColorPt).");}if("undefined"!=typeof font_color.yieldFunction)throw Error("Function '"+font_color.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'setFontColor'. Perhaps a yield statement is required for '"+
font_color.yieldFunction+"'?");return PDFNet.messageHandler.sendWithPromise("Stamper.setFontColor",{stamp:this.id,font_color:font_color.id},this.userPriority)};PDFNet.Stamper.prototype.setTextAlignment=function(text_alignment){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setTextAlignment'. Expected 1 argument. Function Signature: setTextAlignment(number)");if(text_alignment instanceof Promise)throw new TypeError("1st input argument in function 'setTextAlignment' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof text_alignment)throw new TypeError("1st input argument '"+text_alignment+"' in function 'setTextAlignment' is of type '"+typeof text_alignment+"'. Expected type 'number'. Function Signature: setTextAlignment(number).");return PDFNet.messageHandler.sendWithPromise("Stamper.setTextAlignment",{stamp:this.id,text_alignment:text_alignment},this.userPriority)};PDFNet.Stamper.prototype.setOpacity=function(opacity){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setOpacity'. Expected 1 argument. Function Signature: setOpacity(number)");
if(opacity instanceof Promise)throw new TypeError("1st input argument in function 'setOpacity' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof opacity)throw new TypeError("1st input argument '"+opacity+"' in function 'setOpacity' is of type '"+typeof opacity+"'. Expected type 'number'. Function Signature: setOpacity(number).");return PDFNet.messageHandler.sendWithPromise("Stamper.setOpacity",{stamp:this.id,opacity:opacity},this.userPriority)};
PDFNet.Stamper.prototype.setRotation=function(rotation){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRotation'. Expected 1 argument. Function Signature: setRotation(number)");if(rotation instanceof Promise)throw new TypeError("1st input argument in function 'setRotation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof rotation)throw new TypeError("1st input argument '"+rotation+"' in function 'setRotation' is of type '"+
typeof rotation+"'. Expected type 'number'. Function Signature: setRotation(number).");return PDFNet.messageHandler.sendWithPromise("Stamper.setRotation",{stamp:this.id,rotation:rotation},this.userPriority)};PDFNet.Stamper.prototype.setAsBackground=function(background){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAsBackground'. Expected 1 argument. Function Signature: setAsBackground(boolean)");if(background instanceof Promise)throw new TypeError("1st input argument in function 'setAsBackground' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof background)throw new TypeError("1st input argument '"+background+"' in function 'setAsBackground' is of type '"+typeof background+"'. Expected type 'boolean'. Function Signature: setAsBackground(boolean).");return PDFNet.messageHandler.sendWithPromise("Stamper.setAsBackground",{stamp:this.id,background:background},this.userPriority)};PDFNet.Stamper.prototype.setAsAnnotation=function(annotation){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAsAnnotation'. Expected 1 argument. Function Signature: setAsAnnotation(boolean)");
if(annotation instanceof Promise)throw new TypeError("1st input argument in function 'setAsAnnotation' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof annotation)throw new TypeError("1st input argument '"+annotation+"' in function 'setAsAnnotation' is of type '"+typeof annotation+"'. Expected type 'boolean'. Function Signature: setAsAnnotation(boolean).");return PDFNet.messageHandler.sendWithPromise("Stamper.setAsAnnotation",{stamp:this.id,annotation:annotation},
this.userPriority)};PDFNet.Stamper.prototype.showsOnScreen=function(on_screen){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'showsOnScreen'. Expected 1 argument. Function Signature: showsOnScreen(boolean)");if(on_screen instanceof Promise)throw new TypeError("1st input argument in function 'showsOnScreen' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof on_screen)throw new TypeError("1st input argument '"+
on_screen+"' in function 'showsOnScreen' is of type '"+typeof on_screen+"'. Expected type 'boolean'. Function Signature: showsOnScreen(boolean).");return PDFNet.messageHandler.sendWithPromise("Stamper.showsOnScreen",{stamp:this.id,on_screen:on_screen},this.userPriority)};PDFNet.Stamper.prototype.showsOnPrint=function(on_print){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'showsOnPrint'. Expected 1 argument. Function Signature: showsOnPrint(boolean)");
if(on_print instanceof Promise)throw new TypeError("1st input argument in function 'showsOnPrint' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof on_print)throw new TypeError("1st input argument '"+on_print+"' in function 'showsOnPrint' is of type '"+typeof on_print+"'. Expected type 'boolean'. Function Signature: showsOnPrint(boolean).");return PDFNet.messageHandler.sendWithPromise("Stamper.showsOnPrint",{stamp:this.id,on_print:on_print},this.userPriority)};
PDFNet.Stamper.prototype.setAlignment=function(horizontal_alignment,vertical_alignment){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setAlignment'. Expected 2 arguments. Function Signature: setAlignment(number, number)");if(horizontal_alignment instanceof Promise)throw new TypeError("1st input argument in function 'setAlignment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof horizontal_alignment)throw new TypeError("1st input argument '"+
horizontal_alignment+"' in function 'setAlignment' is of type '"+typeof horizontal_alignment+"'. Expected type 'number'. Function Signature: setAlignment(number, number).");if(vertical_alignment instanceof Promise)throw new TypeError("2nd input argument in function 'setAlignment' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof vertical_alignment)throw new TypeError("2nd input argument '"+vertical_alignment+"' in function 'setAlignment' is of type '"+
typeof vertical_alignment+"'. Expected type 'number'. Function Signature: setAlignment(number, number).");return PDFNet.messageHandler.sendWithPromise("Stamper.setAlignment",{stamp:this.id,horizontal_alignment:horizontal_alignment,vertical_alignment:vertical_alignment},this.userPriority)};PDFNet.Stamper.prototype.setPosition=function(x,y,use_percentage){"undefined"===typeof use_percentage&&(use_percentage=!1);if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPosition'. Expected 2 to 3 arguments. Function Signature: setPosition(number, number, boolean)");
if(x instanceof Promise)throw new TypeError("1st input argument in function 'setPosition' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'setPosition' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: setPosition(number, number, boolean).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'setPosition' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'setPosition' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: setPosition(number, number, boolean).");if(use_percentage instanceof Promise)throw new TypeError("3rd input argument in function 'setPosition' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof use_percentage)throw new TypeError("3rd input argument '"+use_percentage+"' in function 'setPosition' is of type '"+
typeof use_percentage+"'. Expected type 'boolean'. Function Signature: setPosition(number, number, boolean).");return PDFNet.messageHandler.sendWithPromise("Stamper.setPosition",{stamp:this.id,x:x,y:y,use_percentage:use_percentage},this.userPriority)};PDFNet.Stamper.prototype.setSize=function(size_type,a,b){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSize'. Expected 3 arguments. Function Signature: setSize(number, number, number)");if(size_type instanceof
Promise)throw new TypeError("1st input argument in function 'setSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size_type)throw new TypeError("1st input argument '"+size_type+"' in function 'setSize' is of type '"+typeof size_type+"'. Expected type 'number'. Function Signature: setSize(number, number, number).");if(a instanceof Promise)throw new TypeError("2nd input argument in function 'setSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof a)throw new TypeError("2nd input argument '"+a+"' in function 'setSize' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: setSize(number, number, number).");if(b instanceof Promise)throw new TypeError("3rd input argument in function 'setSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("3rd input argument '"+b+"' in function 'setSize' is of type '"+typeof b+"'. Expected type 'number'. Function Signature: setSize(number, number, number).");
return PDFNet.messageHandler.sendWithPromise("Stamper.setSize",{stamp:this.id,size_type:size_type,a:a,b:b},this.userPriority)};PDFNet.Stamper.deleteStamps=function(doc,page_set){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'deleteStamps'. Expected 2 arguments. Function Signature: deleteStamps(PDFDoc, PageSet)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'deleteStamps' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'deleteStamps' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: deleteStamps(PDFDoc, PageSet).");throw new TypeError("1st input argument '"+doc+"' in function 'deleteStamps' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: deleteStamps(PDFDoc, PageSet).");}if(page_set instanceof Promise)throw new TypeError("2nd input argument in function 'deleteStamps' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page_set instanceof PDFNet.PageSet)){if("object"==typeof page_set)throw new TypeError("2nd input argument in function 'deleteStamps' is of type '"+page_set.name+"'. Expected type 'PageSet'. Function Signature: deleteStamps(PDFDoc, PageSet).");throw new TypeError("2nd input argument '"+page_set+"' in function 'deleteStamps' is of type '"+typeof page_set+"'. Expected type 'PageSet'. Function Signature: deleteStamps(PDFDoc, PageSet).");}return PDFNet.messageHandler.sendWithPromise("stamperDeleteStamps",
{doc:doc.id,page_set:page_set.id},this.userPriority)};PDFNet.Stamper.hasStamps=function(doc,page_set){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasStamps'. Expected 2 arguments. Function Signature: hasStamps(PDFDoc, PageSet)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'hasStamps' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof
PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'hasStamps' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: hasStamps(PDFDoc, PageSet).");throw new TypeError("1st input argument '"+doc+"' in function 'hasStamps' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: hasStamps(PDFDoc, PageSet).");}if(page_set instanceof Promise)throw new TypeError("2nd input argument in function 'hasStamps' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page_set instanceof PDFNet.PageSet)){if("object"==typeof page_set)throw new TypeError("2nd input argument in function 'hasStamps' is of type '"+page_set.name+"'. Expected type 'PageSet'. Function Signature: hasStamps(PDFDoc, PageSet).");throw new TypeError("2nd input argument '"+page_set+"' in function 'hasStamps' is of type '"+typeof page_set+"'. Expected type 'PageSet'. Function Signature: hasStamps(PDFDoc, PageSet).");}return PDFNet.messageHandler.sendWithPromise("stamperHasStamps",{doc:doc.id,
page_set:page_set.id},this.userPriority)};PDFNet.TextExtractor.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("textExtractorCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.TextExtractor(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.TextExtractor.prototype.destroy=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("TextExtractor.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.TextExtractor.prototype.begin=function(page,clip_ptr,flags){"undefined"===typeof clip_ptr&&(clip_ptr=new PDFNet.Rect("0"));"undefined"===typeof flags&&(flags=0);if(1>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 1 to 3 arguments. Function Signature: begin(Page, Rect, number)");if(page instanceof Promise)throw new TypeError("1st input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'begin' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: begin(Page, Rect, number).");throw new TypeError("1st input argument '"+page+"' in function 'begin' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: begin(Page, Rect, number).");}if(clip_ptr instanceof Promise)throw new TypeError("2nd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(clip_ptr instanceof PDFNet.Rect)&&"Rect"!=clip_ptr.name){if("object"==typeof clip_ptr)throw new TypeError("2nd input argument in function 'begin' is of type '"+clip_ptr.name+"'. Expected type 'Rect'. Function Signature: begin(Page, Rect, number).");throw new TypeError("2nd input argument '"+clip_ptr+"' in function 'begin' is of type '"+typeof clip_ptr+"'. Expected type 'Rect'. Function Signature: begin(Page, Rect, number).");}if(flags instanceof Promise)throw new TypeError("3rd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flags)throw new TypeError("3rd input argument '"+flags+"' in function 'begin' is of type '"+typeof flags+"'. Expected type 'number'. Function Signature: begin(Page, Rect, number).");if("undefined"!=typeof clip_ptr.yieldFunction)throw Error("Function '"+clip_ptr.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'begin'. Perhaps a yield statement is required for '"+clip_ptr.yieldFunction+"'?");
var me=this;this.yieldFunction="TextExtractor.begin";return PDFNet.messageHandler.sendWithPromise("TextExtractor.begin",{te:this.id,page:page.id,clip_ptr:clip_ptr,flags:flags},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.clip_ptr,me)})};PDFNet.TextExtractor.prototype.getWordCount=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWordCount'. Expected 0 arguments. Function Signature: getWordCount()");return PDFNet.messageHandler.sendWithPromise("TextExtractor.getWordCount",
{te:this.id},this.userPriority)};PDFNet.TextExtractor.prototype.setRightToLeftLanguage=function(rtl){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRightToLeftLanguage'. Expected 1 argument. Function Signature: setRightToLeftLanguage(boolean)");if(rtl instanceof Promise)throw new TypeError("1st input argument in function 'setRightToLeftLanguage' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof rtl)throw new TypeError("1st input argument '"+
rtl+"' in function 'setRightToLeftLanguage' is of type '"+typeof rtl+"'. Expected type 'boolean'. Function Signature: setRightToLeftLanguage(boolean).");return PDFNet.messageHandler.sendWithPromise("TextExtractor.setRightToLeftLanguage",{te:this.id,rtl:rtl},this.userPriority)};PDFNet.TextExtractor.prototype.getRightToLeftLanguage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRightToLeftLanguage'. Expected 0 arguments. Function Signature: getRightToLeftLanguage()");
return PDFNet.messageHandler.sendWithPromise("TextExtractor.getRightToLeftLanguage",{te:this.id},this.userPriority)};PDFNet.TextExtractor.prototype.getAsText=function(dehyphen){"undefined"===typeof dehyphen&&(dehyphen=!0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAsText'. Expected at most 1 arguments. Function Signature: getAsText(boolean)");if(dehyphen instanceof Promise)throw new TypeError("1st input argument in function 'getAsText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof dehyphen)throw new TypeError("1st input argument '"+dehyphen+"' in function 'getAsText' is of type '"+typeof dehyphen+"'. Expected type 'boolean'. Function Signature: getAsText(boolean).");return PDFNet.messageHandler.sendWithPromise("TextExtractor.getAsText",{te:this.id,dehyphen:dehyphen},this.userPriority)};PDFNet.TextExtractor.prototype.getTextUnderAnnot=function(annot){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextUnderAnnot'. Expected 1 argument. Function Signature: getTextUnderAnnot(Annot)");
if(annot instanceof Promise)throw new TypeError("1st input argument in function 'getTextUnderAnnot' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(annot instanceof PDFNet.Annot)){if("object"==typeof annot)throw new TypeError("1st input argument in function 'getTextUnderAnnot' is of type '"+annot.name+"'. Expected type 'Annot'. Function Signature: getTextUnderAnnot(Annot).");throw new TypeError("1st input argument '"+annot+"' in function 'getTextUnderAnnot' is of type '"+
typeof annot+"'. Expected type 'Annot'. Function Signature: getTextUnderAnnot(Annot).");}return PDFNet.messageHandler.sendWithPromise("TextExtractor.getTextUnderAnnot",{te:this.id,annot:annot.id},this.userPriority)};PDFNet.TextExtractor.prototype.getAsXML=function(xml_output_flags){"undefined"===typeof xml_output_flags&&(xml_output_flags=0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAsXML'. Expected at most 1 arguments. Function Signature: getAsXML(number)");
if(xml_output_flags instanceof Promise)throw new TypeError("1st input argument in function 'getAsXML' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof xml_output_flags)throw new TypeError("1st input argument '"+xml_output_flags+"' in function 'getAsXML' is of type '"+typeof xml_output_flags+"'. Expected type 'number'. Function Signature: getAsXML(number).");return PDFNet.messageHandler.sendWithPromise("TextExtractor.getAsXML",{te:this.id,xml_output_flags:xml_output_flags},
this.userPriority)};PDFNet.TextExtractorStyle.prototype.getFont=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFont'. Expected 0 arguments. Function Signature: getFont()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFont'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=
this;this.yieldFunction="TextExtractorStyle.getFont";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.getFont",{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.tes,me);return new PDFNet.Obj(id.result)})};PDFNet.TextExtractorStyle.prototype.getFontName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFontName'. Expected 0 arguments. Function Signature: getFontName()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFontName'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.getFontName";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.getFontName",{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);
return id.result})};PDFNet.TextExtractorStyle.prototype.getFontSize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFontSize'. Expected 0 arguments. Function Signature: getFontSize()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFontSize'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");var me=this;this.yieldFunction="TextExtractorStyle.getFontSize";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.getFontSize",{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);return id.result})};PDFNet.TextExtractorStyle.prototype.getWeight=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWeight'. Expected 0 arguments. Function Signature: getWeight()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getWeight'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.getWeight";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.getWeight",{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);return id.result})};PDFNet.TextExtractorStyle.prototype.isItalic=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isItalic'. Expected 0 arguments. Function Signature: isItalic()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isItalic'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.isItalic";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.isItalic",
{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);return id.result})};PDFNet.TextExtractorStyle.prototype.isSerif=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isSerif'. Expected 0 arguments. Function Signature: isSerif()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isSerif'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.isSerif";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.isSerif",{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);return id.result})};PDFNet.TextExtractorStyle.prototype.compare=function(s){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(TextExtractorStyle)");
if(s instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(s instanceof PDFNet.TextExtractorStyle)&&"TextExtractorStyle"!=s.name){if("object"==typeof s)throw new TypeError("1st input argument in function 'compare' is of type '"+s.name+"'. Expected type 'TextExtractorStyle'. Function Signature: compare(TextExtractorStyle).");throw new TypeError("1st input argument '"+s+"' in function 'compare' is of type '"+
typeof s+"'. Expected type 'TextExtractorStyle'. Function Signature: compare(TextExtractorStyle).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'compare'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof s.yieldFunction)throw Error("Function '"+s.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'compare'. Perhaps a yield statement is required for '"+
s.yieldFunction+"'?");var me=this;this.yieldFunction="TextExtractorStyle.compare";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.compare",{tes:this,s:s},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tes,me);return id.result})};PDFNet.TextExtractorStyle.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("textExtractorStyleCreate",
{},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextExtractorStyle(id)})};PDFNet.TextExtractorStyle.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'copy'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.copy";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.copy",{s:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.s,me);return new PDFNet.TextExtractorStyle(id.result.mp_imp)})};PDFNet.TextExtractorWord.prototype.getNumGlyphs=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumGlyphs'. Expected 0 arguments. Function Signature: getNumGlyphs()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getNumGlyphs'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getNumGlyphs";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getNumGlyphs",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tew,me);
return id.result})};PDFNet.TextExtractorWord.prototype.getCharStyle=function(char_idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCharStyle'. Expected 1 argument. Function Signature: getCharStyle(number)");if(char_idx instanceof Promise)throw new TypeError("1st input argument in function 'getCharStyle' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof char_idx)throw new TypeError("1st input argument '"+
char_idx+"' in function 'getCharStyle' is of type '"+typeof char_idx+"'. Expected type 'number'. Function Signature: getCharStyle(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getCharStyle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getCharStyle";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getCharStyle",
{tew:this,char_idx:char_idx},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.tew,me);return new PDFNet.TextExtractorStyle(id.result.mp_imp)})};PDFNet.TextExtractorWord.prototype.getStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStyle'. Expected 0 arguments. Function Signature: getStyle()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStyle'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getStyle";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getStyle",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.tew,me);return new PDFNet.TextExtractorStyle(id.result.mp_imp)})};PDFNet.TextExtractorWord.prototype.getStringLen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStringLen'. Expected 0 arguments. Function Signature: getStringLen()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStringLen'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getStringLen";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getStringLen",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tew,me);
return id.result})};PDFNet.TextExtractorWord.prototype.getNextWord=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNextWord'. Expected 0 arguments. Function Signature: getNextWord()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getNextWord'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");var me=this;this.yieldFunction="TextExtractorWord.getNextWord";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getNextWord",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.tew,me);return new PDFNet.TextExtractorWord(id.result.line,id.result.word,id.result.end,id.result.uni,id.result.num,id.result.cur_num,id.result.mp_bld)})};PDFNet.TextExtractorWord.prototype.getCurrentNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getCurrentNum'. Expected 0 arguments. Function Signature: getCurrentNum()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getCurrentNum'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getCurrentNum";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getCurrentNum",
{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tew,me);return id.result})};PDFNet.TextExtractorWord.prototype.compare=function(word){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(TextExtractorWord)");if(word instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(word instanceof PDFNet.TextExtractorWord)&&"TextExtractorWord"!=word.name){if("object"==typeof word)throw new TypeError("1st input argument in function 'compare' is of type '"+word.name+"'. Expected type 'TextExtractorWord'. Function Signature: compare(TextExtractorWord).");throw new TypeError("1st input argument '"+word+"' in function 'compare' is of type '"+typeof word+"'. Expected type 'TextExtractorWord'. Function Signature: compare(TextExtractorWord).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'compare'. Perhaps a yield statement is required for "+this.yieldFunction+"?");if("undefined"!=typeof word.yieldFunction)throw Error("Function '"+word.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'compare'. Perhaps a yield statement is required for '"+word.yieldFunction+"'?");var me=this;
this.yieldFunction="TextExtractorWord.compare";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.compare",{tew:this,word:word},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tew,me);return id.result})};PDFNet.TextExtractorWord.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("textExtractorWordCreate",
{},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextExtractorWord(id)})};PDFNet.TextExtractorWord.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.isValid";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.isValid",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.tew,me);return id.result})};PDFNet.TextExtractorLine.prototype.getNumWords=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumWords'. Expected 0 arguments. Function Signature: getNumWords()");if("undefined"!==
typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getNumWords'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getNumWords";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getNumWords",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};
PDFNet.TextExtractorLine.prototype.isSimpleLine=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isSimpleLine'. Expected 0 arguments. Function Signature: isSimpleLine()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isSimpleLine'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=
this;this.yieldFunction="TextExtractorLine.isSimpleLine";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.isSimpleLine",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};PDFNet.TextExtractorLine.prototype.getQuad=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuad'. Expected 0 arguments. Function Signature: getQuad()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+
this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getQuad'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getQuad";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getQuad",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me)})};PDFNet.TextExtractorLine.prototype.getFirstWord=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getFirstWord'. Expected 0 arguments. Function Signature: getFirstWord()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFirstWord'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getFirstWord";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getFirstWord",
{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.line,me);return new PDFNet.TextExtractorWord(id.result.line,id.result.word,id.result.end,id.result.uni,id.result.num,id.result.cur_num,id.result.mp_bld)})};PDFNet.TextExtractorLine.prototype.getWord=function(word_idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getWord'. Expected 1 argument. Function Signature: getWord(number)");if(word_idx instanceof
Promise)throw new TypeError("1st input argument in function 'getWord' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof word_idx)throw new TypeError("1st input argument '"+word_idx+"' in function 'getWord' is of type '"+typeof word_idx+"'. Expected type 'number'. Function Signature: getWord(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getWord'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getWord";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getWord",{line:this,word_idx:word_idx},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.line,me);return new PDFNet.TextExtractorWord(id.result.line,id.result.word,id.result.end,id.result.uni,id.result.num,id.result.cur_num,id.result.mp_bld)})};PDFNet.TextExtractorLine.prototype.getNextLine=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNextLine'. Expected 0 arguments. Function Signature: getNextLine()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getNextLine'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getNextLine";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getNextLine",
{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.line,me);return new PDFNet.TextExtractorLine(id.result.line,id.result.uni,id.result.num,id.result.cur_num,id.result.m_direction,id.result.mp_bld)})};PDFNet.TextExtractorLine.prototype.getCurrentNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCurrentNum'. Expected 0 arguments. Function Signature: getCurrentNum()");if("undefined"!==
typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getCurrentNum'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getCurrentNum";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getCurrentNum",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};
PDFNet.TextExtractorLine.prototype.getStyle=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getStyle'. Expected 0 arguments. Function Signature: getStyle()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getStyle'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"TextExtractorLine.getStyle";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getStyle",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.line,me);return new PDFNet.TextExtractorStyle(id.result.mp_imp)})};PDFNet.TextExtractorLine.prototype.getParagraphID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getParagraphID'. Expected 0 arguments. Function Signature: getParagraphID()");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getParagraphID'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.getParagraphID";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getParagraphID",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,
me);return id.result})};PDFNet.TextExtractorLine.prototype.getFlowID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFlowID'. Expected 0 arguments. Function Signature: getFlowID()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getFlowID'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");var me=this;this.yieldFunction="TextExtractorLine.getFlowID";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getFlowID",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};PDFNet.TextExtractorLine.prototype.endsWithHyphen=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'endsWithHyphen'. Expected 0 arguments. Function Signature: endsWithHyphen()");if("undefined"!==
typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'endsWithHyphen'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.endsWithHyphen";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.endsWithHyphen",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};
PDFNet.TextExtractorLine.prototype.compare=function(line2){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'compare'. Expected 1 argument. Function Signature: compare(TextExtractorLine)");if(line2 instanceof Promise)throw new TypeError("1st input argument in function 'compare' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(line2 instanceof PDFNet.TextExtractorLine)&&"TextExtractorLine"!=line2.name){if("object"==
typeof line2)throw new TypeError("1st input argument in function 'compare' is of type '"+line2.name+"'. Expected type 'TextExtractorLine'. Function Signature: compare(TextExtractorLine).");throw new TypeError("1st input argument '"+line2+"' in function 'compare' is of type '"+typeof line2+"'. Expected type 'TextExtractorLine'. Function Signature: compare(TextExtractorLine).");}if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'compare'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");if("undefined"!=typeof line2.yieldFunction)throw Error("Function '"+line2.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'compare'. Perhaps a yield statement is required for '"+line2.yieldFunction+"'?");var me=this;this.yieldFunction="TextExtractorLine.compare";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.compare",{line:this,line2:line2},this.userPriority).then(function(id){me.yieldFunction=
void 0;copyFunc(id.line,me);return id.result})};PDFNet.TextExtractorLine.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("textExtractorLineCreate",{},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextExtractorLine(id)})};PDFNet.TextExtractorLine.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'isValid'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorLine.isValid";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.isValid",{line:this},
this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.line,me);return id.result})};PDFNet.TextExtractor.prototype.getNumLines=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumLines'. Expected 0 arguments. Function Signature: getNumLines()");return PDFNet.messageHandler.sendWithPromise("TextExtractor.getNumLines",{te:this.id},this.userPriority)};PDFNet.TextExtractor.prototype.getFirstLine=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getFirstLine'. Expected 0 arguments. Function Signature: getFirstLine()");return PDFNet.messageHandler.sendWithPromise("TextExtractor.getFirstLine",{te:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.TextExtractorLine(id)})};PDFNet.TextExtractor.prototype.getQuads=function(mtx,quads,quads_size){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuads'. Expected 3 arguments. Function Signature: getQuads(Matrix2D, number, number)");
if(mtx instanceof Promise)throw new TypeError("1st input argument in function 'getQuads' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("1st input argument in function 'getQuads' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: getQuads(Matrix2D, number, number).");throw new TypeError("1st input argument '"+mtx+"' in function 'getQuads' is of type '"+
typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: getQuads(Matrix2D, number, number).");}if(quads instanceof Promise)throw new TypeError("2nd input argument in function 'getQuads' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof quads)throw new TypeError("2nd input argument '"+quads+"' in function 'getQuads' is of type '"+typeof quads+"'. Expected type 'number'. Function Signature: getQuads(Matrix2D, number, number).");if(quads_size instanceof
Promise)throw new TypeError("3rd input argument in function 'getQuads' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof quads_size)throw new TypeError("3rd input argument '"+quads_size+"' in function 'getQuads' is of type '"+typeof quads_size+"'. Expected type 'number'. Function Signature: getQuads(Matrix2D, number, number).");if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'getQuads'. Perhaps a yield statement is required for '"+
mtx.yieldFunction+"'?");var me=this;this.yieldFunction="TextExtractor.getQuads";return PDFNet.messageHandler.sendWithPromise("TextExtractor.getQuads",{te:this.id,mtx:mtx,quads:quads,quads_size:quads_size},this.userPriority).then(function(id){me.yieldFunction=void 0;copyFunc(id.mtx,me)})};PDFNet.TextSearch.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("textSearchCreate",
{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.TextSearch(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.TextSearch.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,
1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("TextSearch.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.TextSearch.prototype.begin=function(doc,pattern,mode,start_page,end_page){"undefined"===typeof start_page&&(start_page=-1);"undefined"===
typeof end_page&&(end_page=-1);if(3>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'begin'. Expected 3 to 5 arguments. Function Signature: begin(PDFDoc, string, number, number, number)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==
typeof doc)throw new TypeError("1st input argument in function 'begin' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: begin(PDFDoc, string, number, number, number).");throw new TypeError("1st input argument '"+doc+"' in function 'begin' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: begin(PDFDoc, string, number, number, number).");}if(pattern instanceof Promise)throw new TypeError("2nd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof pattern)throw new TypeError("2nd input argument '"+pattern+"' in function 'begin' is of type '"+typeof pattern+"'. Expected type 'string'. Function Signature: begin(PDFDoc, string, number, number, number).");if(mode instanceof Promise)throw new TypeError("3rd input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("3rd input argument '"+mode+"' in function 'begin' is of type '"+
typeof mode+"'. Expected type 'number'. Function Signature: begin(PDFDoc, string, number, number, number).");if(start_page instanceof Promise)throw new TypeError("4th input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof start_page)throw new TypeError("4th input argument '"+start_page+"' in function 'begin' is of type '"+typeof start_page+"'. Expected type 'number'. Function Signature: begin(PDFDoc, string, number, number, number).");
if(end_page instanceof Promise)throw new TypeError("5th input argument in function 'begin' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof end_page)throw new TypeError("5th input argument '"+end_page+"' in function 'begin' is of type '"+typeof end_page+"'. Expected type 'number'. Function Signature: begin(PDFDoc, string, number, number, number).");return PDFNet.messageHandler.sendWithPromise("TextSearch.begin",{ts:this.id,doc:doc.id,pattern:pattern,
mode:mode,start_page:start_page,end_page:end_page},this.userPriority)};PDFNet.TextSearch.prototype.setPattern=function(pattern){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPattern'. Expected 1 argument. Function Signature: setPattern(string)");if(pattern instanceof Promise)throw new TypeError("1st input argument in function 'setPattern' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof pattern)throw new TypeError("1st input argument '"+
pattern+"' in function 'setPattern' is of type '"+typeof pattern+"'. Expected type 'string'. Function Signature: setPattern(string).");return PDFNet.messageHandler.sendWithPromise("TextSearch.setPattern",{ts:this.id,pattern:pattern},this.userPriority)};PDFNet.TextSearch.prototype.getMode=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getMode'. Expected 0 arguments. Function Signature: getMode()");return PDFNet.messageHandler.sendWithPromise("TextSearch.getMode",
{ts:this.id},this.userPriority)};PDFNet.TextSearch.prototype.setMode=function(mode){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMode'. Expected 1 argument. Function Signature: setMode(number)");if(mode instanceof Promise)throw new TypeError("1st input argument in function 'setMode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof mode)throw new TypeError("1st input argument '"+mode+"' in function 'setMode' is of type '"+
typeof mode+"'. Expected type 'number'. Function Signature: setMode(number).");return PDFNet.messageHandler.sendWithPromise("TextSearch.setMode",{ts:this.id,mode:mode},this.userPriority)};PDFNet.TextSearch.prototype.setRightToLeftLanguage=function(flag){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setRightToLeftLanguage'. Expected 1 argument. Function Signature: setRightToLeftLanguage(boolean)");if(flag instanceof Promise)throw new TypeError("1st input argument in function 'setRightToLeftLanguage' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof flag)throw new TypeError("1st input argument '"+flag+"' in function 'setRightToLeftLanguage' is of type '"+typeof flag+"'. Expected type 'boolean'. Function Signature: setRightToLeftLanguage(boolean).");return PDFNet.messageHandler.sendWithPromise("TextSearch.setRightToLeftLanguage",{ts:this.id,flag:flag},this.userPriority)};PDFNet.TextSearch.prototype.getCurrentPage=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getCurrentPage'. Expected 0 arguments. Function Signature: getCurrentPage()");
return PDFNet.messageHandler.sendWithPromise("TextSearch.getCurrentPage",{ts:this.id},this.userPriority)};PDFNet.NameTree.create=function(doc,name){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 2 arguments. Function Signature: create(SDFDoc, string)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof
PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'create' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, string).");throw new TypeError("1st input argument '"+doc+"' in function 'create' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: create(SDFDoc, string).");}if(name instanceof Promise)throw new TypeError("2nd input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'create' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: create(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("nameTreeCreate",{doc:doc.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NameTree(id)})};PDFNet.NameTree.find=function(doc,name){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'find'. Expected 2 arguments. Function Signature: find(SDFDoc, string)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'find' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'find' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: find(SDFDoc, string).");throw new TypeError("1st input argument '"+doc+"' in function 'find' is of type '"+
typeof doc+"'. Expected type 'SDFDoc'. Function Signature: find(SDFDoc, string).");}if(name instanceof Promise)throw new TypeError("2nd input argument in function 'find' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'find' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: find(SDFDoc, string).");return PDFNet.messageHandler.sendWithPromise("nameTreeFind",
{doc:doc.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NameTree(id)})};PDFNet.NameTree.createFromObj=function(name_tree){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromObj'. Expected 1 argument. Function Signature: createFromObj(Obj)");if(name_tree instanceof Promise)throw new TypeError("1st input argument in function 'createFromObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(name_tree instanceof PDFNet.Obj)){if("object"==typeof name_tree)throw new TypeError("1st input argument in function 'createFromObj' is of type '"+name_tree.name+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");throw new TypeError("1st input argument '"+name_tree+"' in function 'createFromObj' is of type '"+typeof name_tree+"'. Expected type 'Obj'. Function Signature: createFromObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("nameTreeCreateFromObj",{name_tree:name_tree.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NameTree(id)})};PDFNet.NameTree.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("NameTree.copy",{d:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NameTree(id)})};PDFNet.NameTree.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("NameTree.isValid",{tree:this.id},this.userPriority)};PDFNet.NameTree.prototype.getIterator=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIterator'. Expected 1 argument. Function Signature: getIterator(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'getIterator' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'getIterator' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: getIterator(string).");return PDFNet.messageHandler.sendWithPromise("NameTree.getIterator",{tree:this.id,key:key},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.NameTree.prototype.getValue=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getValue'. Expected 1 argument. Function Signature: getValue(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'getValue' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'getValue' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: getValue(string).");return PDFNet.messageHandler.sendWithPromise("NameTree.getValue",
{tree:this.id,key:key},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.NameTree.prototype.getIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIteratorBegin'. Expected 0 arguments. Function Signature: getIteratorBegin()");return PDFNet.messageHandler.sendWithPromise("NameTree.getIteratorBegin",{tree:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.NameTree.prototype.put=function(key,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'put'. Expected 2 arguments. Function Signature: put(string, Obj)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+
key+"' in function 'put' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: put(string, Obj).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("2nd input argument in function 'put' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: put(string, Obj).");throw new TypeError("2nd input argument '"+
value+"' in function 'put' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: put(string, Obj).");}return PDFNet.messageHandler.sendWithPromise("NameTree.put",{tree:this.id,key:key,value:value.id},this.userPriority)};PDFNet.NameTree.prototype.eraseKey=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eraseKey'. Expected 1 argument. Function Signature: eraseKey(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'eraseKey' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'eraseKey' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: eraseKey(string).");return PDFNet.messageHandler.sendWithPromise("NameTree.eraseKey",{tree:this.id,key:key},this.userPriority)};PDFNet.NameTree.prototype.erase=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'erase'. Expected 1 argument. Function Signature: erase(DictIterator)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.DictIterator)){if("object"==typeof pos)throw new TypeError("1st input argument in function 'erase' is of type '"+pos.name+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");throw new TypeError("1st input argument '"+pos+"' in function 'erase' is of type '"+typeof pos+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");
}return PDFNet.messageHandler.sendWithPromise("NameTree.erase",{tree:this.id,pos:pos.id},this.userPriority)};PDFNet.NameTree.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("NameTree.getSDFObj",{tree:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.NumberTree.create=
function(number_tree){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(Obj)");if(number_tree instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(number_tree instanceof PDFNet.Obj)){if("object"==typeof number_tree)throw new TypeError("1st input argument in function 'create' is of type '"+
number_tree.name+"'. Expected type 'Obj'. Function Signature: create(Obj).");throw new TypeError("1st input argument '"+number_tree+"' in function 'create' is of type '"+typeof number_tree+"'. Expected type 'Obj'. Function Signature: create(Obj).");}return PDFNet.messageHandler.sendWithPromise("numberTreeCreate",{number_tree:number_tree.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NumberTree(id)})};PDFNet.NumberTree.prototype.copy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'copy'. Expected 0 arguments. Function Signature: copy()");return PDFNet.messageHandler.sendWithPromise("NumberTree.copy",{tree:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.NumberTree(id)})};PDFNet.NumberTree.prototype.isValid=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isValid'. Expected 0 arguments. Function Signature: isValid()");return PDFNet.messageHandler.sendWithPromise("NumberTree.isValid",
{tree:this.id},this.userPriority)};PDFNet.NumberTree.prototype.getIterator=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIterator'. Expected 1 argument. Function Signature: getIterator(number)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'getIterator' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof key)throw new TypeError("1st input argument '"+
key+"' in function 'getIterator' is of type '"+typeof key+"'. Expected type 'number'. Function Signature: getIterator(number).");return PDFNet.messageHandler.sendWithPromise("NumberTree.getIterator",{tree:this.id,key:key},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.NumberTree.prototype.getValue=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getValue'. Expected 1 argument. Function Signature: getValue(number)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'getValue' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'getValue' is of type '"+typeof key+"'. Expected type 'number'. Function Signature: getValue(number).");return PDFNet.messageHandler.sendWithPromise("NumberTree.getValue",{tree:this.id,key:key},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Obj(id)})};PDFNet.NumberTree.prototype.getIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getIteratorBegin'. Expected 0 arguments. Function Signature: getIteratorBegin()");return PDFNet.messageHandler.sendWithPromise("NumberTree.getIteratorBegin",{tree:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.NumberTree.prototype.put=
function(key,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'put'. Expected 2 arguments. Function Signature: put(number, Obj)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'put' is of type '"+typeof key+"'. Expected type 'number'. Function Signature: put(number, Obj).");
if(value instanceof Promise)throw new TypeError("2nd input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(value instanceof PDFNet.Obj)){if("object"==typeof value)throw new TypeError("2nd input argument in function 'put' is of type '"+value.name+"'. Expected type 'Obj'. Function Signature: put(number, Obj).");throw new TypeError("2nd input argument '"+value+"' in function 'put' is of type '"+typeof value+"'. Expected type 'Obj'. Function Signature: put(number, Obj).");
}return PDFNet.messageHandler.sendWithPromise("NumberTree.put",{tree:this.id,key:key,value:value.id},this.userPriority)};PDFNet.NumberTree.prototype.eraseKey=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eraseKey'. Expected 1 argument. Function Signature: eraseKey(number)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'eraseKey' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'eraseKey' is of type '"+typeof key+"'. Expected type 'number'. Function Signature: eraseKey(number).");return PDFNet.messageHandler.sendWithPromise("NumberTree.eraseKey",{tree:this.id,key:key},this.userPriority)};PDFNet.NumberTree.prototype.erase=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'erase'. Expected 1 argument. Function Signature: erase(DictIterator)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.DictIterator)){if("object"==typeof pos)throw new TypeError("1st input argument in function 'erase' is of type '"+pos.name+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");throw new TypeError("1st input argument '"+pos+"' in function 'erase' is of type '"+typeof pos+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");
}return PDFNet.messageHandler.sendWithPromise("NumberTree.erase",{tree:this.id,pos:pos.id},this.userPriority)};PDFNet.NumberTree.prototype.getSDFObj=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSDFObj'. Expected 0 arguments. Function Signature: getSDFObj()");return PDFNet.messageHandler.sendWithPromise("NumberTree.getSDFObj",{tree:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.getType=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getType'. Expected 0 arguments. Function Signature: getType()");return PDFNet.messageHandler.sendWithPromise("Obj.getType",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getDoc=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDoc'. Expected 0 arguments. Function Signature: getDoc()");return PDFNet.messageHandler.sendWithPromise("Obj.getDoc",
{o:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SDFDoc(id)})};PDFNet.Obj.prototype.write=function(stream){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'write'. Expected 1 argument. Function Signature: write(FilterWriter)");if(stream instanceof Promise)throw new TypeError("1st input argument in function 'write' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(stream instanceof PDFNet.FilterWriter)){if("object"==
typeof stream)throw new TypeError("1st input argument in function 'write' is of type '"+stream.name+"'. Expected type 'FilterWriter'. Function Signature: write(FilterWriter).");throw new TypeError("1st input argument '"+stream+"' in function 'write' is of type '"+typeof stream+"'. Expected type 'FilterWriter'. Function Signature: write(FilterWriter).");}return PDFNet.messageHandler.sendWithPromise("Obj.write",{o:this.id,stream:stream.id},this.userPriority)};PDFNet.Obj.prototype.isEqual=function(to){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isEqual'. Expected 1 argument. Function Signature: isEqual(Obj)");if(to instanceof Promise)throw new TypeError("1st input argument in function 'isEqual' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(to instanceof PDFNet.Obj)){if("object"==typeof to)throw new TypeError("1st input argument in function 'isEqual' is of type '"+to.name+"'. Expected type 'Obj'. Function Signature: isEqual(Obj).");
throw new TypeError("1st input argument '"+to+"' in function 'isEqual' is of type '"+typeof to+"'. Expected type 'Obj'. Function Signature: isEqual(Obj).");}return PDFNet.messageHandler.sendWithPromise("Obj.isEqual",{o:this.id,to:to.id},this.userPriority)};PDFNet.Obj.prototype.isBool=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isBool'. Expected 0 arguments. Function Signature: isBool()");return PDFNet.messageHandler.sendWithPromise("Obj.isBool",
{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getBool=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBool'. Expected 0 arguments. Function Signature: getBool()");return PDFNet.messageHandler.sendWithPromise("Obj.getBool",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setBool=function(b){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setBool'. Expected 1 argument. Function Signature: setBool(boolean)");
if(b instanceof Promise)throw new TypeError("1st input argument in function 'setBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof b)throw new TypeError("1st input argument '"+b+"' in function 'setBool' is of type '"+typeof b+"'. Expected type 'boolean'. Function Signature: setBool(boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.setBool",{o:this.id,b:b},this.userPriority)};PDFNet.Obj.prototype.isNumber=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isNumber'. Expected 0 arguments. Function Signature: isNumber()");return PDFNet.messageHandler.sendWithPromise("Obj.isNumber",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getNumber=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getNumber'. Expected 0 arguments. Function Signature: getNumber()");return PDFNet.messageHandler.sendWithPromise("Obj.getNumber",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setNumber=
function(n){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setNumber'. Expected 1 argument. Function Signature: setNumber(number)");if(n instanceof Promise)throw new TypeError("1st input argument in function 'setNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof n)throw new TypeError("1st input argument '"+n+"' in function 'setNumber' is of type '"+typeof n+"'. Expected type 'number'. Function Signature: setNumber(number).");
return PDFNet.messageHandler.sendWithPromise("Obj.setNumber",{o:this.id,n:n},this.userPriority)};PDFNet.Obj.prototype.isNull=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isNull'. Expected 0 arguments. Function Signature: isNull()");return PDFNet.messageHandler.sendWithPromise("Obj.isNull",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.isString=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isString'. Expected 0 arguments. Function Signature: isString()");
return PDFNet.messageHandler.sendWithPromise("Obj.isString",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getBuffer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBuffer'. Expected 0 arguments. Function Signature: getBuffer()");return PDFNet.messageHandler.sendWithPromise("Obj.getBuffer",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setString=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setString'. Expected 1 argument. Function Signature: setString(string)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'setString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setString' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: setString(string).");return PDFNet.messageHandler.sendWithPromise("Obj.setString",{o:this.id,value:value},this.userPriority)};PDFNet.Obj.prototype.setUString=
function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setUString'. Expected 1 argument. Function Signature: setUString(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'setUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'setUString' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: setUString(string).");
return PDFNet.messageHandler.sendWithPromise("Obj.setUString",{o:this.id,value:value},this.userPriority)};PDFNet.Obj.prototype.isName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isName'. Expected 0 arguments. Function Signature: isName()");return PDFNet.messageHandler.sendWithPromise("Obj.isName",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");
return PDFNet.messageHandler.sendWithPromise("Obj.getName",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setName=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setName'. Expected 1 argument. Function Signature: setName(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'setName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+
name+"' in function 'setName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: setName(string).");return PDFNet.messageHandler.sendWithPromise("Obj.setName",{o:this.id,name:name},this.userPriority)};PDFNet.Obj.prototype.isIndirect=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isIndirect'. Expected 0 arguments. Function Signature: isIndirect()");return PDFNet.messageHandler.sendWithPromise("Obj.isIndirect",{o:this.id},
this.userPriority)};PDFNet.Obj.prototype.getObjNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getObjNum'. Expected 0 arguments. Function Signature: getObjNum()");return PDFNet.messageHandler.sendWithPromise("Obj.getObjNum",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getGenNum=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getGenNum'. Expected 0 arguments. Function Signature: getGenNum()");
return PDFNet.messageHandler.sendWithPromise("Obj.getGenNum",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getOffset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getOffset'. Expected 0 arguments. Function Signature: getOffset()");return PDFNet.messageHandler.sendWithPromise("Obj.getOffset",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.isFree=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isFree'. Expected 0 arguments. Function Signature: isFree()");
return PDFNet.messageHandler.sendWithPromise("Obj.isFree",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setMark=function(mark){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setMark'. Expected 1 argument. Function Signature: setMark(boolean)");if(mark instanceof Promise)throw new TypeError("1st input argument in function 'setMark' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof mark)throw new TypeError("1st input argument '"+
mark+"' in function 'setMark' is of type '"+typeof mark+"'. Expected type 'boolean'. Function Signature: setMark(boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.setMark",{o:this.id,mark:mark},this.userPriority)};PDFNet.Obj.prototype.isMarked=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isMarked'. Expected 0 arguments. Function Signature: isMarked()");return PDFNet.messageHandler.sendWithPromise("Obj.isMarked",{o:this.id},this.userPriority)};
PDFNet.Obj.prototype.isLoaded=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isLoaded'. Expected 0 arguments. Function Signature: isLoaded()");return PDFNet.messageHandler.sendWithPromise("Obj.isLoaded",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.isContainer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isContainer'. Expected 0 arguments. Function Signature: isContainer()");
return PDFNet.messageHandler.sendWithPromise("Obj.isContainer",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.size=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'size'. Expected 0 arguments. Function Signature: size()");return PDFNet.messageHandler.sendWithPromise("Obj.size",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getDictIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDictIterator'. Expected 0 arguments. Function Signature: getDictIterator()");
return PDFNet.messageHandler.sendWithPromise("Obj.getDictIterator",{o:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Obj.prototype.isDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isDict'. Expected 0 arguments. Function Signature: isDict()");return PDFNet.messageHandler.sendWithPromise("Obj.isDict",{o:this.id},this.userPriority)};
PDFNet.Obj.prototype.find=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'find'. Expected 1 argument. Function Signature: find(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'find' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'find' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: find(string).");
return PDFNet.messageHandler.sendWithPromise("Obj.find",{o:this.id,key:key},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Obj.prototype.findObj=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'findObj'. Expected 1 argument. Function Signature: findObj(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'findObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'findObj' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: findObj(string).");return PDFNet.messageHandler.sendWithPromise("Obj.findObj",{o:this.id,key:key},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.get=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'get'. Expected 1 argument. Function Signature: get(string)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'get' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'get' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: get(string).");return PDFNet.messageHandler.sendWithPromise("Obj.get",{o:this.id,key:key},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.DictIterator(id);
createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Obj.prototype.putName=function(key,name){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putName'. Expected 2 arguments. Function Signature: putName(string, string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+
key+"' in function 'putName' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putName(string, string).");if(name instanceof Promise)throw new TypeError("2nd input argument in function 'putName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'putName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: putName(string, string).");return PDFNet.messageHandler.sendWithPromise("Obj.putName",
{o:this.id,key:key,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putArray=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putArray'. Expected 1 argument. Function Signature: putArray(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putArray' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putArray' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putArray(string).");return PDFNet.messageHandler.sendWithPromise("Obj.putArray",{o:this.id,key:key},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putBool=function(key,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putBool'. Expected 2 arguments. Function Signature: putBool(string, boolean)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'putBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putBool' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putBool(string, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'putBool' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'putBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: putBool(string, boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.putBool",{o:this.id,key:key,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putDict=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putDict'. Expected 1 argument. Function Signature: putDict(string)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'putDict' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putDict' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putDict(string).");return PDFNet.messageHandler.sendWithPromise("Obj.putDict",{o:this.id,key:key},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};
PDFNet.Obj.prototype.putNumber=function(key,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putNumber'. Expected 2 arguments. Function Signature: putNumber(string, number)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putNumber' is of type '"+
typeof key+"'. Expected type 'string'. Function Signature: putNumber(string, number).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'putNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'putNumber' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: putNumber(string, number).");return PDFNet.messageHandler.sendWithPromise("Obj.putNumber",
{o:this.id,key:key,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putString=function(key,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putString'. Expected 2 arguments. Function Signature: putString(string, string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putString' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putString(string, string).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'putString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'putString' is of type '"+typeof value+
"'. Expected type 'string'. Function Signature: putString(string, string).");return PDFNet.messageHandler.sendWithPromise("Obj.putString",{o:this.id,key:key,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putStringWithSize=function(key,value,size){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putStringWithSize'. Expected 3 arguments. Function Signature: putStringWithSize(string, string, number)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'putStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putStringWithSize' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putStringWithSize(string, string, number).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'putStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'putStringWithSize' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: putStringWithSize(string, string, number).");if(size instanceof Promise)throw new TypeError("3rd input argument in function 'putStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size)throw new TypeError("3rd input argument '"+size+"' in function 'putStringWithSize' is of type '"+
typeof size+"'. Expected type 'number'. Function Signature: putStringWithSize(string, string, number).");return PDFNet.messageHandler.sendWithPromise("Obj.putStringWithSize",{o:this.id,key:key,value:value,size:size},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putText=function(key,t){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putText'. Expected 2 arguments. Function Signature: putText(string, string)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'putText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putText' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putText(string, string).");if(t instanceof Promise)throw new TypeError("2nd input argument in function 'putText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof t)throw new TypeError("2nd input argument '"+t+"' in function 'putText' is of type '"+typeof t+"'. Expected type 'string'. Function Signature: putText(string, string).");return PDFNet.messageHandler.sendWithPromise("Obj.putText",{o:this.id,key:key,t:t},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putNull=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putNull'. Expected 1 argument. Function Signature: putNull(string)");
if(key instanceof Promise)throw new TypeError("1st input argument in function 'putNull' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putNull' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putNull(string).");return PDFNet.messageHandler.sendWithPromise("Obj.putNull",{o:this.id,key:key},this.userPriority)};PDFNet.Obj.prototype.put=function(key,input_obj){if(2!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'put'. Expected 2 arguments. Function Signature: put(string, Obj)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'put' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: put(string, Obj).");
if(input_obj instanceof Promise)throw new TypeError("2nd input argument in function 'put' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(input_obj instanceof PDFNet.Obj)){if("object"==typeof input_obj)throw new TypeError("2nd input argument in function 'put' is of type '"+input_obj.name+"'. Expected type 'Obj'. Function Signature: put(string, Obj).");throw new TypeError("2nd input argument '"+input_obj+"' in function 'put' is of type '"+typeof input_obj+"'. Expected type 'Obj'. Function Signature: put(string, Obj).");
}return PDFNet.messageHandler.sendWithPromise("Obj.put",{o:this.id,key:key,input_obj:input_obj.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putRect=function(key,x1,y1,x2,y2){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'putRect'. Expected 5 arguments. Function Signature: putRect(string, number, number, number, number)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putRect' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putRect(string, number, number, number, number).");if(x1 instanceof Promise)throw new TypeError("2nd input argument in function 'putRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x1)throw new TypeError("2nd input argument '"+x1+"' in function 'putRect' is of type '"+typeof x1+
"'. Expected type 'number'. Function Signature: putRect(string, number, number, number, number).");if(y1 instanceof Promise)throw new TypeError("3rd input argument in function 'putRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y1)throw new TypeError("3rd input argument '"+y1+"' in function 'putRect' is of type '"+typeof y1+"'. Expected type 'number'. Function Signature: putRect(string, number, number, number, number).");if(x2 instanceof
Promise)throw new TypeError("4th input argument in function 'putRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x2)throw new TypeError("4th input argument '"+x2+"' in function 'putRect' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: putRect(string, number, number, number, number).");if(y2 instanceof Promise)throw new TypeError("5th input argument in function 'putRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y2)throw new TypeError("5th input argument '"+y2+"' in function 'putRect' is of type '"+typeof y2+"'. Expected type 'number'. Function Signature: putRect(string, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("Obj.putRect",{o:this.id,key:key,x1:x1,y1:y1,x2:x2,y2:y2},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.putMatrix=function(key,mtx){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'putMatrix'. Expected 2 arguments. Function Signature: putMatrix(string, Matrix2D)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'putMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'putMatrix' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: putMatrix(string, Matrix2D).");if(mtx instanceof
Promise)throw new TypeError("2nd input argument in function 'putMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("2nd input argument in function 'putMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: putMatrix(string, Matrix2D).");throw new TypeError("2nd input argument '"+mtx+"' in function 'putMatrix' is of type '"+typeof mtx+
"'. Expected type 'Matrix2D'. Function Signature: putMatrix(string, Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'putMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+"'?");var me=this;this.yieldFunction="Obj.putMatrix";return PDFNet.messageHandler.sendWithPromise("Obj.putMatrix",{o:this.id,key:key,
mtx:mtx},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.mtx,me);return new PDFNet.Obj(id.result)})};PDFNet.Obj.prototype.eraseFromKey=function(key){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eraseFromKey'. Expected 1 argument. Function Signature: eraseFromKey(string)");if(key instanceof Promise)throw new TypeError("1st input argument in function 'eraseFromKey' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof key)throw new TypeError("1st input argument '"+key+"' in function 'eraseFromKey' is of type '"+typeof key+"'. Expected type 'string'. Function Signature: eraseFromKey(string).");return PDFNet.messageHandler.sendWithPromise("Obj.eraseFromKey",{o:this.id,key:key},this.userPriority)};PDFNet.Obj.prototype.erase=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'erase'. Expected 1 argument. Function Signature: erase(DictIterator)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'erase' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(pos instanceof PDFNet.DictIterator)){if("object"==typeof pos)throw new TypeError("1st input argument in function 'erase' is of type '"+pos.name+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");throw new TypeError("1st input argument '"+pos+"' in function 'erase' is of type '"+typeof pos+"'. Expected type 'DictIterator'. Function Signature: erase(DictIterator).");
}return PDFNet.messageHandler.sendWithPromise("Obj.erase",{o:this.id,pos:pos.id},this.userPriority)};PDFNet.Obj.prototype.rename=function(old_key,new_key){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'rename'. Expected 2 arguments. Function Signature: rename(string, string)");if(old_key instanceof Promise)throw new TypeError("1st input argument in function 'rename' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof old_key)throw new TypeError("1st input argument '"+old_key+"' in function 'rename' is of type '"+typeof old_key+"'. Expected type 'string'. Function Signature: rename(string, string).");if(new_key instanceof Promise)throw new TypeError("2nd input argument in function 'rename' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof new_key)throw new TypeError("2nd input argument '"+new_key+"' in function 'rename' is of type '"+typeof new_key+"'. Expected type 'string'. Function Signature: rename(string, string).");
return PDFNet.messageHandler.sendWithPromise("Obj.rename",{o:this.id,old_key:old_key,new_key:new_key},this.userPriority)};PDFNet.Obj.prototype.isArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isArray'. Expected 0 arguments. Function Signature: isArray()");return PDFNet.messageHandler.sendWithPromise("Obj.isArray",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getAt=function(index){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getAt'. Expected 1 argument. Function Signature: getAt(number)");if(index instanceof Promise)throw new TypeError("1st input argument in function 'getAt' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof index)throw new TypeError("1st input argument '"+index+"' in function 'getAt' is of type '"+typeof index+"'. Expected type 'number'. Function Signature: getAt(number).");return PDFNet.messageHandler.sendWithPromise("Obj.getAt",
{o:this.id,index:index},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertName=function(pos,name){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertName'. Expected 2 arguments. Function Signature: insertName(number, string)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertName' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertName(number, string).");if(name instanceof Promise)throw new TypeError("2nd input argument in function 'insertName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("2nd input argument '"+name+"' in function 'insertName' is of type '"+typeof name+
"'. Expected type 'string'. Function Signature: insertName(number, string).");return PDFNet.messageHandler.sendWithPromise("Obj.insertName",{o:this.id,pos:pos,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertArray=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertArray'. Expected 1 argument. Function Signature: insertArray(number)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertArray' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertArray' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertArray(number).");return PDFNet.messageHandler.sendWithPromise("Obj.insertArray",{o:this.id,pos:pos},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertBool=function(pos,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertBool'. Expected 2 arguments. Function Signature: insertBool(number, boolean)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertBool' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertBool(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'insertBool' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'insertBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: insertBool(number, boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.insertBool",{o:this.id,pos:pos,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertDict=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertDict'. Expected 1 argument. Function Signature: insertDict(number)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertDict' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertDict' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertDict(number).");return PDFNet.messageHandler.sendWithPromise("Obj.insertDict",{o:this.id,pos:pos},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertNumber=function(pos,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertNumber'. Expected 2 arguments. Function Signature: insertNumber(number, number)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+
pos+"' in function 'insertNumber' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertNumber(number, number).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'insertNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'insertNumber' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: insertNumber(number, number).");
return PDFNet.messageHandler.sendWithPromise("Obj.insertNumber",{o:this.id,pos:pos,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertString=function(pos,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertString'. Expected 2 arguments. Function Signature: insertString(number, string)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertString' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertString(number, string).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'insertString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'insertString' is of type '"+
typeof value+"'. Expected type 'string'. Function Signature: insertString(number, string).");return PDFNet.messageHandler.sendWithPromise("Obj.insertString",{o:this.id,pos:pos,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertStringWithSize=function(pos,value,size){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertStringWithSize'. Expected 3 arguments. Function Signature: insertStringWithSize(number, string, number)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertStringWithSize' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertStringWithSize(number, string, number).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'insertStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'insertStringWithSize' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: insertStringWithSize(number, string, number).");if(size instanceof Promise)throw new TypeError("3rd input argument in function 'insertStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size)throw new TypeError("3rd input argument '"+size+"' in function 'insertStringWithSize' is of type '"+
typeof size+"'. Expected type 'number'. Function Signature: insertStringWithSize(number, string, number).");return PDFNet.messageHandler.sendWithPromise("Obj.insertStringWithSize",{o:this.id,pos:pos,value:value,size:size},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertText=function(pos,t){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertText'. Expected 2 arguments. Function Signature: insertText(number, string)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertText' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertText(number, string).");if(t instanceof Promise)throw new TypeError("2nd input argument in function 'insertText' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof t)throw new TypeError("2nd input argument '"+t+"' in function 'insertText' is of type '"+typeof t+"'. Expected type 'string'. Function Signature: insertText(number, string).");return PDFNet.messageHandler.sendWithPromise("Obj.insertText",{o:this.id,pos:pos,t:t},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertNull=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertNull'. Expected 1 argument. Function Signature: insertNull(number)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertNull' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertNull' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertNull(number).");return PDFNet.messageHandler.sendWithPromise("Obj.insertNull",{o:this.id,pos:pos},this.userPriority).then(function(id){return"0"==id?
null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insert=function(pos,input_obj){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insert'. Expected 2 arguments. Function Signature: insert(number, Obj)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insert' is of type '"+
typeof pos+"'. Expected type 'number'. Function Signature: insert(number, Obj).");if(input_obj instanceof Promise)throw new TypeError("2nd input argument in function 'insert' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(input_obj instanceof PDFNet.Obj)){if("object"==typeof input_obj)throw new TypeError("2nd input argument in function 'insert' is of type '"+input_obj.name+"'. Expected type 'Obj'. Function Signature: insert(number, Obj).");throw new TypeError("2nd input argument '"+
input_obj+"' in function 'insert' is of type '"+typeof input_obj+"'. Expected type 'Obj'. Function Signature: insert(number, Obj).");}return PDFNet.messageHandler.sendWithPromise("Obj.insert",{o:this.id,pos:pos,input_obj:input_obj.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertRect=function(pos,x1,y1,x2,y2){if(5!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertRect'. Expected 5 arguments. Function Signature: insertRect(number, number, number, number, number)");
if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertRect' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertRect(number, number, number, number, number).");if(x1 instanceof Promise)throw new TypeError("2nd input argument in function 'insertRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x1)throw new TypeError("2nd input argument '"+x1+"' in function 'insertRect' is of type '"+typeof x1+"'. Expected type 'number'. Function Signature: insertRect(number, number, number, number, number).");if(y1 instanceof Promise)throw new TypeError("3rd input argument in function 'insertRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y1)throw new TypeError("3rd input argument '"+y1+"' in function 'insertRect' is of type '"+
typeof y1+"'. Expected type 'number'. Function Signature: insertRect(number, number, number, number, number).");if(x2 instanceof Promise)throw new TypeError("4th input argument in function 'insertRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x2)throw new TypeError("4th input argument '"+x2+"' in function 'insertRect' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: insertRect(number, number, number, number, number).");
if(y2 instanceof Promise)throw new TypeError("5th input argument in function 'insertRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y2)throw new TypeError("5th input argument '"+y2+"' in function 'insertRect' is of type '"+typeof y2+"'. Expected type 'number'. Function Signature: insertRect(number, number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("Obj.insertRect",{o:this.id,pos:pos,x1:x1,y1:y1,x2:x2,y2:y2},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.insertMatrix=function(pos,mtx){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'insertMatrix'. Expected 2 arguments. Function Signature: insertMatrix(number, Matrix2D)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'insertMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'insertMatrix' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: insertMatrix(number, Matrix2D).");if(mtx instanceof Promise)throw new TypeError("2nd input argument in function 'insertMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("2nd input argument in function 'insertMatrix' is of type '"+
mtx.name+"'. Expected type 'Matrix2D'. Function Signature: insertMatrix(number, Matrix2D).");throw new TypeError("2nd input argument '"+mtx+"' in function 'insertMatrix' is of type '"+typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: insertMatrix(number, Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 2nd input argument in function 'insertMatrix'. Perhaps a yield statement is required for '"+
mtx.yieldFunction+"'?");var me=this;this.yieldFunction="Obj.insertMatrix";return PDFNet.messageHandler.sendWithPromise("Obj.insertMatrix",{o:this.id,pos:pos,mtx:mtx},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.mtx,me);return new PDFNet.Obj(id.result)})};PDFNet.Obj.prototype.pushBackName=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackName'. Expected 1 argument. Function Signature: pushBackName(string)");
if(name instanceof Promise)throw new TypeError("1st input argument in function 'pushBackName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'pushBackName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: pushBackName(string).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackName",{o:this.id,name:name},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackArray'. Expected 0 arguments. Function Signature: pushBackArray()");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackArray",{o:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackBool=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pushBackBool'. Expected 1 argument. Function Signature: pushBackBool(boolean)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'pushBackBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'pushBackBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: pushBackBool(boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackBool",
{o:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackDict'. Expected 0 arguments. Function Signature: pushBackDict()");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackDict",{o:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackNumber=
function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackNumber'. Expected 1 argument. Function Signature: pushBackNumber(number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'pushBackNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'pushBackNumber' is of type '"+typeof value+
"'. Expected type 'number'. Function Signature: pushBackNumber(number).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackNumber",{o:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackString=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackString'. Expected 1 argument. Function Signature: pushBackString(string)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'pushBackString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'pushBackString' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: pushBackString(string).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackString",{o:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackStringWithSize=function(value,size){if(2!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pushBackStringWithSize'. Expected 2 arguments. Function Signature: pushBackStringWithSize(string, number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'pushBackStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'pushBackStringWithSize' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: pushBackStringWithSize(string, number).");
if(size instanceof Promise)throw new TypeError("2nd input argument in function 'pushBackStringWithSize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof size)throw new TypeError("2nd input argument '"+size+"' in function 'pushBackStringWithSize' is of type '"+typeof size+"'. Expected type 'number'. Function Signature: pushBackStringWithSize(string, number).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackStringWithSize",{o:this.id,
value:value,size:size},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackText=function(t){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackText'. Expected 1 argument. Function Signature: pushBackText(string)");if(t instanceof Promise)throw new TypeError("1st input argument in function 'pushBackText' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=
typeof t)throw new TypeError("1st input argument '"+t+"' in function 'pushBackText' is of type '"+typeof t+"'. Expected type 'string'. Function Signature: pushBackText(string).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackText",{o:this.id,t:t},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackNull=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackNull'. Expected 0 arguments. Function Signature: pushBackNull()");
return PDFNet.messageHandler.sendWithPromise("Obj.pushBackNull",{o:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBack=function(input_obj){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBack'. Expected 1 argument. Function Signature: pushBack(Obj)");if(input_obj instanceof Promise)throw new TypeError("1st input argument in function 'pushBack' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(input_obj instanceof PDFNet.Obj)){if("object"==typeof input_obj)throw new TypeError("1st input argument in function 'pushBack' is of type '"+input_obj.name+"'. Expected type 'Obj'. Function Signature: pushBack(Obj).");throw new TypeError("1st input argument '"+input_obj+"' in function 'pushBack' is of type '"+typeof input_obj+"'. Expected type 'Obj'. Function Signature: pushBack(Obj).");}return PDFNet.messageHandler.sendWithPromise("Obj.pushBack",{o:this.id,input_obj:input_obj.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackRect=function(x1,y1,x2,y2){if(4!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'pushBackRect'. Expected 4 arguments. Function Signature: pushBackRect(number, number, number, number)");if(x1 instanceof Promise)throw new TypeError("1st input argument in function 'pushBackRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x1)throw new TypeError("1st input argument '"+
x1+"' in function 'pushBackRect' is of type '"+typeof x1+"'. Expected type 'number'. Function Signature: pushBackRect(number, number, number, number).");if(y1 instanceof Promise)throw new TypeError("2nd input argument in function 'pushBackRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y1)throw new TypeError("2nd input argument '"+y1+"' in function 'pushBackRect' is of type '"+typeof y1+"'. Expected type 'number'. Function Signature: pushBackRect(number, number, number, number).");
if(x2 instanceof Promise)throw new TypeError("3rd input argument in function 'pushBackRect' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof x2)throw new TypeError("3rd input argument '"+x2+"' in function 'pushBackRect' is of type '"+typeof x2+"'. Expected type 'number'. Function Signature: pushBackRect(number, number, number, number).");if(y2 instanceof Promise)throw new TypeError("4th input argument in function 'pushBackRect' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof y2)throw new TypeError("4th input argument '"+y2+"' in function 'pushBackRect' is of type '"+typeof y2+"'. Expected type 'number'. Function Signature: pushBackRect(number, number, number, number).");return PDFNet.messageHandler.sendWithPromise("Obj.pushBackRect",{o:this.id,x1:x1,y1:y1,x2:x2,y2:y2},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.Obj.prototype.pushBackMatrix=function(mtx){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'pushBackMatrix'. Expected 1 argument. Function Signature: pushBackMatrix(Matrix2D)");if(mtx instanceof Promise)throw new TypeError("1st input argument in function 'pushBackMatrix' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(mtx instanceof PDFNet.Matrix2D)&&"Matrix2D"!=mtx.name){if("object"==typeof mtx)throw new TypeError("1st input argument in function 'pushBackMatrix' is of type '"+mtx.name+"'. Expected type 'Matrix2D'. Function Signature: pushBackMatrix(Matrix2D).");
throw new TypeError("1st input argument '"+mtx+"' in function 'pushBackMatrix' is of type '"+typeof mtx+"'. Expected type 'Matrix2D'. Function Signature: pushBackMatrix(Matrix2D).");}if("undefined"!=typeof mtx.yieldFunction)throw Error("Function '"+mtx.yieldFunction+"' recently altered a struct object without yielding. That object is now being accessed by the 1st input argument in function 'pushBackMatrix'. Perhaps a yield statement is required for '"+mtx.yieldFunction+"'?");var me=this;this.yieldFunction=
"Obj.pushBackMatrix";return PDFNet.messageHandler.sendWithPromise("Obj.pushBackMatrix",{o:this.id,mtx:mtx},this.userPriority).then(function(id){me.yieldFunction=void 0;if("0"==id)return null;copyFunc(id.mtx,me);return new PDFNet.Obj(id.result)})};PDFNet.Obj.prototype.eraseAt=function(pos){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'eraseAt'. Expected 1 argument. Function Signature: eraseAt(number)");if(pos instanceof Promise)throw new TypeError("1st input argument in function 'eraseAt' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof pos)throw new TypeError("1st input argument '"+pos+"' in function 'eraseAt' is of type '"+typeof pos+"'. Expected type 'number'. Function Signature: eraseAt(number).");return PDFNet.messageHandler.sendWithPromise("Obj.eraseAt",{o:this.id,pos:pos},this.userPriority)};PDFNet.Obj.prototype.isStream=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isStream'. Expected 0 arguments. Function Signature: isStream()");return PDFNet.messageHandler.sendWithPromise("Obj.isStream",
{o:this.id},this.userPriority)};PDFNet.Obj.prototype.getRawStreamLength=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRawStreamLength'. Expected 0 arguments. Function Signature: getRawStreamLength()");return PDFNet.messageHandler.sendWithPromise("Obj.getRawStreamLength",{o:this.id},this.userPriority)};PDFNet.Obj.prototype.setStreamData=function(data,data_size){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStreamData'. Expected 2 arguments. Function Signature: setStreamData(string, number)");
if(data instanceof Promise)throw new TypeError("1st input argument in function 'setStreamData' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof data)throw new TypeError("1st input argument '"+data+"' in function 'setStreamData' is of type '"+typeof data+"'. Expected type 'string'. Function Signature: setStreamData(string, number).");if(data_size instanceof Promise)throw new TypeError("2nd input argument in function 'setStreamData' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof data_size)throw new TypeError("2nd input argument '"+data_size+"' in function 'setStreamData' is of type '"+typeof data_size+"'. Expected type 'number'. Function Signature: setStreamData(string, number).");return PDFNet.messageHandler.sendWithPromise("Obj.setStreamData",{obj:this.id,data:data,data_size:data_size},this.userPriority)};PDFNet.Obj.prototype.setStreamDataWithFilter=function(data,data_size,no_own_filter_chain){"undefined"===typeof no_own_filter_chain&&(no_own_filter_chain=
new PDFNet.Filter("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setStreamDataWithFilter'. Expected 2 to 3 arguments. Function Signature: setStreamDataWithFilter(string, number, Filter)");if(data instanceof Promise)throw new TypeError("1st input argument in function 'setStreamDataWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof data&&null!==data)throw new TypeError("1st input argument '"+
data+"' in function 'setStreamDataWithFilter' is of type '"+typeof data+"'. Expected type 'string'. Function Signature: setStreamDataWithFilter(string, number, Filter).");if(data_size instanceof Promise)throw new TypeError("2nd input argument in function 'setStreamDataWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof data_size)throw new TypeError("2nd input argument '"+data_size+"' in function 'setStreamDataWithFilter' is of type '"+
typeof data_size+"'. Expected type 'number'. Function Signature: setStreamDataWithFilter(string, number, Filter).");if(no_own_filter_chain instanceof Promise)throw new TypeError("3rd input argument in function 'setStreamDataWithFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter_chain instanceof PDFNet.Filter)){if("object"==typeof no_own_filter_chain)throw new TypeError("3rd input argument in function 'setStreamDataWithFilter' is of type '"+
no_own_filter_chain.name+"'. Expected type 'Filter'. Function Signature: setStreamDataWithFilter(string, number, Filter).");throw new TypeError("3rd input argument '"+no_own_filter_chain+"' in function 'setStreamDataWithFilter' is of type '"+typeof no_own_filter_chain+"'. Expected type 'Filter'. Function Signature: setStreamDataWithFilter(string, number, Filter).");}var ownedObjIndex=-1;if(0!=no_own_filter_chain.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_filter_chain.id){ownedObjIndex=
i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("Obj.setStreamDataWithFilter",{obj:this.id,data:data,data_size:data_size,no_own_filter_chain:no_own_filter_chain.id},this.userPriority)};
PDFNet.Obj.prototype.getRawStream=function(decrypt){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getRawStream'. Expected 1 argument. Function Signature: getRawStream(boolean)");if(decrypt instanceof Promise)throw new TypeError("1st input argument in function 'getRawStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof decrypt)throw new TypeError("1st input argument '"+decrypt+"' in function 'getRawStream' is of type '"+
typeof decrypt+"'. Expected type 'boolean'. Function Signature: getRawStream(boolean).");return PDFNet.messageHandler.sendWithPromise("Obj.getRawStream",{o:this.id,decrypt:decrypt},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.Obj.prototype.getDecodedStream=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getDecodedStream'. Expected 0 arguments. Function Signature: getDecodedStream()");return PDFNet.messageHandler.sendWithPromise("Obj.getDecodedStream",
{o:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.ObjSet.create=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 0 arguments. Function Signature: create()");return PDFNet.messageHandler.sendWithPromise("objSetCreate",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.ObjSet(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ObjSet.prototype.destroy=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");
return PDFNet.messageHandler.sendWithPromise("ObjSet.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.ObjSet.prototype.createName=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createName'. Expected 1 argument. Function Signature: createName(string)");if(name instanceof Promise)throw new TypeError("1st input argument in function 'createName' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'createName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: createName(string).");return PDFNet.messageHandler.sendWithPromise("ObjSet.createName",{set:this.id,name:name},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createArray'. Expected 0 arguments. Function Signature: createArray()");
return PDFNet.messageHandler.sendWithPromise("ObjSet.createArray",{set:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createBool=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createBool'. Expected 1 argument. Function Signature: createBool(boolean)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'createBool' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: createBool(boolean).");return PDFNet.messageHandler.sendWithPromise("ObjSet.createBool",{set:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createDict'. Expected 0 arguments. Function Signature: createDict()");
return PDFNet.messageHandler.sendWithPromise("ObjSet.createDict",{set:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createNull=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createNull'. Expected 0 arguments. Function Signature: createNull()");return PDFNet.messageHandler.sendWithPromise("ObjSet.createNull",{set:this.id},this.userPriority).then(function(id){return"0"==id?null:
new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createNumber=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createNumber'. Expected 1 argument. Function Signature: createNumber(number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'createNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+value+
"' in function 'createNumber' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: createNumber(number).");return PDFNet.messageHandler.sendWithPromise("ObjSet.createNumber",{set:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createString=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createString'. Expected 1 argument. Function Signature: createString(string)");
if(value instanceof Promise)throw new TypeError("1st input argument in function 'createString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createString' is of type '"+typeof value+"'. Expected type 'string'. Function Signature: createString(string).");return PDFNet.messageHandler.sendWithPromise("ObjSet.createString",{set:this.id,value:value},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.ObjSet.prototype.createFromJson=function(json){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromJson'. Expected 1 argument. Function Signature: createFromJson(string)");if(json instanceof Promise)throw new TypeError("1st input argument in function 'createFromJson' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof json)throw new TypeError("1st input argument '"+
json+"' in function 'createFromJson' is of type '"+typeof json+"'. Expected type 'string'. Function Signature: createFromJson(string).");return PDFNet.messageHandler.sendWithPromise("ObjSet.createFromJson",{set:this.id,json:json},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createShallowCopy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createShallowCopy'. Expected 0 arguments. Function Signature: createShallowCopy()");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.createShallowCopy",{source:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SDFDoc(id)})};PDFNet.SDFDoc.prototype.releaseFileHandles=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'releaseFileHandles'. Expected 0 arguments. Function Signature: releaseFileHandles()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.releaseFileHandles",{doc:this.id},this.userPriority)};
PDFNet.SDFDoc.prototype.isEncrypted=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isEncrypted'. Expected 0 arguments. Function Signature: isEncrypted()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.isEncrypted",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.initSecurityHandler=function(custom_data){"undefined"===typeof custom_data&&(custom_data=0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initSecurityHandler'. Expected at most 1 arguments. Function Signature: initSecurityHandler(void*)");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.initSecurityHandler",{doc:this.id,custom_data:custom_data},this.userPriority)};PDFNet.SDFDoc.prototype.initStdSecurityHandler=function(password,password_sz){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initStdSecurityHandler'. Expected 2 arguments. Function Signature: initStdSecurityHandler(string, number)");if(password instanceof Promise)throw new TypeError("1st input argument in function 'initStdSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initStdSecurityHandler' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initStdSecurityHandler(string, number).");if(password_sz instanceof Promise)throw new TypeError("2nd input argument in function 'initStdSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof password_sz)throw new TypeError("2nd input argument '"+
password_sz+"' in function 'initStdSecurityHandler' is of type '"+typeof password_sz+"'. Expected type 'number'. Function Signature: initStdSecurityHandler(string, number).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.initStdSecurityHandler",{doc:this.id,password:password,password_sz:password_sz},this.userPriority)};PDFNet.SDFDoc.prototype.initStdSecurityHandlerUString=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initStdSecurityHandlerUString'. Expected 1 argument. Function Signature: initStdSecurityHandlerUString(string)");
if(password instanceof Promise)throw new TypeError("1st input argument in function 'initStdSecurityHandlerUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initStdSecurityHandlerUString' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initStdSecurityHandlerUString(string).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.initStdSecurityHandlerUString",
{doc:this.id,password:password},this.userPriority)};PDFNet.SDFDoc.prototype.isModified=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isModified'. Expected 0 arguments. Function Signature: isModified()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.isModified",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.hasRepairedXRef=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'hasRepairedXRef'. Expected 0 arguments. Function Signature: hasRepairedXRef()");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.hasRepairedXRef",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.isFullSaveRequired=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isFullSaveRequired'. Expected 0 arguments. Function Signature: isFullSaveRequired()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.isFullSaveRequired",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.getTrailer=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getTrailer'. Expected 0 arguments. Function Signature: getTrailer()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getTrailer",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.getObj=function(obj_num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getObj'. Expected 1 argument. Function Signature: getObj(number)");if(obj_num instanceof Promise)throw new TypeError("1st input argument in function 'getObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof obj_num)throw new TypeError("1st input argument '"+obj_num+"' in function 'getObj' is of type '"+typeof obj_num+"'. Expected type 'number'. Function Signature: getObj(number).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getObj",{doc:this.id,obj_num:obj_num},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.importObj=function(obj,deep_copy){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'importObj'. Expected 2 arguments. Function Signature: importObj(Obj, boolean)");
if(obj instanceof Promise)throw new TypeError("1st input argument in function 'importObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(obj instanceof PDFNet.Obj)){if("object"==typeof obj)throw new TypeError("1st input argument in function 'importObj' is of type '"+obj.name+"'. Expected type 'Obj'. Function Signature: importObj(Obj, boolean).");throw new TypeError("1st input argument '"+obj+"' in function 'importObj' is of type '"+typeof obj+"'. Expected type 'Obj'. Function Signature: importObj(Obj, boolean).");
}if(deep_copy instanceof Promise)throw new TypeError("2nd input argument in function 'importObj' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof deep_copy)throw new TypeError("2nd input argument '"+deep_copy+"' in function 'importObj' is of type '"+typeof deep_copy+"'. Expected type 'boolean'. Function Signature: importObj(Obj, boolean).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.importObj",{doc:this.id,obj:obj.id,deep_copy:deep_copy},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.xRefSize=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'xRefSize'. Expected 0 arguments. Function Signature: xRefSize()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.xRefSize",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.clearMarks=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'clearMarks'. Expected 0 arguments. Function Signature: clearMarks()");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.clearMarks",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.saveStream=function(stream,flags,header){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveStream'. Expected 3 arguments. Function Signature: saveStream(Filter, number, string)");if(stream instanceof Promise)throw new TypeError("1st input argument in function 'saveStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(stream instanceof PDFNet.Filter)){if("object"==typeof stream)throw new TypeError("1st input argument in function 'saveStream' is of type '"+stream.name+"'. Expected type 'Filter'. Function Signature: saveStream(Filter, number, string).");throw new TypeError("1st input argument '"+stream+"' in function 'saveStream' is of type '"+typeof stream+"'. Expected type 'Filter'. Function Signature: saveStream(Filter, number, string).");}if(flags instanceof Promise)throw new TypeError("2nd input argument in function 'saveStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof flags)throw new TypeError("2nd input argument '"+flags+"' in function 'saveStream' is of type '"+typeof flags+"'. Expected type 'number'. Function Signature: saveStream(Filter, number, string).");if(header instanceof Promise)throw new TypeError("3rd input argument in function 'saveStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof header)throw new TypeError("3rd input argument '"+header+"' in function 'saveStream' is of type '"+
typeof header+"'. Expected type 'string'. Function Signature: saveStream(Filter, number, string).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.saveStream",{doc:this.id,stream:stream.id,flags:flags,header:header},this.userPriority)};PDFNet.SDFDoc.prototype.getHeader=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHeader'. Expected 0 arguments. Function Signature: getHeader()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getHeader",
{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.getSecurityHandler=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getSecurityHandler'. Expected 0 arguments. Function Signature: getSecurityHandler()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getSecurityHandler",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.SecurityHandler(id)})};PDFNet.SDFDoc.prototype.setSecurityHandler=function(no_own_handler){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setSecurityHandler'. Expected 1 argument. Function Signature: setSecurityHandler(SecurityHandler)");if(no_own_handler instanceof Promise)throw new TypeError("1st input argument in function 'setSecurityHandler' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_handler instanceof PDFNet.SecurityHandler)){if("object"==typeof no_own_handler)throw new TypeError("1st input argument in function 'setSecurityHandler' is of type '"+
no_own_handler.name+"'. Expected type 'SecurityHandler'. Function Signature: setSecurityHandler(SecurityHandler).");throw new TypeError("1st input argument '"+no_own_handler+"' in function 'setSecurityHandler' is of type '"+typeof no_own_handler+"'. Expected type 'SecurityHandler'. Function Signature: setSecurityHandler(SecurityHandler).");}var ownedObjIndex=-1;if(0!=no_own_handler.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_handler.id){ownedObjIndex=i;break}if(-1!=
ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("SDFDoc.setSecurityHandler",{doc:this.id,no_own_handler:no_own_handler.id},this.userPriority)};PDFNet.SDFDoc.prototype.removeSecurity=function(){if(0!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'removeSecurity'. Expected 0 arguments. Function Signature: removeSecurity()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.removeSecurity",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.swap=function(obj_num1,obj_num2){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'swap'. Expected 2 arguments. Function Signature: swap(number, number)");if(obj_num1 instanceof
Promise)throw new TypeError("1st input argument in function 'swap' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof obj_num1)throw new TypeError("1st input argument '"+obj_num1+"' in function 'swap' is of type '"+typeof obj_num1+"'. Expected type 'number'. Function Signature: swap(number, number).");if(obj_num2 instanceof Promise)throw new TypeError("2nd input argument in function 'swap' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof obj_num2)throw new TypeError("2nd input argument '"+obj_num2+"' in function 'swap' is of type '"+typeof obj_num2+"'. Expected type 'number'. Function Signature: swap(number, number).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.swap",{doc:this.id,obj_num1:obj_num1,obj_num2:obj_num2},this.userPriority)};PDFNet.SDFDoc.prototype.isLinearized=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isLinearized'. Expected 0 arguments. Function Signature: isLinearized()");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.isLinearized",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.getLinearizationDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getLinearizationDict'. Expected 0 arguments. Function Signature: getLinearizationDict()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getLinearizationDict",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};
PDFNet.SDFDoc.prototype.getHintStream=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHintStream'. Expected 0 arguments. Function Signature: getHintStream()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getHintStream",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.enableDiskCaching=function(use_cache_flag){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'enableDiskCaching'. Expected 1 argument. Function Signature: enableDiskCaching(boolean)");if(use_cache_flag instanceof Promise)throw new TypeError("1st input argument in function 'enableDiskCaching' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof use_cache_flag)throw new TypeError("1st input argument '"+use_cache_flag+"' in function 'enableDiskCaching' is of type '"+typeof use_cache_flag+"'. Expected type 'boolean'. Function Signature: enableDiskCaching(boolean).");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.enableDiskCaching",{doc:this.id,use_cache_flag:use_cache_flag},this.userPriority)};PDFNet.SDFDoc.prototype.lock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'lock'. Expected 0 arguments. Function Signature: lock()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.lock",{doc:this.id},this.userPriority).then(function(){lockedObjects.push({name:"SDFDoc",id:me.id,unlocktype:"unlock"})})};
PDFNet.SDFDoc.prototype.unlock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'unlock'. Expected 0 arguments. Function Signature: unlock()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.unlock",{doc:this.id},this.userPriority).then(function(){for(var thisIndex=-1,i=lockedObjects.length-1;0<=i;i--)if(lockedObjects[i].id==me.id){thisIndex=i;break}if(-1!=thisIndex)for(lockedObjects.splice(thisIndex,1),i=unlockStackCounter.length-
1;0<=i;i--)if(thisIndex<unlockStackCounter[i])--unlockStackCounter[i];else break;else console.log("[WARNING], the object to be unlocked was not found in the unlock list. Unlocking may cause errors.")})};PDFNet.SDFDoc.prototype.lockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'lockRead'. Expected 0 arguments. Function Signature: lockRead()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.lockRead",{doc:this.id},this.userPriority).then(function(){lockedObjects.push({name:"SDFDoc",
id:me.id,unlocktype:"unlockRead"})})};PDFNet.SDFDoc.prototype.unlockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'unlockRead'. Expected 0 arguments. Function Signature: unlockRead()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.unlockRead",{doc:this.id},this.userPriority).then(function(){for(var thisIndex=-1,i=lockedObjects.length-1;0<=i;i--)if(lockedObjects[i].id==me.id){thisIndex=i;break}if(-1!=thisIndex)for(lockedObjects.splice(thisIndex,
1),i=unlockStackCounter.length-1;0<=i;i--)if(thisIndex<unlockStackCounter[i])--unlockStackCounter[i];else break;else console.log("[WARNING], the object to be unlocked was not found in the unlock list. Unlocking may cause errors.")})};PDFNet.SDFDoc.prototype.tryLock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tryLock'. Expected 0 arguments. Function Signature: tryLock()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.tryLock",
{doc:this.id},this.userPriority).then(function(success){success&&lockedObjects.push({name:"SDFDoc",id:me.id,unlocktype:"unlock"})})};PDFNet.SDFDoc.prototype.tryLockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tryLockRead'. Expected 0 arguments. Function Signature: tryLockRead()");var me=this;return PDFNet.messageHandler.sendWithPromise("SDFDoc.tryLockRead",{doc:this.id},this.userPriority).then(function(success){success&&lockedObjects.push({name:"SDFDoc",
id:me.id,unlocktype:"unlockRead"})})};PDFNet.SDFDoc.prototype.getFileName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFileName'. Expected 0 arguments. Function Signature: getFileName()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.getFileName",{doc:this.id},this.userPriority)};PDFNet.SDFDoc.prototype.createIndirectName=function(name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectName'. Expected 1 argument. Function Signature: createIndirectName(string)");
if(name instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectName' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'createIndirectName' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: createIndirectName(string).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectName",{doc:this.id,name:name},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectArray=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectArray'. Expected 0 arguments. Function Signature: createIndirectArray()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectArray",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectBool=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createIndirectBool'. Expected 1 argument. Function Signature: createIndirectBool(boolean)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectBool' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createIndirectBool' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: createIndirectBool(boolean).");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectBool",{doc:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectDict=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectDict'. Expected 0 arguments. Function Signature: createIndirectDict()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectDict",{doc:this.id},this.userPriority).then(function(id){return"0"==
id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectNull=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectNull'. Expected 0 arguments. Function Signature: createIndirectNull()");return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectNull",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectNumber=function(value){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createIndirectNumber'. Expected 1 argument. Function Signature: createIndirectNumber(number)");if(value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof value)throw new TypeError("1st input argument '"+value+"' in function 'createIndirectNumber' is of type '"+typeof value+"'. Expected type 'number'. Function Signature: createIndirectNumber(number).");
return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectNumber",{doc:this.id,value:value},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectString=function(buf_value){buf_value instanceof Array&&(buf_value=new Float64Array(buf_value));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectString'. Expected 1 argument. Function Signature: createIndirectString(ArrayBuffer)");
if(buf_value instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectString' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf_value.buffer)){if("object"==typeof buf_value)throw new TypeError("1st input argument in function 'createIndirectString' is of type '"+buf_value.name+"'. Expected type 'ArrayBuffer'. Function Signature: createIndirectString(ArrayBuffer).");throw new TypeError("1st input argument '"+
buf_value+"' in function 'createIndirectString' is of type '"+typeof buf_value+"'. Expected type 'ArrayBuffer'. Function Signature: createIndirectString(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectString",{doc:this.id,buf_value:buf_value.buffer},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectStringFromUString=function(str){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStringFromUString'. Expected 1 argument. Function Signature: createIndirectStringFromUString(string)");
if(str instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectStringFromUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof str)throw new TypeError("1st input argument '"+str+"' in function 'createIndirectStringFromUString' is of type '"+typeof str+"'. Expected type 'string'. Function Signature: createIndirectStringFromUString(string).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectStringFromUString",
{doc:this.id,str:str},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectStreamFromFilter=function(data,no_own_filter_chain){"undefined"===typeof no_own_filter_chain&&(no_own_filter_chain=new PDFNet.Filter("0"));if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStreamFromFilter'. Expected 1 to 2 arguments. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter)");
if(data instanceof Promise)throw new TypeError("1st input argument in function 'createIndirectStreamFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(data instanceof PDFNet.FilterReader)){if("object"==typeof data)throw new TypeError("1st input argument in function 'createIndirectStreamFromFilter' is of type '"+data.name+"'. Expected type 'FilterReader'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");throw new TypeError("1st input argument '"+
data+"' in function 'createIndirectStreamFromFilter' is of type '"+typeof data+"'. Expected type 'FilterReader'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");}if(no_own_filter_chain instanceof Promise)throw new TypeError("2nd input argument in function 'createIndirectStreamFromFilter' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter_chain instanceof PDFNet.Filter)){if("object"==typeof no_own_filter_chain)throw new TypeError("2nd input argument in function 'createIndirectStreamFromFilter' is of type '"+
no_own_filter_chain.name+"'. Expected type 'Filter'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");throw new TypeError("2nd input argument '"+no_own_filter_chain+"' in function 'createIndirectStreamFromFilter' is of type '"+typeof no_own_filter_chain+"'. Expected type 'Filter'. Function Signature: createIndirectStreamFromFilter(FilterReader, Filter).");}var ownedObjIndex=-1;if(0!=no_own_filter_chain.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==
no_own_filter_chain.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectStreamFromFilter",{doc:this.id,data:data.id,no_own_filter_chain:no_own_filter_chain.id},
this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SDFDoc.prototype.createIndirectStream=function(data,data_size,no_own_filter_chain){"undefined"===typeof no_own_filter_chain&&(no_own_filter_chain=new PDFNet.Filter("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createIndirectStream'. Expected 2 to 3 arguments. Function Signature: createIndirectStream(string, number, Filter)");if(data instanceof
Promise)throw new TypeError("1st input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof data&&null!==data)throw new TypeError("1st input argument '"+data+"' in function 'createIndirectStream' is of type '"+typeof data+"'. Expected type 'string'. Function Signature: createIndirectStream(string, number, Filter).");if(data_size instanceof Promise)throw new TypeError("2nd input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof data_size)throw new TypeError("2nd input argument '"+data_size+"' in function 'createIndirectStream' is of type '"+typeof data_size+"'. Expected type 'number'. Function Signature: createIndirectStream(string, number, Filter).");if(no_own_filter_chain instanceof Promise)throw new TypeError("3rd input argument in function 'createIndirectStream' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(no_own_filter_chain instanceof PDFNet.Filter)){if("object"==
typeof no_own_filter_chain)throw new TypeError("3rd input argument in function 'createIndirectStream' is of type '"+no_own_filter_chain.name+"'. Expected type 'Filter'. Function Signature: createIndirectStream(string, number, Filter).");throw new TypeError("3rd input argument '"+no_own_filter_chain+"' in function 'createIndirectStream' is of type '"+typeof no_own_filter_chain+"'. Expected type 'Filter'. Function Signature: createIndirectStream(string, number, Filter).");}var ownedObjIndex=-1;if(0!=
no_own_filter_chain.id){for(var i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==no_own_filter_chain.id){ownedObjIndex=i;break}if(-1!=ownedObjIndex)for(createdObjects.splice(ownedObjIndex,1),i=deallocStackCounter.length-1;0<=i;i--)if(deallocStackCounter[i]>ownedObjIndex)--deallocStackCounter[i];else break;else console.log("[WARNING] Object to remove ownership from was not found in memory deallocation list. Decallocating may cause errors.")}return PDFNet.messageHandler.sendWithPromise("SDFDoc.createIndirectStream",
{doc:this.id,data:data,data_size:data_size,no_own_filter_chain:no_own_filter_chain.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SecurityHandler.prototype.clone=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'clone'. Expected 0 arguments. Function Signature: clone()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.clone",{sh:this.id},this.userPriority).then(function(id){if("0"==id)return null;
id=new PDFNet.SecurityHandler(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.SecurityHandler.prototype.destroy=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destroy'. Expected 0 arguments. Function Signature: destroy()");for(var thisIndex=-1,i=createdObjects.length-1;0<=i;i--)if(createdObjects[i].id==this.id){thisIndex=i;break}if(-1!=thisIndex)for(createdObjects.splice(thisIndex,1),i=deallocStackCounter.length-1;0<=
i;i--)if(thisIndex<deallocStackCounter[i])--deallocStackCounter[i];else break;else console.log("[WARNING], the object to be destroyed was not found in the deallocation list. Deallocating may cause errors.");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.destroy",{auto_dealloc_obj:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.initialize=function(doc,encrypt_dict,custom_data){if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initialize'. Expected 2 to 3 arguments. Function Signature: initialize(SDFDoc, Obj, void*)");
if(doc instanceof Promise)throw new TypeError("1st input argument in function 'initialize' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'initialize' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: initialize(SDFDoc, Obj, void*).");throw new TypeError("1st input argument '"+
doc+"' in function 'initialize' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: initialize(SDFDoc, Obj, void*).");}if(encrypt_dict instanceof Promise)throw new TypeError("2nd input argument in function 'initialize' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(encrypt_dict instanceof PDFNet.Obj)){if("object"==typeof encrypt_dict)throw new TypeError("2nd input argument in function 'initialize' is of type '"+encrypt_dict.name+"'. Expected type 'Obj'. Function Signature: initialize(SDFDoc, Obj, void*).");
throw new TypeError("2nd input argument '"+encrypt_dict+"' in function 'initialize' is of type '"+typeof encrypt_dict+"'. Expected type 'Obj'. Function Signature: initialize(SDFDoc, Obj, void*).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.initialize",{sh:this.id,doc:doc.id,encrypt_dict:encrypt_dict.id,custom_data:custom_data},this.userPriority)};PDFNet.SecurityHandler.prototype.getPermission=function(p){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPermission'. Expected 1 argument. Function Signature: getPermission(number)");
if(p instanceof Promise)throw new TypeError("1st input argument in function 'getPermission' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof p)throw new TypeError("1st input argument '"+p+"' in function 'getPermission' is of type '"+typeof p+"'. Expected type 'number'. Function Signature: getPermission(number).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getPermission",{sh:this.id,p:p},this.userPriority)};PDFNet.SecurityHandler.prototype.getKeyLength=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getKeyLength'. Expected 0 arguments. Function Signature: getKeyLength()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getKeyLength",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.getEncryptionAlgorithmID=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getEncryptionAlgorithmID'. Expected 0 arguments. Function Signature: getEncryptionAlgorithmID()");
return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getEncryptionAlgorithmID",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.getHandlerDocName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getHandlerDocName'. Expected 0 arguments. Function Signature: getHandlerDocName()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getHandlerDocName",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.isModified=
function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isModified'. Expected 0 arguments. Function Signature: isModified()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isModified",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.setModified=function(is_modified){"undefined"===typeof is_modified&&(is_modified=!0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setModified'. Expected at most 1 arguments. Function Signature: setModified(boolean)");
if(is_modified instanceof Promise)throw new TypeError("1st input argument in function 'setModified' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof is_modified)throw new TypeError("1st input argument '"+is_modified+"' in function 'setModified' is of type '"+typeof is_modified+"'. Expected type 'boolean'. Function Signature: setModified(boolean).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.setModified",{sh:this.id,is_modified:is_modified},
this.userPriority)};PDFNet.SecurityHandler.create=function(crypt_type){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'create'. Expected 1 argument. Function Signature: create(number)");if(crypt_type instanceof Promise)throw new TypeError("1st input argument in function 'create' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof crypt_type)throw new TypeError("1st input argument '"+crypt_type+"' in function 'create' is of type '"+
typeof crypt_type+"'. Expected type 'number'. Function Signature: create(number).");return PDFNet.messageHandler.sendWithPromise("securityHandlerCreate",{crypt_type:crypt_type},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.SecurityHandler(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.SecurityHandler.createFromEncCode=function(name,key_len,enc_code){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromEncCode'. Expected 3 arguments. Function Signature: createFromEncCode(string, number, number)");
if(name instanceof Promise)throw new TypeError("1st input argument in function 'createFromEncCode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof name)throw new TypeError("1st input argument '"+name+"' in function 'createFromEncCode' is of type '"+typeof name+"'. Expected type 'string'. Function Signature: createFromEncCode(string, number, number).");if(key_len instanceof Promise)throw new TypeError("2nd input argument in function 'createFromEncCode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof key_len)throw new TypeError("2nd input argument '"+key_len+"' in function 'createFromEncCode' is of type '"+typeof key_len+"'. Expected type 'number'. Function Signature: createFromEncCode(string, number, number).");if(enc_code instanceof Promise)throw new TypeError("3rd input argument in function 'createFromEncCode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof enc_code)throw new TypeError("3rd input argument '"+enc_code+
"' in function 'createFromEncCode' is of type '"+typeof enc_code+"'. Expected type 'number'. Function Signature: createFromEncCode(string, number, number).");return PDFNet.messageHandler.sendWithPromise("securityHandlerCreateFromEncCode",{name:name,key_len:key_len,enc_code:enc_code},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.SecurityHandler(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.SecurityHandler.createDefault=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'createDefault'. Expected 0 arguments. Function Signature: createDefault()");return PDFNet.messageHandler.sendWithPromise("securityHandlerCreateDefault",{},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.SecurityHandler(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.SecurityHandler.prototype.setPermission=function(perm,value){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setPermission'. Expected 2 arguments. Function Signature: setPermission(number, boolean)");
if(perm instanceof Promise)throw new TypeError("1st input argument in function 'setPermission' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof perm)throw new TypeError("1st input argument '"+perm+"' in function 'setPermission' is of type '"+typeof perm+"'. Expected type 'number'. Function Signature: setPermission(number, boolean).");if(value instanceof Promise)throw new TypeError("2nd input argument in function 'setPermission' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof value)throw new TypeError("2nd input argument '"+value+"' in function 'setPermission' is of type '"+typeof value+"'. Expected type 'boolean'. Function Signature: setPermission(number, boolean).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.setPermission",{sh:this.id,perm:perm,value:value},this.userPriority)};PDFNet.SecurityHandler.prototype.changeRevisionNumber=function(rev_num){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeRevisionNumber'. Expected 1 argument. Function Signature: changeRevisionNumber(number)");
if(rev_num instanceof Promise)throw new TypeError("1st input argument in function 'changeRevisionNumber' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof rev_num)throw new TypeError("1st input argument '"+rev_num+"' in function 'changeRevisionNumber' is of type '"+typeof rev_num+"'. Expected type 'number'. Function Signature: changeRevisionNumber(number).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeRevisionNumber",{sh:this.id,
rev_num:rev_num},this.userPriority)};PDFNet.SecurityHandler.prototype.setEncryptMetadata=function(encrypt_metadata){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'setEncryptMetadata'. Expected 1 argument. Function Signature: setEncryptMetadata(boolean)");if(encrypt_metadata instanceof Promise)throw new TypeError("1st input argument in function 'setEncryptMetadata' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=
typeof encrypt_metadata)throw new TypeError("1st input argument '"+encrypt_metadata+"' in function 'setEncryptMetadata' is of type '"+typeof encrypt_metadata+"'. Expected type 'boolean'. Function Signature: setEncryptMetadata(boolean).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.setEncryptMetadata",{sh:this.id,encrypt_metadata:encrypt_metadata},this.userPriority)};PDFNet.SecurityHandler.prototype.getRevisionNumber=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getRevisionNumber'. Expected 0 arguments. Function Signature: getRevisionNumber()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getRevisionNumber",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.isUserPasswordRequired=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isUserPasswordRequired'. Expected 0 arguments. Function Signature: isUserPasswordRequired()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isUserPasswordRequired",
{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.isMasterPasswordRequired=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isMasterPasswordRequired'. Expected 0 arguments. Function Signature: isMasterPasswordRequired()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isMasterPasswordRequired",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.isAES=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'isAES'. Expected 0 arguments. Function Signature: isAES()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isAES",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.isAESObj=function(stream){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isAESObj'. Expected 1 argument. Function Signature: isAESObj(Obj)");if(stream instanceof Promise)throw new TypeError("1st input argument in function 'isAESObj' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(stream instanceof PDFNet.Obj)){if("object"==typeof stream)throw new TypeError("1st input argument in function 'isAESObj' is of type '"+stream.name+"'. Expected type 'Obj'. Function Signature: isAESObj(Obj).");throw new TypeError("1st input argument '"+stream+"' in function 'isAESObj' is of type '"+typeof stream+"'. Expected type 'Obj'. Function Signature: isAESObj(Obj).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isAESObj",{sh:this.id,stream:stream.id},this.userPriority)};
PDFNet.SecurityHandler.prototype.isRC4=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'isRC4'. Expected 0 arguments. Function Signature: isRC4()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.isRC4",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.changeUserPasswordUString=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeUserPasswordUString'. Expected 1 argument. Function Signature: changeUserPasswordUString(string)");
if(password instanceof Promise)throw new TypeError("1st input argument in function 'changeUserPasswordUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'changeUserPasswordUString' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: changeUserPasswordUString(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeUserPasswordUString",
{sh:this.id,password:password},this.userPriority)};PDFNet.SecurityHandler.prototype.changeUserPasswordBuffer=function(password_buf){password_buf instanceof Array&&(password_buf=new Float64Array(password_buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeUserPasswordBuffer'. Expected 1 argument. Function Signature: changeUserPasswordBuffer(ArrayBuffer)");if(password_buf instanceof Promise)throw new TypeError("1st input argument in function 'changeUserPasswordBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(password_buf.buffer)){if("object"==typeof password_buf)throw new TypeError("1st input argument in function 'changeUserPasswordBuffer' is of type '"+password_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: changeUserPasswordBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+password_buf+"' in function 'changeUserPasswordBuffer' is of type '"+typeof password_buf+"'. Expected type 'ArrayBuffer'. Function Signature: changeUserPasswordBuffer(ArrayBuffer).");
}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeUserPasswordBuffer",{sh:this.id,password_buf:password_buf.buffer},this.userPriority)};PDFNet.SecurityHandler.prototype.changeMasterPasswordUString=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeMasterPasswordUString'. Expected 1 argument. Function Signature: changeMasterPasswordUString(string)");if(password instanceof Promise)throw new TypeError("1st input argument in function 'changeMasterPasswordUString' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'changeMasterPasswordUString' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: changeMasterPasswordUString(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeMasterPasswordUString",{sh:this.id,password:password},this.userPriority)};PDFNet.SecurityHandler.prototype.changeMasterPasswordBuffer=function(password_buf){password_buf instanceof Array&&(password_buf=
new Float64Array(password_buf));if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeMasterPasswordBuffer'. Expected 1 argument. Function Signature: changeMasterPasswordBuffer(ArrayBuffer)");if(password_buf instanceof Promise)throw new TypeError("1st input argument in function 'changeMasterPasswordBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(password_buf.buffer)){if("object"==typeof password_buf)throw new TypeError("1st input argument in function 'changeMasterPasswordBuffer' is of type '"+
password_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: changeMasterPasswordBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+password_buf+"' in function 'changeMasterPasswordBuffer' is of type '"+typeof password_buf+"'. Expected type 'ArrayBuffer'. Function Signature: changeMasterPasswordBuffer(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeMasterPasswordBuffer",{sh:this.id,password_buf:password_buf.buffer},this.userPriority)};
PDFNet.SecurityHandler.prototype.initPasswordUString=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initPasswordUString'. Expected 1 argument. Function Signature: initPasswordUString(string)");if(password instanceof Promise)throw new TypeError("1st input argument in function 'initPasswordUString' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+
password+"' in function 'initPasswordUString' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initPasswordUString(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.initPasswordUString",{sh:this.id,password:password},this.userPriority)};PDFNet.SecurityHandler.prototype.initPasswordBuffer=function(password_buf){password_buf instanceof Array&&(password_buf=new Float64Array(password_buf));if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'initPasswordBuffer'. Expected 1 argument. Function Signature: initPasswordBuffer(ArrayBuffer)");if(password_buf instanceof Promise)throw new TypeError("1st input argument in function 'initPasswordBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(password_buf.buffer)){if("object"==typeof password_buf)throw new TypeError("1st input argument in function 'initPasswordBuffer' is of type '"+password_buf.name+
"'. Expected type 'ArrayBuffer'. Function Signature: initPasswordBuffer(ArrayBuffer).");throw new TypeError("1st input argument '"+password_buf+"' in function 'initPasswordBuffer' is of type '"+typeof password_buf+"'. Expected type 'ArrayBuffer'. Function Signature: initPasswordBuffer(ArrayBuffer).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.initPasswordBuffer",{sh:this.id,password_buf:password_buf.buffer},this.userPriority)};PDFNet.SecurityHandler.prototype.authorize=function(p){if(1!=
arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'authorize'. Expected 1 argument. Function Signature: authorize(number)");if(p instanceof Promise)throw new TypeError("1st input argument in function 'authorize' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof p)throw new TypeError("1st input argument '"+p+"' in function 'authorize' is of type '"+typeof p+"'. Expected type 'number'. Function Signature: authorize(number).");
return PDFNet.messageHandler.sendWithPromise("SecurityHandler.authorize",{sh:this.id,p:p},this.userPriority)};PDFNet.SecurityHandler.prototype.authorizeFailed=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'authorizeFailed'. Expected 0 arguments. Function Signature: authorizeFailed()");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.authorizeFailed",{sh:this.id},this.userPriority)};PDFNet.SecurityHandler.prototype.getAuthorizationData=
function(req_opr){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAuthorizationData'. Expected 1 argument. Function Signature: getAuthorizationData(number)");if(req_opr instanceof Promise)throw new TypeError("1st input argument in function 'getAuthorizationData' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof req_opr)throw new TypeError("1st input argument '"+req_opr+"' in function 'getAuthorizationData' is of type '"+
typeof req_opr+"'. Expected type 'number'. Function Signature: getAuthorizationData(number).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.getAuthorizationData",{sh:this.id,req_opr:req_opr},this.userPriority)};PDFNet.SecurityHandler.prototype.editSecurityData=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'editSecurityData'. Expected 1 argument. Function Signature: editSecurityData(SDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'editSecurityData' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'editSecurityData' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: editSecurityData(SDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'editSecurityData' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: editSecurityData(SDFDoc).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.editSecurityData",
{sh:this.id,doc:doc.id},this.userPriority)};PDFNet.SecurityHandler.prototype.fillEncryptDict=function(doc){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fillEncryptDict'. Expected 1 argument. Function Signature: fillEncryptDict(SDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'fillEncryptDict' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!(doc instanceof PDFNet.PDFDoc||
doc instanceof PDFNet.SDFDoc||doc instanceof PDFNet.FDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'fillEncryptDict' is of type '"+doc.name+"'. Expected type 'SDFDoc'. Function Signature: fillEncryptDict(SDFDoc).");throw new TypeError("1st input argument '"+doc+"' in function 'fillEncryptDict' is of type '"+typeof doc+"'. Expected type 'SDFDoc'. Function Signature: fillEncryptDict(SDFDoc).");}return PDFNet.messageHandler.sendWithPromise("SecurityHandler.fillEncryptDict",
{sh:this.id,doc:doc.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Obj(id)})};PDFNet.SignatureHandler.prototype.getName=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getName'. Expected 0 arguments. Function Signature: getName()");return PDFNet.messageHandler.sendWithPromise("SignatureHandler.getName",{signature_handler:this.id},this.userPriority)};PDFNet.SignatureHandler.prototype.reset=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'reset'. Expected 0 arguments. Function Signature: reset()");return PDFNet.messageHandler.sendWithPromise("SignatureHandler.reset",{signature_handler:this.id},this.userPriority)};PDFNet.SignatureHandler.prototype.createSignature=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createSignature'. Expected 0 arguments. Function Signature: createSignature()");return PDFNet.messageHandler.sendWithPromise("SignatureHandler.createSignature",
{signature_handler:this.id},this.userPriority)};PDFNet.SignatureHandler.prototype.destructor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'destructor'. Expected 0 arguments. Function Signature: destructor()");return PDFNet.messageHandler.sendWithPromise("SignatureHandler.destructor",{signature_handler:this.id},this.userPriority)};exports.PDFNet=PDFNet})("undefined"===typeof window?this:window);(function(exports){function finishGenerator(iterator){function iterate(val){val=
iterator.next(val);var promise=val.value;return val.done?val.value:promise.then(iterate)}return Promise.resolve().then(iterate)}var getUrlAsBuffer=function(jsUrl,options){options=options||{};var xhr=new XMLHttpRequest;return new Promise(function(resolve,reject){xhr.open("GET",jsUrl,!0);xhr.responseType="arraybuffer";options.withCredentials&&(xhr.withCredentials=options.withCredentials);xhr.onerror=function(){reject(Error("Network error occurred"))};xhr.onload=function(evt){200==this.status?(evt=new Uint8Array(xhr.response),
resolve(evt)):reject(Error("Download Failed"))};var customHeaders=options.customHeaders;if(customHeaders)for(var header in customHeaders)xhr.setRequestHeader(header,customHeaders[header]);xhr.send()},function(){xhr.abort()})};createdObjects=[];lockedObjects=[];stackCallCounter=beginOperationCounter=0;deallocStackCounter=[];unlockStackCounter=[];var finishedInitializeCapability;exports.PDFTron&&PDFTron.WebViewer&&PDFTron.WebViewer.prototype&&PDFTron.WebViewer.prototype.version&&!PDFTron.skipPDFNetWebViewerWarning&&
console.warn("PDFNet.js and WebViewer.js have been included in the same context. See pdftron.com/kb_same_context for an explanation of why this could be an error in your application.");exports.PDFNet.messageHandler={sendWithPromise:function(){throw Error("PDFNet.initialize must be called and finish resolving before any other PDFNetJS function calls.");}};exports.PDFNet.initialize=function(l,pdfBackendType){if(!finishedInitializeCapability){var workerHandlers={pnaclCrashError:function(msg,genericMsg){console.log("PNaClCrashError: "+
msg+", "+genericMsg)},pnaclLoadError:function(msg,genericMsg){console.log("PNaClLoadError: "+msg+", "+genericMsg)},emsWorkerError:function(msg,genericMsg){console.log("EmsWorkerError: "+msg+", "+genericMsg)}},useEmscriptenWhileLoading="pnacl"!==pdfBackendType&&!exports.CoreControls.isSubzeroEnabled();finishedInitializeCapability=createPromiseCapability();var finishInit=function(pdfBackendType){exports.CoreControls.preloadPDFWorker(pdfBackendType,workerHandlers,{useEmscriptenWhileLoading:useEmscriptenWhileLoading,
autoSwap:!1});exports.CoreControls.initPDFWorkerTransports(pdfBackendType,workerHandlers,l).then(function(transport){exports.PDFNet.messageHandler=transport;finishedInitializeCapability.resolve()})};"undefined"!==typeof readerControl&&"undefined"!==typeof readerControl.pdfType&&(pdfBackendType=readerControl.pdfType);pdfBackendType&&"auto"!==pdfBackendType?finishInit(pdfBackendType):CoreControls.getDefaultBackendType().then(finishInit)}return finishedInitializeCapability.promise};PDFNet.userPriority=
2;exports.copyFunc=function(obj,me){for(var attr in obj)me[attr]=obj[attr]};PDFNet.runGeneratorWithoutCleanup=function(generator,license_key){return PDFNet.runWithoutCleanup(function(){return finishGenerator(generator)},license_key)};PDFNet.runGeneratorWithCleanup=function(generator,license_key){return PDFNet.runWithCleanup(function(){return finishGenerator(generator)},license_key)};PDFNet.runWithCleanup=function(callback,license_key){var result;return PDFNet.initialize(license_key).then(function(){return PDFNet.beginOperation()}).then(function(){PDFNet.startDeallocateStack();
return callback()}).then(function(val){result=val;return PDFNet.endDeallocateStack()}).then(function(){PDFNet.finishOperation();if(0<stackCallCounter)throw Error('Detected not yet deallocated stack. You may have called "PDFNet.startDeallocateStack()" somewhere without calling "PDFNet.endDeallocateStack()" afterwards.');return result})};PDFNet.runWithoutCleanup=function(callback,license_key){return PDFNet.initialize(license_key).then(function(){return PDFNet.beginOperation()}).then(function(){return callback()}).then(function(result){PDFNet.finishOperation();
return result})};PDFNet.displayAllocatedObjects=function(){console.log("List of created but not yet deallocated objects:");if(0==createdObjects.length)console.log("~~None~~ (nothing to deallocate)");else for(var i=0;i<createdObjects.length;i++)console.log(createdObjects[i]);return createdObjects.length};PDFNet.getAllocatedObjectsCount=function(){return createdObjects.length};PDFNet.startDeallocateStack=function(){stackCallCounter+=1;deallocStackCounter.push(createdObjects.length);unlockStackCounter.push(lockedObjects.length);
return Promise.resolve()};PDFNet.endDeallocateStack=function(){if(0===stackCallCounter)return console.log("Warning, no startDeallocateStack() instances remain."),Promise.resolve();var deallocStackPos=deallocStackCounter.pop(),unlockStackPos=unlockStackCounter.pop(),promiseList=[],promiseListDestroy=[];var objToDealloc=0;if("undefined"!==typeof unlockStackPos&&0!==lockedObjects.length&&lockedObjects.length!==unlockStackPos)for(;lockedObjects.length>unlockStackPos;){var objToUnlock=lockedObjects.pop();
objToUnlock=PDFNet.messageHandler.sendWithPromise(objToUnlock.name+"."+objToUnlock.unlocktype,{doc:objToUnlock.id},this.userPriority);objToUnlock=objToUnlock.catch(function(e){console.log(e)});promiseList.push(objToUnlock);objToDealloc++}unlockStackPos=0;if("undefined"!==typeof deallocStackPos&&0!==createdObjects.length&&createdObjects.length!==deallocStackPos)for(;createdObjects.length>deallocStackPos;)objToDealloc=createdObjects.pop(),objToDealloc=PDFNet.messageHandler.sendWithPromise(objToDealloc.name+
".destroy",{auto_dealloc_obj:objToDealloc.id},this.userPriority),objToDealloc=objToDealloc.catch(function(e){console.log(e)}),promiseListDestroy.push(objToDealloc),unlockStackPos++;--stackCallCounter;return Promise.all(promiseList).then(function(){return Promise.all(promiseListDestroy)})};PDFNet.getStackCount=function(){return Promise.resolve(stackCallCounter)};PDFNet.deallocateAllObjects=function(){if(0==createdObjects.length){console.log("~~None~~ (nothing to deallocate)");var capability=createPromiseCapability();
capability.resolve();return capability.promise}capability=[];for(deallocStackCounter=[];lockedObjects.length;)objToUnlock=lockedObjects.pop(),unlockPromise=PDFNet.messageHandler.sendWithPromise(objToUnlock.name+"."+objToUnlock.unlocktype,{doc:objToUnlock.id},this.userPriority),unlockPromise=unlockPromise.catch(function(e){console.log(e)}),capability.push(unlockPromise);for(;createdObjects.length;){var objToDealloc=createdObjects.pop();objToDealloc=PDFNet.messageHandler.sendWithPromise(objToDealloc.name+
".destroy",{auto_dealloc_obj:objToDealloc.id},this.userPriority);objToDealloc=objToDealloc.catch(function(e){console.log(e)});capability.push(objToDealloc)}return Promise.all(capability)};PDFNet.Redactor.redact=function(doc,red_arr,appearance,ext_neg_mode,page_coord_sys){"undefined"===typeof appearance&&(appearance={});"undefined"===typeof appearance.redaction_overlay&&(appearance.redaction_overlay=!0);"undefined"===typeof appearance.positive_overlay_color?appearance.positive_overlay_color=void 0:
"undefined"!==typeof appearance.positive_overlay_color.id&&(appearance.positive_overlay_color=appearance.positive_overlay_color.id);"undefined"===typeof appearance.negative_overlay_color?appearance.negative_overlay_color=void 0:"undefined"!==typeof appearance.negative_overlay_color.id&&(appearance.negative_overlay_color=appearance.negative_overlay_color.id);"undefined"===typeof appearance.border&&(appearance.border=!0);"undefined"===typeof appearance.use_overlay_text&&(appearance.use_overlay_text=
!0);"undefined"===typeof appearance.font?appearance.font=void 0:"undefined"!==typeof appearance.font.id&&(appearance.font=appearance.font.id);"undefined"===typeof appearance.min_font_size&&(appearance.min_font_size=2);"undefined"===typeof appearance.max_font_size&&(appearance.max_font_size=24);"undefined"===typeof appearance.text_color?appearance.text_color=void 0:"undefined"!==typeof appearance.text_color.id&&(appearance.text_color=appearance.text_color.id);"undefined"===typeof appearance.horiz_text_alignment&&
(appearance.horiz_text_alignment=-1);"undefined"===typeof appearance.vert_text_alignment&&(appearance.vert_text_alignment=1);"undefined"===typeof appearance.show_redacted_content_regions&&(appearance.show_redacted_content_regions=!1);"undefined"===typeof appearance.redacted_content_color?appearance.redacted_content_color=void 0:"undefined"!==typeof appearance.redacted_content_color.id&&(appearance.redacted_content_color=appearance.redacted_content_color.id);"undefined"===typeof ext_neg_mode&&(ext_neg_mode=
!0);"undefined"===typeof page_coord_sys&&(page_coord_sys=!0);if(2>arguments.length||5<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'redact'. Expected 2 to 5 arguments. Function Signature: redact(PDFDoc, Array of Redaction Objects, RedactionAppearance, boolean=true, boolean=true)");if(doc instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument of function 'redact'. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc||doc instanceof PDFNet.SDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'redact' is of type '"+doc.name+"'. Expected type 'PDFDoc'. Function Signature: redact(PDFDoc, Array of Redaction Objects, RedactionAppearance, boolean=true, boolean=true).");throw new TypeError("1st input argument '"+doc+"' in function 'redact' is of type '"+typeof doc+"'. Expected type 'PDFDoc'. Function Signature: redact(PDFDoc, Array of Redaction Objects, RedactionAppearance, boolean=true, boolean=true).");
}if(red_arr instanceof Promise)throw new TypeError("Received a Promise object in 2nd input argument in function 'redact'. Promises require a 'yield' statement before being accessed.");if(!(red_arr instanceof Array)){if("object"==typeof red_arr)throw new TypeError("2nd input argument in function 'redact' is of type '"+red_arr.name+"'. Expected an array of 'Redaction' objects. Function Signature: redact(PDFDoc, Array of Redaction Objects, number, RedactionAppearance, boolean, boolean).");throw new TypeError("2nd input argument '"+
red_arr+"' in function 'redact' is of type '"+typeof red_arr+"'. Expected type 'Redaction'. Function Signature: redact(PDFDoc, Redaction, number, RedactionAppearance, boolean, boolean).");}if(appearance instanceof Promise)throw new TypeError("Received a Promise object in 3rd input argument in function 'redact'. Promises require a 'yield' statement before being accessed.");if("object"!==typeof appearance)throw new TypeError("3nd input argument in function 'redact' is of type '"+appearance.name+"'. Expected a RedactionAppearance (javascript) object. Function Signature: redact(PDFDoc, Array of Redaction Objects, number, RedactionAppearance, boolean, boolean).");
if(ext_neg_mode instanceof Promise)throw new TypeError("Received a Promise object in 4th input argument in function 'redact'. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof ext_neg_mode)throw new TypeError("4th input argument '"+ext_neg_mode+"' in function 'redact' is of type '"+typeof ext_neg_mode+"'. Expected type 'boolean'. Function Signature: redact(PDFDoc, Array of Redaction Objects, RedactionAppearance, boolean=true, boolean=true).");if(page_coord_sys instanceof
Promise)throw new TypeError("Received a Promise object in 5th input argument in function 'redact'. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof page_coord_sys)throw new TypeError("5th input argument '"+page_coord_sys+"' in function 'redact' is of type '"+typeof page_coord_sys+"'. Expected type 'boolean'. Function Signature: redact(PDFDoc, Array of Redaction Objects, RedactionAppearance, boolean=true, boolean=true).");return PDFNet.messageHandler.sendWithPromise("redactorRedact",
{doc:doc.id,red_arr:red_arr,appearance:appearance,ext_neg_mode:ext_neg_mode,page_coord_sys:page_coord_sys},this.userPriority)};PDFNet.Highlights.prototype.getCurrentQuads=function(){return PDFNet.messageHandler.sendWithPromise("Highlights.getCurrentQuads",{hlts:this.id},this.userPriority).then(function(id){id=new Float64Array(id);for(var retArray=[],currQuad,i=0;i<id.length;i+=8)currQuad=PDFNet.QuadPoint(id[i+0],id[i+1],id[i+2],id[i+3],id[i+4],id[i+5],id[i+6],id[i+7]),retArray.push(currQuad);return retArray})};
PDFNet.TextSearch.prototype.run=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'run'. Expected 0 arguments. Function Signature: run()");return PDFNet.messageHandler.sendWithPromise("TextSearch.run",{ts:this.id},this.userPriority).then(function(searchObj){searchObj.highlights=new PDFNet.Highlights(searchObj.highlights);if("0"==searchObj.highlights.id)return searchObj;createdObjects.push({name:searchObj.highlights.name,id:searchObj.highlights.id});
return searchObj})};PDFNet.Iterator.prototype.current=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'fillEncryptDict'. Expected 0 argument.");var me=this;this.yieldFunction="Iterator.current";var promise=PDFNet.messageHandler.sendWithPromise("Iterator.current",{itr:this.id,type:this.type},this.userPriority);me.yieldFunction=void 0;"Int"!=this.type&&(promise=promise.then(function(id){return new PDFNet[me.type](id)}));return promise};PDFNet.PDFDoc.prototype.requirePage=
function(page_number){if(1!==arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'requirePage'. Expected 1 argument. Function Signature: requirePage(number)");if(page_number instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'requirePage'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_number)throw new TypeError("1st input argument '"+page_number+"' in function 'requirePage' is of type '"+
typeof page_number+"'. Expected type 'number'. Function Signature: requirePage(number).");if(0>=page_number)throw Error("1st input argument '"+page_number+"' in function 'requirePage' is invalid. Expected number between 1 and number of pages in the document.");return PDFNet.messageHandler.sendWithPromise("PDFDoc.RequirePage",{docId:this.id,pageNum:page_number},this.userPriority)};PDFNet.PDFDoc.prototype.getPageIterator=function(page_number){"undefined"===typeof page_number&&(page_number=1);if(1<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getPageIterator'. Expected at most 1 argument. Function Signature: getPageIterator(number)");if(page_number instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'getPageIterator'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof page_number)throw new TypeError("1st input argument '"+page_number+"' in function 'getPageIterator' is of type '"+typeof page_number+"'. Expected type 'number'. Function Signature: getPageIterator(number).");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getPageIterator",{doc:this.id,page_number:page_number},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id,"Page");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getFieldIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIteratorBegin'. Expected 0 arguments. Function Signature: getFieldIteratorBegin()");
return PDFNet.messageHandler.sendWithPromise("PDFDoc.getFieldIteratorBegin",{doc:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id,"Field");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getFieldIterator=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIterator'. Expected 1 argument. Function Signature: getFieldIterator(string)");if(field_name instanceof
Promise)throw new TypeError("Received a Promise object in 1st input argument 'getFieldIterator'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+url+"' in function 'getFieldIterator' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: getFieldIterator(string).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.getFieldIterator",{doc:this.id,field_name:field_name},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.Iterator(id,"Field");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.PDFDoc.prototype.getFileData=function(callback){callback({type:"id",id:this.id})};PDFNet.PDFDoc.prototype.getFile=function(callback){return null};PDFNet.FDFDoc.prototype.getFieldIteratorBegin=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIteratorBegin'. Expected 0 arguments. Function Signature: getFieldIteratorBegin()");
return PDFNet.messageHandler.sendWithPromise("FDFDoc.getFieldIteratorBegin",{doc:this.id},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Iterator(id,"Field");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.FDFDoc.prototype.getFieldIterator=function(field_name){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getFieldIterator'. Expected 1 argument. Function Signature: getFieldIterator(string)");if(field_name instanceof
Promise)throw new TypeError("Received a Promise object in 1st input argument 'getFieldIterator'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof field_name)throw new TypeError("1st input argument '"+url+"' in function 'getFieldIterator' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: getFieldIterator(string).");return PDFNet.messageHandler.sendWithPromise("FDFDoc.getFieldIterator",{doc:this.id,field_name:field_name},this.userPriority).then(function(id){if("0"==
id)return null;id=new PDFNet.Iterator(id,"Field");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.ElementReader.prototype.getChangesIterator=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getChangesIterator'. Expected 0 arguments. Function Signature: getChangesIterator()");return PDFNet.messageHandler.sendWithPromise("ElementReader.getChangesIterator",{r:this.id},this.userPriority).then(function(id){if("0"==id)return null;
id=new PDFNet.Iterator(id,"Int");createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.beginOperation=function(optionsObj){"undefined"===typeof optionsObj?optionsObj={allowMultipleInstances:!1}:"undefined"===typeof optionsObj.allowMultipleInstances&&console.log("Warning: passing in options object without value 'allowMultipleInstances'");if(0<beginOperationCounter&&!optionsObj.allowMultipleInstances)throw Error("a previous instance of PDFNet.beginOperation() has been called without being terminated by PDFNet.finishOperation(). If this is intentional, pass in an options object with its parameter 'allowMultipleInstances' set to 'true' (ex. optObj={}; optObj.allowMultipleInstances=true; PDFNet.beginOperation(optObj));");
beginOperationCounter+=1;if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'beginOperation'. Expected 0 to 1 arguments. Function Signature: beginOperation(optObj = {})");return PDFNet.messageHandler.sendWithPromise("BeginOperation",{},this.userPriority)};PDFNet.finishOperation=function(){if(0<beginOperationCounter){--beginOperationCounter;if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'finishOperation'. Expected 0 arguments. Function Signature: finishOperation()");
return PDFNet.messageHandler.sendWithPromise("FinishOperation",{},this.userPriority)}};PDFNet.PDFDoc.createFromURL=function(url,options){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromURL'. Expected 1 argument. Function Signature: createFromURL(string)");if(url instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'createFromURL'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof url)throw new TypeError("1st input argument '"+
url+"' in function 'createFromURL' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: createFromURL(string).");return getUrlAsBuffer(url,options).then(function(data){return PDFNet.PDFDoc.createFromBuffer(data)})};PDFNet.PDFDraw.prototype.exportStream=function(page,format,encoder_params){"undefined"==typeof format&&(format="PNG");"undefined"==typeof encoder_params&&(encoder_params=new PDFNet.Obj("0"));if(1>arguments.length||3<arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'exportStream'. Expected 1 to 3 arguments. Function Signature: exportStream(Page, string, Obj)");if(page instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'exportStream'. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'exportStream' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: exportStream(Page, string, Obj).");
throw new TypeError("1st input argument '"+page+"' in function 'exportStream' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: exportStream(Page, string, Obj).");}if(format instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'exportStream'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof format)throw new TypeError("2nd input argument '"+format+"' in function 'exportStream' is of type '"+typeof format+"'. Expected type 'string'. Function Signature: exportStream(Page, string, Obj).");
if(encoder_params instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'exportStream'. Promises require a 'yield' statement before being accessed.");if(!(encoder_params instanceof PDFNet.Obj)){if("object"==typeof encoder_params)throw new TypeError("3rd input argument in function 'exportStream' is of type '"+encoder_params.name+"'. Expected type 'Obj'. Function Signature: exportStream(Page, string, Obj).");throw new TypeError("3rd input argument '"+encoder_params+
"' in function 'exportStream' is of type '"+typeof encoder_params+"'. Expected type 'Obj'. Function Signature: exportStream(Page, string, Obj).");}return PDFNet.messageHandler.sendWithPromise("PDFDraw.exportStream",{d:this.id,page:page.id,format:format,encoder_params:encoder_params.id},this.userPriority).then(function(id){return"0"==id?null:new Uint8Array(id)})};PDFNet.Element.prototype.getTextData=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getTextData'. Expected 0 arguments. Function Signature: getTextData()");
return PDFNet.messageHandler.sendWithPromise("Element.getTextData",{e:this.id},this.userPriority)};PDFNet.Element.prototype.getPathData=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getPathData'. Expected 0 arguments. Function Signature: getPathData()");return PDFNet.messageHandler.sendWithPromise("Element.getPathData",{e:this.id},this.userPriority).then(function(id){id.operators=new Uint8Array(id.operators);id.points=new Float64Array(id.points);
return id})};PDFNet.PDFDoc.prototype.convertToXod=function(optionsObj){"undefined"===typeof optionsObj&&(optionsObj={});return PDFNet.messageHandler.sendWithPromise("PDFDoc.convertToXod",{doc:this.id,optionsObject:optionsObj},this.userPriority).then(function(id){return"0"==id?null:new Uint8Array(id)})};PDFNet.PDFDoc.prototype.convertToXodStream=function(optionsObj){"undefined"===typeof optionsObj&&(optionsObj={});return PDFNet.messageHandler.sendWithPromise("PDFDoc.convertToXodStream",{doc:this.id,
optionsObject:optionsObj},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Filter(id)})};PDFNet.FilterReader.prototype.read=function(buf_size){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'read'. Expected 1 argument. Function Signature: read(number).");if(buf_size instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'read'. Promises require a 'yield' statement before being accessed.");if("number"!=
typeof buf_size)throw new TypeError("1st input argument '"+buf_size+"' in function 'read' is of type '"+typeof buf_size+"'. Expected type 'number'. Function Signature: read(number).");return PDFNet.messageHandler.sendWithPromise("FilterReader.read",{reader:this.id,buf_size:buf_size},this.userPriority).then(function(id){return"0"==id?null:new Uint8Array(id)})};PDFNet.bitmapInfo=function(id){copyFunc(id,this)};PDFNet.PDFDraw.prototype.getBitmap=function(page,pix_fmt,demult){if(3!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getBitmap'. Expected 3 arguments. Function Signature: getBitmap(Page, PixelFormat, boolean).");if(page instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'getBitmap'. Promises require a 'yield' statement before being accessed.");if(!(page instanceof PDFNet.Page)){if("object"==typeof page)throw new TypeError("1st input argument in function 'getBitmap' is of type '"+page.name+"'. Expected type 'Page'. Function Signature: getBitmap(Page, PixelFormat, boolean).");
throw new TypeError("1st input argument '"+page+"' in function 'getBitmap' is of type '"+typeof page+"'. Expected type 'Page'. Function Signature: getBitmap(Page, PixelFormat, boolean).");}if(pix_fmt instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'getBitmap'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof pix_fmt)throw new TypeError("2nd input argument '"+pix_fmt+"' in function 'getBitmap' is of type '"+typeof pix_fmt+"'. Expected type 'number'. Function Signature: getBitmap(Page, PixelFormat, boolean).");
if(demult instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'getBitmap'. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof demult)throw new TypeError("3rd input argument '"+demult+"' in function 'getBitmap' is of type '"+typeof demult+"'. Expected type 'boolean'. Function Signature: getBitmap(Page, PixelFormat, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDraw.getBitmap",{d:this.id,page:page.id,pix_fmt:pix_fmt,
demult:demult},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.bitmapInfo(id)})};PDFNet.Matrix2D.create=function(a,b,c,d,h,v){void 0==a&&(a=0);void 0==b&&(b=0);void 0==c&&(c=0);void 0==d&&(d=0);void 0==h&&(h=0);void 0==v&&(v=0);if(6<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'Matrix2D.create'. Expected 6 or fewer arguments. Function Signature: create(number, number, number, number, number, number).");if(a instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof a)throw new TypeError("1st input argument '"+a+"' in function 'Matrix2D.create' is of type '"+typeof a+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");if(b instanceof Promise)throw new TypeError("Received a Promise object in 2nd input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof b)throw new TypeError("2nd input argument '"+b+"' in function 'Matrix2D.create' is of type '"+
typeof b+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");if(c instanceof Promise)throw new TypeError("Received a Promise object in 3rd input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof c)throw new TypeError("3rd input argument '"+c+"' in function 'Matrix2D.create' is of type '"+typeof c+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");
if(d instanceof Promise)throw new TypeError("Received a Promise object in 4th input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof d)throw new TypeError("4th input argument '"+d+"' in function 'Matrix2D.create' is of type '"+typeof d+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");if(h instanceof Promise)throw new TypeError("Received a Promise object in 5th input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof h)throw new TypeError("5th input argument '"+h+"' in function 'Matrix2D.create' is of type '"+typeof h+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");if(v instanceof Promise)throw new TypeError("Received a Promise object in 6th input argument 'Matrix2D.create'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof v)throw new TypeError("6th input argument '"+v+"' in function 'Matrix2D.create' is of type '"+
typeof v+"'. Expected type 'number'. Function Signature: create(number, number, number, number, number, number).");var capability=createPromiseCapability(),matrix=new PDFNet.Matrix2D({m_a:a,m_b:b,m_c:c,m_d:d,m_h:h,m_v:v});capability.resolve(matrix);return capability.promise};PDFNet.PDFDoc.prototype.getPDFDoc=function(){console.log("In PDFNetUser.js getPDFDoc");return PDFNet.messageHandler.sendWithPromise("GetPDFDoc",{doc:this.id},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.PDFDoc(id)})};
PDFNet.TextExtractorLine.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getBBox'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction=
"TextExtractorLine.getBBox";return PDFNet.messageHandler.sendWithPromise("TextExtractorLine.getBBox",{line:this},this.userPriority).then(function(id){me.yieldFunction=void 0;return new PDFNet.Rect(id.result.x1,id.result.y1,id.result.x2,id.result.y2,id.result.mp_rect)})};PDFNet.TextExtractorWord.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");if("undefined"!==
typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getBBox'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getBBox";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getBBox",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;return new PDFNet.Rect(id.result.x1,id.result.y1,id.result.x2,
id.result.y2,id.result.mp_rect)})};PDFNet.TextExtractorWord.prototype.getQuad=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getQuad'. Expected 0 arguments. Function Signature: getQuad()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getQuad'. Perhaps a yield statement is required for "+this.yieldFunction+
"?");var me=this;this.yieldFunction="TextExtractorWord.getQuad";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getQuad",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;return new PDFNet.QuadPoint(id.result.p1x,id.result.p1y,id.result.p2x,id.result.p2y,id.result.p3x,id.result.p3y,id.result.p4x,id.result.p4y)})};PDFNet.TextExtractorWord.prototype.getGlyphQuad=function(glyph_idx){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getGlyphQuad'. Expected 1 argument. Function Signature: getGlyphQuad(number)");
if(glyph_idx instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'getGlyphQuad'. Promises require a 'yield' statement before being accessed.");if("number"!=typeof glyph_idx)throw new TypeError("1st input argument '"+glyph_idx+"' in function 'getGlyphQuad' is of type '"+typeof glyph_idx+"'. Expected type 'number'. Function Signature: getGlyphQuad(number).");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getGlyphQuad'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getGlyphQuad";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getGlyphQuad",{tew:this,glyph_idx:glyph_idx},this.userPriority).then(function(id){me.yieldFunction=void 0;return new PDFNet.QuadPoint(id.result.p1x,id.result.p1y,id.result.p2x,id.result.p2y,id.result.p3x,id.result.p3y,id.result.p4x,id.result.p4y)})};PDFNet.TextExtractorStyle.prototype.getColor=function(){if(0!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'getColor'. Expected 0 arguments. Function Signature: getColor()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getColor'. Perhaps a yield statement is required for "+this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorStyle.getColor";return PDFNet.messageHandler.sendWithPromise("TextExtractorStyle.getColor",
{tes:this},this.userPriority).then(function(id){me.yieldFunction=void 0;return"0"==id?null:new PDFNet.ColorPt(id)})};PDFNet.TextExtractorWord.prototype.getString=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getString'. Expected 0 arguments. Function Signature: getString()");if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'getString'. Perhaps a yield statement is required for "+
this.yieldFunction+"?");var me=this;this.yieldFunction="TextExtractorWord.getString";return PDFNet.messageHandler.sendWithPromise("TextExtractorWord.getString",{tew:this},this.userPriority).then(function(id){me.yieldFunction=void 0;return id})};PDFNet.SecurityHandler.prototype.changeUserPasswordNonAscii=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeUserPasswordNonAscii'. Expected 1 argument. Function Signature: changeUserPasswordNonAscii(string)");
if(password instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'changeUserPasswordNonAscii'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'changeUserPasswordNonAscii' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: changeUserPasswordNonAscii(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeUserPasswordNonAscii",
{sh:this.id,password:password,pwd_length:password.length},this.userPriority)};PDFNet.SecurityHandler.prototype.changeMasterPasswordNonAscii=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'changeMasterPasswordNonAscii'. Expected 1 argument. Function Signature: changeMasterPasswordNonAscii(string)");if(password instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'changeMasterPasswordNonAscii'. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'changeMasterPasswordNonAscii' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: changeMasterPasswordNonAscii(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.changeMasterPasswordNonAscii",{sh:this.id,password:password,pwd_length:password.length},this.userPriority)};PDFNet.SecurityHandler.prototype.initPassword=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+
" arguments passed into function 'initPassword'. Expected 1 argument. Function Signature: initPassword(string)");if(password instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'initPassword'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initPassword' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initPassword(string).");
return PDFNet.messageHandler.sendWithPromise("SecurityHandler.initPassword",{sh:this.id,password:password},this.userPriority)};PDFNet.SecurityHandler.prototype.initPasswordNonAscii=function(password){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initPasswordNonAscii'. Expected 1 argument. Function Signature: initPasswordNonAscii(string)");if(password instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'initPasswordNonAscii'. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof password)throw new TypeError("1st input argument '"+password+"' in function 'initPasswordNonAscii' is of type '"+typeof password+"'. Expected type 'string'. Function Signature: initPasswordNonAscii(string).");return PDFNet.messageHandler.sendWithPromise("SecurityHandler.initPasswordNonAscii",{sh:this.id,password:password,pwd_length:password.length},this.userPriority)};PDFNet.Element.prototype.getBBox=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getBBox'. Expected 0 arguments. Function Signature: getBBox()");
var me=this;this.yieldFunction="Element.getBBox";return PDFNet.messageHandler.sendWithPromise("Element.getBBox",{e:this.id},this.userPriority).then(function(id){me.yieldFunction=void 0;return new PDFNet.Rect(id)})};PDFNet.Matrix2D.prototype.mult=function(x,y){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'mult'. Expected 2 arguments. Function Signature: mult(number, number)");if(x instanceof Promise)throw new TypeError("1st input argument in function 'mult' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof x)throw new TypeError("1st input argument '"+x+"' in function 'mult' is of type '"+typeof x+"'. Expected type 'number'. Function Signature: mult(number, number).");if(y instanceof Promise)throw new TypeError("2nd input argument in function 'mult' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof y)throw new TypeError("2nd input argument '"+y+"' in function 'mult' is of type '"+typeof y+"'. Expected type 'number'. Function Signature: mult(number, number).");
if("undefined"!==typeof this.yieldFunction)throw Error("Function "+this.yieldFunction+" recently altered a struct object without yielding. That object is now being accessed by function 'mult'. Perhaps a yield statement is required for "+this.yieldFunction+"?");return PDFNet.messageHandler.sendWithPromise("Matrix2D.mult",{matrix:this,x:x,y:y},this.userPriority)};PDFNet.Obj.prototype.getAsPDFText=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'getAsPDFText'. Expected 0 arguments. Function Signature: getAsPDFText()");
return PDFNet.messageHandler.sendWithPromise("Obj.getAsPDFText",{o:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.initSecurityHandler=function(custom_data){"undefined"===typeof custom_data&&(custom_data=0);if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'initSecurityHandler'. Expected at most 1 arguments. Function Signature: initSecurityHandler(void*)");return PDFNet.messageHandler.sendWithPromise("PDFDoc.initSecurityHandler",{doc:this.id,custom_data:custom_data},
this.userPriority)};PDFNet.Image.createFromURL=function(doc,url,encoder_hints,options){"undefined"===typeof encoder_hints&&(encoder_hints=new PDFNet.Obj("0"));if(2>arguments.length||3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromURL'. Expected 2 to 3 arguments. Function Signature: createFromURL(PDFDoc, string, Obj)");if(doc instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'createFromURL'. Promises require a 'yield' statement before being accessed.");
if(!(doc instanceof PDFNet.PDFDoc)){if("object"==typeof doc)throw new TypeError("1st input argument in function 'createFromURL' is of type '"+doc.name+"'. Expected type 'Page'. Function Signature: createFromURL(PDFDoc, string, Obj).");throw new TypeError("1st input argument '"+doc+"' in function 'createFromURL' is of type '"+typeof doc+"'. Expected type 'Page'. Function Signature: createFromURL(PDFDoc, string, Obj).");}if(url instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'createFromURL'. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof url)throw new TypeError("2nd input argument '"+url+"' in function 'createFromURL' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: createFromURL(PDFDoc, string, Obj).");if(encoder_hints instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'createFromURL'. Promises require a 'yield' statement before being accessed.");if(!(encoder_hints instanceof PDFNet.Obj)){if("object"==typeof encoder_hints)throw new TypeError("3rd input argument in function 'createFromURL' is of type '"+
encoder_hints.name+"'. Expected type 'Obj'. Function Signature: createFromURL(PDFDoc, string, Obj).");throw new TypeError("3rd input argument '"+encoder_hints+"' in function 'createFromURL' is of type '"+typeof encoder_hints+"'. Expected type 'Obj'. Function Signature: createFromURL(PDFDoc, string, Obj).");}var capability=createPromiseCapability();(new exports.CoreControls.PartRetrievers.ExternalPdfPartRetriever(url,options)).getFileData(function(data){PDFNet.Image.createFromMemory2(doc,data,encoder_hints).then(function(img){capability.resolve(img)})});
return capability.promise};PDFNet.PDFDoc.prototype.addStdSignatureHandlerFromURL=function(pkcs12_file,pkcs12_pass){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addStdSignatureHandlerFromURL'. Expected 2 arguments. Function Signature: addStdSignatureHandlerFromURL(string, string)");if(pkcs12_file instanceof Promise)throw new TypeError("1st input argument in function 'addStdSignatureHandlerFromURL' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof pkcs12_file)throw new TypeError("1st input argument '"+pkcs12_file+"' in function 'addStdSignatureHandlerFromURL' is of type '"+typeof pkcs12_file+"'. Expected type 'string'. Function Signature: addStdSignatureHandlerFromURL(string, string).");if(pkcs12_pass instanceof Promise)throw new TypeError("2nd input argument in function 'addStdSignatureHandlerFromURL' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof pkcs12_pass)throw new TypeError("2nd input argument '"+
pkcs12_pass+"' in function 'addStdSignatureHandlerFromURL' is of type '"+typeof pkcs12_pass+"'. Expected type 'string'. Function Signature: addStdSignatureHandlerFromURL(string, string).");var capability=createPromiseCapability(),me=this;(new exports.CoreControls.PartRetrievers.ExternalPdfPartRetriever(pkcs12_file)).getFileData(function(pkcs12_buffer){me.addStdSignatureHandlerFromBufferWithDoc(pkcs12_buffer,pkcs12_pass,me).then(function(sigHandler){capability.resolve(sigHandler)})});return capability.promise};
PDFNet.PDFDoc.prototype.addStdSignatureHandlerFromBufferWithDoc=function(pkcs12_buffer,pkcs12_pass,doc){if(3!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'addStdSignatureHandlerFromBuffer'. Expected 3 arguments. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string, PDFDoc)");if(doc instanceof Promise)throw new TypeError("1st input argument in function 'addStdSignatureHandlerFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(pkcs12_buffer instanceof Promise)throw new TypeError("2nd input argument in function 'addStdSignatureHandlerFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(pkcs12_buffer.buffer)){if("object"==typeof pkcs12_buffer)throw new TypeError("2nd input argument in function 'addStdSignatureHandlerFromBuffer' is of type '"+pkcs12_buffer.name+"'. Expected type 'ArrayBuffer'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string, PDFDoc).");
throw new TypeError("2nd input argument '"+pkcs12_buffer+"' in function 'addStdSignatureHandlerFromBuffer' is of type '"+typeof pkcs12_buffer+"'. Expected type 'ArrayBuffer'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string, PDFDoc).");}if(pkcs12_pass instanceof Promise)throw new TypeError("3rd input argument in function 'addStdSignatureHandlerFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof pkcs12_pass)throw new TypeError("3rd input argument '"+
pkcs12_pass+"' in function 'addStdSignatureHandlerFromBuffer' is of type '"+typeof pkcs12_pass+"'. Expected type 'string'. Function Signature: addStdSignatureHandlerFromBuffer(ArrayBuffer, string, PDFDoc).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.addStdSignatureHandlerFromBuffer",{doc:doc.id,pkcs12_buffer:pkcs12_buffer.buffer,pkcs12_pass:pkcs12_pass},this.userPriority)};PDFNet.Filter.createFromMemory=function(buf){return PDFNet.messageHandler.sendWithPromise("filterCreateFromMemory",
{buf:buf.buffer},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,id:id.id});return id})};PDFNet.Filter.createURLFilter=function(filename){if(1!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createURLFilter'. Expected 1 argument. Function Signature: createURLFilter(string)");if("string"!=typeof filename)throw new TypeError("1st input argument '"+filename+"' in function 'createURLFilter' is of type '"+
typeof filename+"'. Expected type 'string'. Function Signature: createURLFilter(string).");var capability=createPromiseCapability();(new exports.CoreControls.PartRetrievers.ExternalPdfPartRetriever(filename)).getFileData(function(data){PDFNet.Filter.createFromMemory(data).then(function(filter){capability.resolve(filter)})});return capability.promise};PDFNet.Filter.createFlateEncode=function(input_filter,compression_level,buf_sz){"undefined"===typeof input_filter&&(input_filter=new PDFNet.Filter("0"));
"undefined"===typeof compression_level&&(compression_level=-1);"undefined"===typeof buf_sz&&(buf_sz=256);if(3<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFlateEncode'. Expected at most 3 arguments. Function Signature: createFlateEncode(Filter, number, number)");if(input_filter instanceof Promise)throw new TypeError("1st input argument in function 'createFlateEncode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!(input_filter instanceof PDFNet.Filter)){if("object"==typeof input_filter)throw new TypeError("1st input argument in function 'createFlateEncode' is of type '"+input_filter.name+"'. Expected type 'Filter'. Function Signature: createFlateEncode(Filter, number, number).");throw new TypeError("1st input argument '"+input_filter+"' in function 'createFlateEncode' is of type '"+typeof input_filter+"'. Expected type 'Filter'. Function Signature: createFlateEncode(Filter, number, number).");}if(compression_level instanceof
Promise)throw new TypeError("2nd input argument in function 'createFlateEncode' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof compression_level)throw new TypeError("2nd input argument '"+compression_level+"' in function 'createFlateEncode' is of type '"+typeof compression_level+"'. Expected type 'number'. Function Signature: createFlateEncode(Filter, number, number).");if(buf_sz instanceof Promise)throw new TypeError("3rd input argument in function 'createFlateEncode' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof buf_sz)throw new TypeError("3rd input argument '"+buf_sz+"' in function 'createFlateEncode' is of type '"+typeof buf_sz+"'. Expected type 'number'. Function Signature: createFlateEncode(Filter, number, number).");return PDFNet.messageHandler.sendWithPromise("Filter.createFlateEncode",{input_filter:input_filter.id,compression_level:compression_level,buf_sz:buf_sz},this.userPriority).then(function(id){if("0"==id)return null;id=new PDFNet.Filter(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.PDFDoc.prototype.importPages=function(page_buf,import_bookmarks){"undefined"===typeof page_buf&&(page_buf=new PDFNet.Page("false"));if(1>arguments.length||2<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'importPages'. Expected 1 to 2 arguments. Function Signature: importPages(ArrayBuffer, boolean)");if(page_buf instanceof Promise)throw new TypeError("1st input argument in function 'importPages' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(!exports.isArrayBuffer(page_buf.buffer)){if("object"==typeof page_buf)throw new TypeError("1st input argument in function 'importPages' is of type '"+page_buf.name+"'. Expected type 'ArrayBuffer'. Function Signature: importPages(ArrayBuffer, boolean).");throw new TypeError("1st input argument '"+page_buf+"' in function 'importPages' is of type '"+typeof page_buf+"'. Expected type 'ArrayBuffer'. Function Signature: importPages(ArrayBuffer, boolean).");}if(import_bookmarks instanceof Promise)throw new TypeError("3rd input argument in function 'importPages' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof import_bookmarks)throw new TypeError("3rd input argument '"+import_bookmarks+"' in function 'importPages' is of type '"+typeof import_bookmarks+"'. Expected type 'boolean'. Function Signature: importPages(ArrayBuffer, boolean).");return PDFNet.messageHandler.sendWithPromise("PDFDoc.importPages",{doc:this.id,page_buf:page_buf.buffer,import_bookmarks:import_bookmarks},this.userPriority).then(function(id){return"0"==id?null:new PDFNet.Page(id)})};PDFNet.SDFDoc.prototype.saveMemory=
function(flags,header){if(2!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'saveMemory'. Expected 2 arguments. Function Signature: saveMemory(number, string)");if(flags instanceof Promise)throw new TypeError("1st input argument in function 'saveMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof flags)throw new TypeError("1st input argument '"+flags+"' in function 'saveMemory' is of type '"+typeof flags+
"'. Expected type 'number'. Function Signature: saveMemory(number, string).");if(header instanceof Promise)throw new TypeError("2nd input argument in function 'saveMemory' is a Promise object. Promises require a 'yield' statement before being accessed.");if("string"!=typeof header)throw new TypeError("2nd input argument '"+header+"' in function 'saveMemory' is of type '"+typeof header+"'. Expected type 'string'. Function Signature: saveMemory(number, string).");return PDFNet.messageHandler.sendWithPromise("SDFDoc.saveMemory",
{doc:this.id,flags:flags,header:header},this.userPriority).then(function(id){return new Uint8Array(id)})};var origSaveMemoryBuffer=PDFNet.PDFDoc.prototype.saveMemoryBuffer,origSaveStream=PDFNet.PDFDoc.prototype.saveStream;PDFNet.PDFDoc.prototype.saveMemoryBuffer=function(flags){var me=this;return Promise.resolve(me.documentCompletePromise).then(function(){return origSaveMemoryBuffer.call(me,flags)})};PDFNet.PDFDoc.prototype.saveStream=function(flags){var me=this;return Promise.resolve(me.documentCompletePromise).then(function(){return origSaveStream.call(me,
flags)})};PDFNet.PDFACompliance.createFromUrl=function(convert,url,pwd,conform,excep,max_ref_objs,first_stop,options){if(2>arguments.length||7<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromUrl'. Expected 7 arguments. Function Signature: createFromUrl(convert, url, pwd, conform, excep, max_ref_objs, first_stop)");"undefined"===typeof pwd&&(pwd="");"undefined"===typeof conform&&(conform=PDFNet.PDFACompliance.Conformance.e_Level1B);"undefined"===typeof excep&&
(excep=new Int32Array(0));"undefined"===typeof max_ref_objs&&(max_ref_objs=10);"undefined"===typeof first_stop&&(first_stop=!1);if(convert instanceof Promise)throw new TypeError("1st input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof convert)throw new TypeError("1st input argument '"+convert+"' in function 'createFromUrl' is of type '"+typeof convert+"'. Expected type 'number'. Function Signature: createFromUrl(convert, url, pwd, conform, excep, max_ref_objs, first_stop).");
if(url instanceof Promise)throw new TypeError("Received a Promise object in 1st input argument 'createFromURL'. Promises require a 'yield' statement before being accessed.");if("string"!=typeof url)throw new TypeError("2nd input argument '"+url+"' in function 'createFromURL' is of type '"+typeof url+"'. Expected type 'string'. Function Signature: createFromURL(PDFDoc, string, Obj).");if(pwd instanceof Promise)throw new TypeError("3rd input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof pwd)throw new TypeError("3rd input argument '"+pwd+"' in function 'createFromUrl' is of type '"+typeof pwd+"'. Expected type 'string'. Function Signature: createFromUrl(convert, url, pwd, conform, excep, max_ref_objs, first_stop).");if(conform instanceof Promise)throw new TypeError("4th input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof conform)throw new TypeError("4th input argument '"+
conform+"' in function 'createFromUrl' is of type '"+typeof conform+"'. Expected type 'number'. Function Signature: createFromUrl(convert, url, pwd, conform, excep, max_ref_objs, first_stop).");if(excep instanceof Promise)throw new TypeError("5th input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");if(max_ref_objs instanceof Promise)throw new TypeError("6th input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");
if(first_stop instanceof Promise)throw new TypeError("7th input argument in function 'createFromUrl' is a Promise object. Promises require a 'yield' statement before being accessed.");return getUrlAsBuffer(url).then(function(buf){return PDFNet.PDFACompliance.createFromBuffer(convert,buf,pwd,conform,excep,max_ref_objs,first_stop)})};PDFNet.PDFACompliance.createFromBuffer=function(convert,buf,pwd,conform,excep,max_ref_objs,first_stop){"undefined"===typeof pwd&&(pwd="");"undefined"===typeof conform&&
(conform=PDFNet.PDFACompliance.Conformance.e_Level1B);"undefined"===typeof excep&&(excep=new Int32Array(0));"undefined"===typeof max_ref_objs&&(max_ref_objs=10);"undefined"===typeof first_stop&&(first_stop=!1);if(2>arguments.length||7<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'createFromBuffer'. Expected 7 arguments. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop)");if(convert instanceof Promise)throw new TypeError("1st input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("boolean"!=typeof convert)throw new TypeError("1st input argument '"+convert+"' in function 'createFromBuffer' is of type '"+typeof convert+"'. Expected type 'number'. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");if(buf instanceof Promise)throw new TypeError("2nd input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(buf.buffer)){if("object"==
typeof buf)throw new TypeError("2nd input argument in function 'createFromBuffer' is of type '"+buf.name+"'. Expected typed array. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");throw new TypeError("2nd input argument '"+buf+"' in function 'createFromBuffer' is of type '"+typeof buf+"'. Expected typed array. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");}if(pwd instanceof Promise)throw new TypeError("3rd input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("string"!=typeof pwd)throw new TypeError("3rd input argument '"+pwd+"' in function 'createFromBuffer' is of type '"+typeof pwd+"'. Expected type 'string'. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");if(conform instanceof Promise)throw new TypeError("4th input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof conform)throw new TypeError("4th input argument '"+
conform+"' in function 'createFromBuffer' is of type '"+typeof conform+"'. Expected type 'number'. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");if(excep instanceof Promise)throw new TypeError("5th input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if(!exports.isArrayBuffer(excep.buffer)){if("object"==typeof excep)throw new TypeError("5th input argument in function 'createFromBuffer' is of type '"+
excep.name+"'. Expected typed array. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");throw new TypeError("5th input argument '"+excep+"' in function 'createFromBuffer' is of type '"+typeof excep+"'. Expected typed array. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");}if(max_ref_objs instanceof Promise)throw new TypeError("6th input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");
if("number"!=typeof max_ref_objs)throw new TypeError("6th input argument '"+max_ref_objs+"' in function 'createFromBuffer' is of type '"+typeof max_ref_objs+"'. Expected type 'number'. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");if(first_stop instanceof Promise)throw new TypeError("7th input argument in function 'createFromBuffer' is a Promise object. Promises require a 'yield' statement before being accessed.");if("boolean"!=typeof first_stop)throw new TypeError("7th input argument '"+
first_stop+"' in function 'createFromBuffer' is of type '"+typeof first_stop+"'. Expected type 'number'. Function Signature: createFromBuffer(convert, buf, pwd, conform, excep, max_ref_objs, first_stop).");return PDFNet.messageHandler.sendWithPromise("pdfaComplianceCreateFromBuffer",{convert:convert,buf:buf.buffer,password:pwd,conform:conform,excep:excep.buffer,max_ref_objs:max_ref_objs,first_stop:first_stop},this.userPriority).then(function(id){id=new PDFNet.PDFACompliance(id);createdObjects.push({name:id.name,
id:id.id});return id})};PDFNet.PDFDoc.prototype.lock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'lock'. Expected 0 arguments. Function Signature: lock()");lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlock"});return PDFNet.messageHandler.sendWithPromise("PDFDoc.lock",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.unlock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'unlock'. Expected 0 arguments. Function Signature: unlock()");
var me=this;return PDFNet.messageHandler.sendWithPromise("PDFDoc.unlock",{doc:this.id},this.userPriority).then(function(){for(var thisIndex=-1,i=lockedObjects.length-1;0<=i;i--)if(lockedObjects[i].id==me.id){thisIndex=i;break}if(-1!=thisIndex)for(lockedObjects.splice(thisIndex,1),i=unlockStackCounter.length-1;0<=i;i--)if(thisIndex<unlockStackCounter[i])--unlockStackCounter[i];else break;else console.log("[WARNING], the object to be unlocked was not found in the unlock list. Unlocking may cause errors.")})};
PDFNet.PDFDoc.prototype.lockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'lockRead'. Expected 0 arguments. Function Signature: lockRead()");lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlockRead"});return PDFNet.messageHandler.sendWithPromise("PDFDoc.lockRead",{doc:this.id},this.userPriority)};PDFNet.PDFDoc.prototype.unlockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'unlockRead'. Expected 0 arguments. Function Signature: unlockRead()");
var me=this;return PDFNet.messageHandler.sendWithPromise("PDFDoc.unlockRead",{doc:this.id},this.userPriority).then(function(){for(var thisIndex=-1,i=lockedObjects.length-1;0<=i;i--)if(lockedObjects[i].id==me.id){thisIndex=i;break}if(-1!=thisIndex)for(lockedObjects.splice(thisIndex,1),i=unlockStackCounter.length-1;0<=i;i--)if(thisIndex<unlockStackCounter[i])--unlockStackCounter[i];else break;else console.log("[WARNING], the object to be unlocked was not found in the unlock list. Unlocking may cause errors.")})};
PDFNet.PDFDoc.prototype.tryLock=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tryLock'. Expected 0 arguments. Function Signature: tryLock()");var index=lockedObjects.length;lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlock"});return PDFNet.messageHandler.sendWithPromise("PDFDoc.tryLock",{doc:this.id},this.userPriority).then(function(success){success||lockedObjects.splice(index,1)})};PDFNet.PDFDoc.prototype.timedLock=function(milliseconds){"undefined"===
typeof doc&&(doc=new PDFNet.PDFDoc("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'timedLock'. Expected at most 1 arguments. Function Signature: timedLock(number)");if(milliseconds instanceof Promise)throw new TypeError("1st input argument in function 'timedLock' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof milliseconds)throw new TypeError("1st input argument '"+milliseconds+"' in function 'timedLock' is of type '"+
typeof milliseconds+"'. Expected type 'number'. Function Signature: timedLock(number).");var index=lockedObjects.length;lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlock"});return PDFNet.messageHandler.sendWithPromise("PDFDoc.timedLock",{doc:this.id,milliseconds:milliseconds},this.userPriority).then(function(success){success||lockedObjects.splice(index,1)})};PDFNet.PDFDoc.prototype.tryLockRead=function(){if(0!=arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'tryLockRead'. Expected 0 arguments. Function Signature: tryLockRead()");
var index=lockedObjects.length;lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlockRead"});return PDFNet.messageHandler.sendWithPromise("PDFDoc.tryLockRead",{doc:this.id},this.userPriority).then(function(success){success||lockedObjects.splice(index,1)})};PDFNet.PDFDoc.prototype.timedLockRead=function(milliseconds){"undefined"===typeof doc&&(doc=new PDFNet.PDFDoc("0"));if(1<arguments.length)throw new RangeError(arguments.length+" arguments passed into function 'timedLockRead'. Expected at most 1 arguments. Function Signature: timedLockRead(number)");
if(milliseconds instanceof Promise)throw new TypeError("1st input argument in function 'timedLockRead' is a Promise object. Promises require a 'yield' statement before being accessed.");if("number"!=typeof milliseconds)throw new TypeError("1st input argument '"+milliseconds+"' in function 'timedLockRead' is of type '"+typeof milliseconds+"'. Expected type 'number'. Function Signature: timedLockRead(number).");var index=lockedObjects.length;lockedObjects.push({name:"PDFDoc",id:this.id,unlocktype:"unlockRead"});
return PDFNet.messageHandler.sendWithPromise("PDFDoc.timedLockRead",{doc:this.id,milliseconds:milliseconds},this.userPriority).then(function(success){success||lockedObjects.splice(index,1)})};PDFNet.hasFullApi=!0;exports.PDFNet.Convert.office2PDF=function(input,options){return PDFNet.Convert.office2PDFBuffer(input,options).then(function(){PDFNet.PDFDoc.create().then(function(doc){doc.initSecurityHandler();return doc})})}})("undefined"===typeof window?this:window)}]);}).call(this || window)
