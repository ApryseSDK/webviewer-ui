"use strict";(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[69825],{"./src/components/FormFieldPanel/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>components_FormFieldPanel});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),actions=__webpack_require__("./src/redux/actions/index.js"),useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js"),core=__webpack_require__("./src/core/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),selectors=__webpack_require__("./src/redux/selectors/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),Icon=__webpack_require__("./src/components/Icon/index.js"),DataElementWrapper=__webpack_require__("./src/components/DataElementWrapper/index.js"),dataElement=__webpack_require__("./src/constants/dataElement.js"),actionPriority=__webpack_require__("./src/constants/actionPriority.js"),getToolStyles=__webpack_require__("./src/helpers/getToolStyles.js"),setToolStyles=__webpack_require__("./src/helpers/setToolStyles.js"),getDeviceSize=__webpack_require__("./src/helpers/getDeviceSize.js"),mapValidationResponseToTranslation=__webpack_require__("./src/helpers/mapValidationResponseToTranslation.js"),FormFieldPanel=__webpack_require__("./src/components/FormFieldPanel/FormFieldPanel.js");__webpack_require__("./src/components/FormFieldPanel/FormFieldPanel.scss");const{Annotations,Tools}=window.Core,defaultProperties={name:"",defaultValue:"",radioButtonGroups:[]},defaultDimension={width:0,height:0},defaultFlags={ReadOnly:!1,Multiline:!1,Required:!1,MultiSelect:!1},getSignatureOption=widget=>{const formFieldCreationManager=core.A.getFormFieldCreationManager();if(widget)return formFieldCreationManager.getSignatureOption(widget);const currentTool=core.A.getToolMode(),toolStyles=(0,getToolStyles.A)(currentTool.name);return toolStyles?.signatureType||""},redrawAnnotation=annotation=>{core.A.getAnnotationManager().drawAnnotationsFromList([annotation])},validateDimension=(value,documentSize,annotationOffset)=>{const maxDimension=documentSize-annotationOffset;return Math.min(value,maxDimension)},{Annotations:FormFieldPanelContainer_Annotations,Tools:FormFieldPanelContainer_Tools}=window.Core,propTypes={annotation:prop_types_default().object},FormFieldPanelContainer=react.memo((({annotation})=>{const[isOpen,toolButtonObject,isSignatureOptionsDropdownDisabled,isInDesktopOnlyMode,mobilePanelSize,featureFlags]=(0,es.d4)((state=>[selectors.A.isElementOpen(state,dataElement.A.FORM_FIELD_PANEL),selectors.A.getToolButtonObjects(state),selectors.A.isElementDisabled(state,"signatureOptionsDropdown"),selectors.A.isInDesktopOnlyMode(state),selectors.A.getMobilePanelSize(state),selectors.A.getFeatureFlags(state)]),es.bN),{t}=(0,useTranslation.B)(),dispatch=(0,es.wA)(),isMobile=(0,getDeviceSize.IS)(),customizableUI=featureFlags.customizableUI,[fieldProperties,setFieldProperties]=(0,react.useState)(defaultProperties),[fieldDimension,setFieldDimension]=(0,react.useState)(defaultDimension),[fieldFlags,setFieldFlags]=(0,react.useState)(defaultFlags),[indicator,setIndicator]=(0,react.useState)({showIndicator:!1,indicatorText:""}),[isValid,setIsValid]=(0,react.useState)(!0),[validationMessage,setValidationMessage]=(0,react.useState)(""),currentTool=core.A.getToolMode(),isUsingDefaultOptions=currentTool instanceof FormFieldPanelContainer_Tools.ListBoxFormFieldCreateTool||currentTool instanceof FormFieldPanelContainer_Tools.ComboBoxFormFieldCreateTool,[toolOptions,setToolOptions]=(0,react.useState)(isUsingDefaultOptions?currentTool.defaults.options:[]),[fieldOptions,setFieldOptions]=(0,react.useState)(annotation?.getFieldOptions()??[]),[panelTitle,setPanelTitle]=(0,react.useState)();function closeAndReset(){dispatch(actions.A.enableElement(dataElement.A.ANNOTATION_POPUP,actionPriority.sg)),dispatch(actions.A.closeElement(dataElement.A.FORM_FIELD_PANEL)),setFieldProperties(defaultProperties),setFieldDimension(defaultDimension),setFieldFlags(defaultFlags),setIndicator({showIndicator:!1,indicatorText:""}),setPanelTitle(""),setIsValid(!0)}const formFieldCreationManager=core.A.getFormFieldCreationManager(),deleteWidgetsInFormBuilderMode=(0,react.useCallback)((annotation=>{core.A.deleteAnnotations([annotation])}),[]),handleToolModeChange=(0,react.useCallback)((newTool=>{if(newTool instanceof FormFieldPanelContainer_Tools.FormFieldCreateTool){const{options,flags,Width:width=0,Height:height=0,defaultValue="",indicatorText="",showIndicator=!1}=(0,getToolStyles.A)(newTool.name)||{};setFieldProperties((prev=>({...prev,defaultValue}))),setFieldDimension({width,height}),setFieldFlags({ReadOnly:flags?.READ_ONLY||!1,Required:flags?.REQUIRED||!1,Multiline:flags?.MULTILINE||!1,MultiSelect:flags?.MULTI_SELECT||!1}),setToolOptions(options),setIndicator({showIndicator,indicatorText}),(toolName=>{const title=toolButtonObject[toolName].title;setPanelTitle(`${t(title)} ${t("stylePanel.headings.tool")}`)})(newTool.name)}else closeAndReset()}),[toolButtonObject,t]);(0,react.useEffect)((()=>{updateRadioGroupsForRadioAnnotation();const onFormFieldCreationModeStarted=()=>{setFieldProperties((fieldProperties=>({...fieldProperties,radioButtonGroups:formFieldCreationManager.getRadioButtonGroups()})))},onAnnotationSelected=(annotations,action)=>{if("deselected"===action){const currentTool=core.A.getToolMode();currentTool instanceof FormFieldPanelContainer_Tools.FormFieldCreateTool?handleToolModeChange(currentTool):setTimeout((()=>{annotation||closeAndReset()}),500)}};return core.A.addEventListener("formFieldCreationModeStarted",onFormFieldCreationModeStarted),core.A.addEventListener("toolModeUpdated",handleToolModeChange),core.A.addEventListener("annotationSelected",onAnnotationSelected),()=>{core.A.removeEventListener("formFieldCreationModeStarted",onFormFieldCreationModeStarted),core.A.removeEventListener("annotationSelected",onAnnotationSelected),core.A.removeEventListener("toolModeUpdated",handleToolModeChange)}}),[]);const updateRadioGroupsForRadioAnnotation=()=>{const radioButtons=core.A.getAnnotationsList().filter((annotation=>annotation instanceof FormFieldPanelContainer_Annotations.RadioButtonWidgetAnnotation)),radioGroups=radioButtons.map((radioButton=>radioButton.getField().name)),dedupedRadioGroups=[...new Set([...radioGroups])];setFieldProperties((previousFieldProperties=>({...previousFieldProperties,radioButtonGroups:dedupedRadioGroups})))},handleRadioFieldNameChange=name=>{updateRadioGroupsForRadioAnnotation(),setFieldProperties((previousFieldProperties=>({...previousFieldProperties,name})))};(0,react.useEffect)((()=>{if(!isOpen)return;if(!annotation)return void handleToolModeChange(core.A.getToolMode());(annotation=>{const options=annotation.getFieldOptions();1===options.length&&""===options[0].value&&""===options[0].displayValue?setFieldOptions([]):setFieldOptions(options)})(annotation);const currentFlags=annotation.getFieldFlags(),{READ_ONLY,MULTILINE,REQUIRED,MULTI_SELECT}=FormFieldPanelContainer_Annotations.WidgetFlags,field=annotation.getField(),fieldName=field.name,radioButtons=fieldProperties.radioButtonGroups,isFieldNameValid=Boolean(fieldName),validationMessage=isFieldNameValid?"":"formField.formFieldPopup.invalidField.empty";setIsValid(isFieldNameValid),setFieldDimension({width:parseInt(annotation.Width),height:parseInt(annotation.Height)}),setFieldProperties((prev=>({...prev,name:fieldName,defaultValue:field.defaultValue,radioButtonGroups:[...new Set([...radioButtons,...formFieldCreationManager.getRadioButtonGroups()])]}))),setFieldFlags({ReadOnly:currentFlags[READ_ONLY]||!1,Multiline:currentFlags[MULTILINE]||!1,Required:currentFlags[REQUIRED]||!1,MultiSelect:currentFlags[MULTI_SELECT]||!1}),setIndicator({showIndicator:formFieldCreationManager.getShowIndicator(annotation),indicatorText:formFieldCreationManager.getIndicatorText(annotation)}),setPanelTitle(t(`formField.formFieldPanel.${field.getFieldType()}`)),setValidationMessage(validationMessage)}),[isOpen,annotation]);const onFieldNameChange=(0,react.useCallback)((name=>{const validatedResponse=formFieldCreationManager.setFieldName(annotation,name);setIsValid(validatedResponse.isValid);const validationResponse=(0,mapValidationResponseToTranslation.A)(validatedResponse);setValidationMessage(validationResponse),setFieldProperties((previousFieldProperties=>({...previousFieldProperties,name}))),updateFlagsForRadioAnnotation()}),[annotation]),updateFlagsForRadioAnnotation=(0,react.useCallback)((()=>{if(annotation&&annotation instanceof FormFieldPanelContainer_Annotations.RadioButtonWidgetAnnotation){const currentFlags=annotation.getField().flags,{READ_ONLY,REQUIRED}=FormFieldPanelContainer_Annotations.WidgetFlags;setFieldFlags((flags=>({...flags,ReadOnly:currentFlags.get(READ_ONLY)||!1,Required:currentFlags.get(REQUIRED)||!1})))}}),[annotation]),handleFlagChange=(0,react.useCallback)(((value,flagName)=>{if(setFieldFlags((previousFieldFlags=>({...previousFieldFlags,[FormFieldPanelContainer_Annotations.WidgetFlags[flagName]]:value}))),annotation)annotation.setFieldFlag(FormFieldPanelContainer_Annotations.WidgetFlags[flagName],value);else{const currentTool=core.A.getToolMode(),toolStyles=(0,getToolStyles.A)(currentTool.name),flags={...toolStyles?.flags};flags[flagName]=value,(0,setToolStyles.A)(currentTool.name,"flags",flags)}}),[annotation]),onFieldValueChange=(0,react.useCallback)((defaultValue=>{if(setFieldProperties((previousFieldProperties=>({...previousFieldProperties,defaultValue}))),annotation)annotation.getField().defaultValue=defaultValue;else{const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"defaultValue",defaultValue)}}),[annotation]),onFieldOptionsChange=(0,react.useCallback)((options=>{annotation.setFieldOptions(options)}),[fieldOptions,annotation]),onToolOptionsChange=(0,react.useCallback)((options=>{core.A.getToolMode().defaults.options=options})),onShowFieldIndicatorChange=(0,react.useCallback)((showIndicator=>{if(setIndicator((previousIndicator=>({...previousIndicator,showIndicator}))),annotation)formFieldCreationManager.setShowIndicator(annotation,showIndicator);else{const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"showIndicator",showIndicator)}}),[annotation]),onFieldIndicatorTextChange=(0,react.useCallback)((indicatorText=>{if(setIndicator((previousIndicator=>({...previousIndicator,indicatorText}))),annotation)formFieldCreationManager.setIndicatorText(annotation,indicatorText);else{const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"indicatorText",indicatorText)}}),[annotation]),closeFormFieldEditPanel=(0,react.useCallback)((()=>{closeAndReset()}),[]),onWidthChange=newWidth=>{if(annotation){const validatedWidth=validateDimension(newWidth,core.A.getPageWidth(core.A.getCurrentPage()),annotation.X);annotation.setWidth(validatedWidth),setFieldDimension((previousFieldDimension=>({...previousFieldDimension,width:validatedWidth}))),redrawAnnotation(annotation)}else{setFieldDimension((previousFieldDimension=>({...previousFieldDimension,width:newWidth})));const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"Width",newWidth)}},onHeightChange=newHeight=>{if(annotation){const validatedHeight=validateDimension(newHeight,core.A.getPageHeight(core.A.getCurrentPage()),annotation.Y);annotation.setHeight(validatedHeight),setFieldDimension((previousFieldDimension=>({...previousFieldDimension,height:validatedHeight}))),redrawAnnotation(annotation)}else{setFieldDimension((previousFieldDimension=>({...previousFieldDimension,height:newHeight})));const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"Height",newHeight)}},onCancelEmptyFieldName=(0,react.useCallback)((widgetAnnotation=>{widgetAnnotation?onFieldNameChange(widgetAnnotation.getField().name):deleteWidgetsInFormBuilderMode(widgetAnnotation),closeFormFieldEditPanel()}),[]),onCloseRadioButtonPanel=(0,react.useCallback)((()=>{isValid&&-1===fieldProperties.radioButtonGroups.indexOf(fieldProperties.name)&&""!==fieldProperties.name&&setFieldProperties((previousFieldProperties=>({...previousFieldProperties,radioButtonGroups:[fieldProperties.name,...previousFieldProperties.radioButtonGroups]}))),closeAndReset()}),[fieldProperties]),onSignatureOptionChange=(0,react.useCallback)((signatureOption=>{const{value}=signatureOption;if(annotation)formFieldCreationManager.setSignatureOption(annotation,value);else{const currentTool=core.A.getToolMode();(0,setToolStyles.A)(currentTool.name,"signatureType",value)}}),[annotation]),closeFormFieldPanel=()=>{dispatch(actions.A.closeElement(dataElement.A.FORM_FIELD_PANEL))},fields=(options=>{const{onFieldNameChange,onFieldValueChange,fieldProperties,onSignatureOptionChange,getSignatureOption,annotation}=options;return{NAME:{label:"formField.formFieldPopup.fieldName",onChange:onFieldNameChange,value:fieldProperties.name,required:!0,type:"text",focus:!0},DEFAULT_VALUE:{label:"formField.formFieldPopup.fieldValue",onChange:onFieldValueChange,value:fieldProperties.defaultValue,type:"text"},RADIO_GROUP:{label:"formField.formFieldPopup.fieldName",onChange:onFieldNameChange,value:fieldProperties.name,required:!0,type:"select"},SIGNATURE_OPTION:{label:"formField.formFieldPopup.signatureOption",onChange:onSignatureOptionChange,value:getSignatureOption(annotation),required:!1,type:"signatureOption"}}})({onFieldNameChange,onFieldValueChange,fieldProperties,onSignatureOptionChange,getSignatureOption,annotation}),flags=((handleFlagChange,fieldFlags)=>({READ_ONLY:{label:"formField.formFieldPopup.readOnly",name:"READ_ONLY",onChange:handleFlagChange,isChecked:fieldFlags.ReadOnly},MULTI_LINE:{label:"formField.formFieldPopup.multiLine",name:"MULTILINE",onChange:handleFlagChange,isChecked:fieldFlags.Multiline},REQUIRED:{label:"formField.formFieldPopup.required",name:"REQUIRED",onChange:handleFlagChange,isChecked:fieldFlags.Required},MULTI_SELECT:{name:"MULTI_SELECT",label:"formField.formFieldPopup.multiSelect",onChange:handleFlagChange,isChecked:fieldFlags.MultiSelect}}))(handleFlagChange,fieldFlags),indicatorProps={label:"formField.formFieldPopup.includeFieldIndicator",toggleIndicator:onShowFieldIndicatorChange,isChecked:indicator.showIndicator,onChange:onFieldIndicatorTextChange,value:indicator.indicatorText};return(0,jsx_runtime.jsxs)(DataElementWrapper.A,{dataElement:dataElement.A.FORM_FIELD_PANEL,className:classnames_default()({Panel:!0,FormFieldPanel:!0,[mobilePanelSize]:isMobile,"modular-ui-panel":customizableUI}),children:[!isInDesktopOnlyMode&&isMobile&&(0,jsx_runtime.jsx)("div",{className:"close-container",children:(0,jsx_runtime.jsx)("button",{className:"close-icon-container",onClick:closeFormFieldPanel,children:(0,jsx_runtime.jsx)(Icon.A,{glyph:"ic_close_black_24px",className:"close-icon"})})}),(()=>{const panelFields=((annotation,fields,isSignatureOptionsDropdownDisabled)=>{const currentTool=core.A.getToolMode(),panelFields=[];switch(!0){case annotation instanceof Annotations.RadioButtonWidgetAnnotation:panelFields.push(fields.RADIO_GROUP);break;case!!annotation:panelFields.push(fields.NAME)}switch(!0){case annotation instanceof Annotations.SignatureWidgetAnnotation&&!isSignatureOptionsDropdownDisabled:case currentTool instanceof Tools.SignatureFormFieldCreateTool&&!isSignatureOptionsDropdownDisabled:panelFields.push(fields.SIGNATURE_OPTION)}const noneSelected=!annotation,isTextWidgetSelected=annotation instanceof Annotations.TextWidgetAnnotation,isTextFormFieldToolSelected=currentTool instanceof Tools.TextFormFieldCreateTool;return(isTextWidgetSelected||isTextFormFieldToolSelected&&(isTextWidgetSelected||noneSelected))&&panelFields.push(fields.DEFAULT_VALUE),panelFields})(annotation,fields,isSignatureOptionsDropdownDisabled),panelFlags=((annotation,flags)=>{const fieldFlags=[flags.READ_ONLY,flags.REQUIRED],currentTool=core.A.getToolMode();switch(!0){case annotation instanceof Annotations.TextWidgetAnnotation:case currentTool instanceof Tools.TextFormFieldCreateTool:fieldFlags.push(flags.MULTI_LINE);break;case annotation instanceof Annotations.ListWidgetAnnotation:case currentTool instanceof Tools.ListBoxFormFieldCreateTool:fieldFlags.push(flags.MULTI_SELECT)}return fieldFlags})(annotation,flags),shouldShowOptions=(annotation=>{const currentTool=core.A.getToolMode(),isRenderingOptionsForWidget=annotation instanceof Annotations.ListWidgetAnnotation||annotation instanceof Annotations.ChoiceWidgetAnnotation,isToolWithFieldOptions=currentTool instanceof Tools.ComboBoxFormFieldCreateTool||currentTool instanceof Tools.ListBoxFormFieldCreateTool;return(!annotation||isRenderingOptionsForWidget)&&isToolWithFieldOptions||isRenderingOptionsForWidget})(annotation);return(0,jsx_runtime.jsx)(FormFieldPanel.A,{width:fieldDimension.width,height:fieldDimension.height,isValid,panelTitle,fields:panelFields,flags:panelFlags,validationMessage,fieldProperties,onRadioFieldNameChange:handleRadioFieldNameChange,onFieldOptionsChange,fieldOptions,onToolOptionsChange,toolOptions,annotation,redrawAnnotation,onWidthChange,onHeightChange,indicator:indicatorProps,onCancelEmptyFieldName,closeFormFieldEditPanel:onCloseRadioButtonPanel,shouldShowOptions})})()]})}));FormFieldPanelContainer.displayName="FormFieldPanelContainer",FormFieldPanelContainer.propTypes=propTypes;const FormFieldPanel_FormFieldPanelContainer=FormFieldPanelContainer;FormFieldPanelContainer.__docgenInfo={description:"",methods:[],displayName:"FormFieldPanelContainer",props:{annotation:{description:"",type:{name:"object"},required:!1}}};const components_FormFieldPanel=FormFieldPanel_FormFieldPanelContainer},"./src/helpers/mapValidationResponseToTranslation.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=({errorType})=>{switch(errorType){case"empty":return"formField.formFieldPopup.invalidField.empty";case"duplicate":return"formField.formFieldPopup.invalidField.duplicate"}}}}]);