(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[36904],{"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[13].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MeasurementOverlay/MeasurementOverlay.scss":(module,exports,__webpack_require__)=>{(exports=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(!1)).push([module.id,".open.MeasurementOverlay{visibility:visible}.closed.MeasurementOverlay{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.MeasurementOverlay{position:absolute;z-index:95;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);background:var(--component-background);flex-direction:column;inset-block-end:60px;inset-inline-end:14px;font-size:16px;min-width:215px;padding:6px}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .MeasurementOverlay{inset-block-end:8px;inset-inline-end:8px;padding:8px;font-size:14px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .MeasurementOverlay{inset-block-end:8px;inset-inline-end:8px;padding:8px;font-size:14px}}.MeasurementOverlay>*{margin:6px}.MeasurementOverlay.transparent{opacity:.5;pointer-events:none}.measurement__value{display:flex;flex-direction:row}.measurement__value .distance-show{margin-inline-start:3px;cursor:pointer}.measurement__title{display:flex;justify-content:center;align-items:center}.measurement__title .measurement__icon{margin-inline-end:5px}.measurement__deltas{display:flex;justify-content:space-between}.lineMeasurementInput{width:50px;margin-inline-start:4px}.length_input{margin-bottom:3px}.angle_input{margin-top:3px}.angle_input .lineMeasurementInput{width:65px}",""]),exports.locals={LEFT_HEADER_WIDTH:"41px",RIGHT_HEADER_WIDTH:"41px"},module.exports=exports},"./src/components/MeasurementOverlay/MeasurementOverlay.scss":(module,__unused_webpack_exports,__webpack_require__)=>{var api=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),content=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[13].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MeasurementOverlay/MeasurementOverlay.scss");"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.id,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},"./src/components/MeasurementOverlay/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>components_MeasurementOverlay});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),cjs=__webpack_require__("./node_modules/react-draggable/build/cjs/cjs.js"),cjs_default=__webpack_require__.n(cjs),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),core=__webpack_require__("./src/core/index.js"),map=__webpack_require__("./src/constants/map.js"),actions=__webpack_require__("./src/redux/actions/index.js"),selectors=__webpack_require__("./src/redux/selectors/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),withTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/withTranslation.js"),Icon=__webpack_require__("./src/components/Icon/index.js");function CustomMeasurementOverlay(props){return(type=>{if("ellipse"===(0,map.c7)(props.annotation))return(0,jsx_runtime.jsx)(CustomEllipseMeasurementOverlay,{...props});console.error(`Custom overlay for annotation type: ${type} not supported`)})(props.type)}function CustomEllipseMeasurementOverlay(props){const annotationKey=(0,map.c7)(props.annotation),{icon}=(0,map.ap)(annotationKey),{t}=props,distanceMeasurementTool=core.A.getTool("AnnotationCreateDistanceMeasurement"),precision=distanceMeasurementTool.defaults.Precision,scale=distanceMeasurementTool.defaults.Scale,measure=distanceMeasurementTool.Measure,unit=scale[1][1];return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__title",children:[icon&&(0,jsx_runtime.jsx)(Icon.A,{className:"measurement__icon",glyph:icon}),props.title]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__scale",children:[t("option.measurementOverlay.scale"),": ",`${scale[0][0]} ${scale[0][1]} = ${scale[1][0]} ${scale[1][1]}`]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__precision",children:[t("option.shared.precision"),": ",precision]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__value",children:[props.label,": ",(0,jsx_runtime.jsx)("input",{className:"lineMeasurementInput",type:"number",min:"0",value:(()=>{const factor=measure.axis[0].factor;return(props.value(props.annotation).toFixed(2)*factor).toFixed(2)})(),onChange:event=>props.onChange(event,props.annotation)})," ",unit]})]})}CustomMeasurementOverlay.propTypes={annotation:prop_types_default().object.isRequired,value:prop_types_default().func.isRequired,onChange:prop_types_default().func.isRequired,label:prop_types_default().string.isRequired,t:prop_types_default().func.isRequired,title:prop_types_default().string.isRequired},CustomEllipseMeasurementOverlay.propTypes=CustomMeasurementOverlay.propTypes;const MeasurementOverlay_CustomMeasurementOverlay=(0,withTranslation.C)()(CustomMeasurementOverlay);CustomMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"CustomMeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!0},value:{description:"",type:{name:"func"},required:!0},onChange:{description:"",type:{name:"func"},required:!0},label:{description:"",type:{name:"string"},required:!0},t:{description:"",type:{name:"func"},required:!0},title:{description:"",type:{name:"string"},required:!0}}};var useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js");function CountMeasurementOverlay(props){const annotationKey=(0,map.c7)(props.annotation),{icon}=(0,map.ap)(annotationKey),{t}=(0,useTranslation.B)(),annotationCount=core.A.getAnnotationsList().filter((annotation=>annotation.getCustomData("trn-is-count"))).length;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__title",children:[icon&&(0,jsx_runtime.jsx)(Icon.A,{className:"measurement__icon",glyph:icon}),t("option.measurementOverlay.countMeasurement")]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__count",children:[t("option.measurementOverlay.count"),": ",annotationCount]})]})}CountMeasurementOverlay.propTypes={annotation:prop_types_default().object.isRequired};const MeasurementOverlay_CountMeasurementOverlay=CountMeasurementOverlay;CountMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"CountMeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!0}}};var dataElement=__webpack_require__("./src/constants/dataElement.js");__webpack_require__("./src/components/MeasurementOverlay/MeasurementOverlay.scss");const propTypes={annotation:prop_types_default().object},MeasurementOverlay_MeasurementOverlay=props=>{const{annotation}=props,isDisabled=(0,es.d4)((state=>selectors.A.isElementDisabled(state,dataElement.A.MEASUREMENT_OVERLAY))),forceUpdate=function useForceUpdate(){const[,setValue]=(0,react.useState)(0);return()=>setValue((value=>value+1))}(),dispatch=(0,es.wA)(),[position,setPosition]=(0,react.useState)({x:0,y:0}),[transparentBackground,setTransparentBackground]=(0,react.useState)(!1),[isCreatingAnnotation,setIsCreatingAnnotation]=(0,react.useState)(!1),isOpen=(0,es.d4)((state=>selectors.A.isElementOpen(state,dataElement.A.MEASUREMENT_OVERLAY))),activeToolName=(0,es.d4)((state=>selectors.A.getActiveToolName(state))),customMeasurementOverlay=(0,es.d4)((state=>selectors.A.getCustomMeasurementOverlay(state))),overlayRef=(0,react.useRef)(),key=(0,map.c7)(annotation),shouldShowCustomOverlay=annot=>!(annot=>["countMeasurement"].includes((0,map.c7)(annot)))(annot)&&customMeasurementOverlay.some((overlay=>overlay.validate(annot))),onMouseMove=e=>{const tool=core.A.getTool(activeToolName);if(annotation){const insideRect=((e,overlayElement)=>{if(null===overlayElement)return!1;const overlayRect=overlayElement.getBoundingClientRect();let x,y;return e.touches&&e instanceof TouchEvent?(x=e.touches[0].clientX,y=e.touches[0].clientY):(x=e.clientX,y=e.clientY),x>=overlayRect.left&&x<=overlayRect.right&&y>=overlayRect.top&&y<=overlayRect.bottom})(e,overlayRef.current);let useTransparentBackground;if(isCreatingAnnotation){const drawMode=core.A.getToolMode().getDrawMode?.();useTransparentBackground=insideRect&&"twoClicks"!==drawMode}else{const annotUnderMouse=core.A.getAnnotationByMouseEvent(e);useTransparentBackground=insideRect&&annotUnderMouse===annotation}setTransparentBackground(useTransparentBackground),forceUpdate()}else shouldShowCustomOverlay(tool.annotation)&&(dispatch(actions.A.openElement(dataElement.A.MEASUREMENT_OVERLAY)),setIsCreatingAnnotation(!0))},onAnnotationChanged=(annotations,action)=>{"add"===action&&1===annotations.length&&annotations[0]===annotation&&dispatch(actions.A.closeElement(dataElement.A.MEASUREMENT_OVERLAY)),"modify"===action&&1===annotations.length&&annotations[0]===annotation&&forceUpdate()};return(0,react.useEffect)((()=>(core.A.addEventListener("mouseMove",onMouseMove),core.A.addEventListener("annotationChanged",onAnnotationChanged),()=>{core.A.removeEventListener("mouseMove",onMouseMove),core.A.removeEventListener("annotationChanged",onAnnotationChanged)})),[]),isDisabled||!annotation?null:(0,jsx_runtime.jsx)(cjs_default(),{cancel:"input",position,onDrag:(e,{x,y})=>setPosition({x,y}),onStop:(e,{x,y})=>setPosition({x,y}),children:(0,jsx_runtime.jsx)("div",{className:classnames_default()({Overlay:!0,MeasurementOverlay:!0,open:isOpen,closed:!isOpen,transparent:transparentBackground}),ref:overlayRef,"data-element":dataElement.A.MEASUREMENT_OVERLAY,children:((annot,key)=>shouldShowCustomOverlay(annot)?(0,jsx_runtime.jsx)(MeasurementOverlay_CustomMeasurementOverlay,{annotation:annot,...customMeasurementOverlay.filter((customOverlay=>customOverlay.validate(annot)))[0]}):"countMeasurement"===key?(0,jsx_runtime.jsx)(MeasurementOverlay_CountMeasurementOverlay,{annotation:annot}):void 0)(annotation,key)})})};MeasurementOverlay_MeasurementOverlay.propTypes=propTypes;const components_MeasurementOverlay_MeasurementOverlay=MeasurementOverlay_MeasurementOverlay;MeasurementOverlay_MeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"MeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!1}}};const components_MeasurementOverlay=components_MeasurementOverlay_MeasurementOverlay}}]);