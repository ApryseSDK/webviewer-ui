"use strict";(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[6652],{"./src/components/ScaleOverlay/MeasurementDetail.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>ScaleOverlay_MeasurementDetail});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js"),map=__webpack_require__("./src/constants/map.js"),measurementTypeTranslationMap={distanceMeasurement:"option.measurementOverlay.distanceMeasurement",perimeterMeasurement:"option.measurementOverlay.perimeterMeasurement",areaMeasurement:"option.measurementOverlay.areaMeasurement",rectangularAreaMeasurement:"option.measurementOverlay.areaMeasurement",cloudyRectangularAreaMeasurement:"option.measurementOverlay.areaMeasurement",ellipseMeasurement:"option.measurementOverlay.areaMeasurement",arcMeasurement:"option.measurementOverlay.arcMeasurement"},measurementScale=__webpack_require__("./src/constants/measurementScale.js");function getNumberOfDecimalPlaces(precision){return 1===precision?0:null==precision?void 0:precision.toString().split(".")[1].length}var Icon=__webpack_require__("./src/components/Icon/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),core=__webpack_require__("./src/core/index.js"),device=__webpack_require__("./src/helpers/device.js"),selectors=__webpack_require__("./src/redux/selectors/index.js");function getAngleInRadians(pt1,pt2,pt3){var angle;if(pt1&&pt2)if(pt3){var AB=Math.sqrt(Math.pow(pt2.x-pt1.x,2)+Math.pow(pt2.y-pt1.y,2)),BC=Math.sqrt(Math.pow(pt2.x-pt3.x,2)+Math.pow(pt2.y-pt3.y,2)),AC=Math.sqrt(Math.pow(pt3.x-pt1.x,2)+Math.pow(pt3.y-pt1.y,2));angle=Math.acos((BC*BC+AB*AB-AC*AC)/(2*BC*AB))}else angle=Math.atan2(pt2.y-pt1.y,pt2.x-pt1.x),angle=(angle=Math.abs(angle))>Math.PI/2?Math.PI-angle:angle;return angle}function getFormattedUnit(unit){switch(unit){case"ft'":case"ft-in":return"ft";case'in"':return"in";default:return unit}}function _array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _sliced_to_array(arr,i){return function _array_with_holes(arr){if(Array.isArray(arr))return arr}(arr)||function _iterable_to_array_limit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}(arr,i)||function _unsupported_iterable_to_array(o,minLen){if(!o)return;if("string"==typeof o)return _array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _array_like_to_array(o,minLen)}(arr,i)||function _non_iterable_rest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var unitMap={'in"':"in","ft'":"ft"};LineMeasurementInput.propTypes={annotation:prop_types_default().object,isOpen:prop_types_default().bool.isRequired,selectedTool:prop_types_default().object};var Scale=window.Core.Scale;function LineMeasurementInput(param){var _selectedTool_Measure,annotation=param.annotation,isOpen=param.isOpen,selectedTool=param.selectedTool,t=_sliced_to_array((0,useTranslation.B)(),1)[0],isReadOnly=(0,es.d4)((function(state){return selectors.A.isDocumentReadOnly(state)})),factor=null==annotation?void 0:annotation.Measure.axis[0].factor,unit=(null==annotation?void 0:annotation.DisplayUnits[0])||(null==selectedTool||null===(_selectedTool_Measure=selectedTool.Measure)||void 0===_selectedTool_Measure?void 0:_selectedTool_Measure.unit),_useState=_sliced_to_array((0,react.useState)(((null==annotation?void 0:annotation.getLineLength())*factor||0).toFixed(2)),2),length=_useState[0],setLength=_useState[1];(0,react.useEffect)((function(){if(annotation){var onAnnotationChanged=function(){setLength((annotation.getLineLength()*factor).toFixed(2)),setAngle(computeAngle())};return core.A.addEventListener("mouseMove",onAnnotationChanged),function(){core.A.removeEventListener("mouseMove",onAnnotationChanged)}}setAngle(computeAngle())}),[annotation,computeAngle,factor,selectedTool]);var onInputChanged=function(event){setLength(event.target.value),validateLineLength(event),finishAnnotation()},finishAnnotation=function(){core.A.getTool("AnnotationCreateDistanceMeasurement").finish()},selectAnnotation=function(){core.A.getAnnotationManager().selectAnnotation(annotation)},deselectAnnotation=function(){core.A.getAnnotationManager().deselectAnnotation(annotation)},validateLineLength=function(event){if(annotation){var length=Math.abs(event.target.value);length<annotation.Precision&&(length=annotation.Precision,setLength(length));var factor=annotation.Measure.axis[0].factor;ensureLineIsWithinBounds(length/factor)}},ensureLineIsWithinBounds=(0,react.useCallback)((function(lengthInPts){if(value1=annotation.getLineLength(),value2=lengthInPts,!(Math.abs(value1-value2)<.1)){var maxLengthInPts=getMaxLineLengthInPts();annotation.setLineLength(Math.min(maxLengthInPts,lengthInPts)),forceLineRedraw()}var value1,value2}),[annotation,forceLineRedraw,getMaxLineLengthInPts]),getAnnotationUnit=function(annotation){var _annotation_DisplayUnits,annotUnit;return(null==annotation||null===(_annotation_DisplayUnits=annotation.DisplayUnits)||void 0===_annotation_DisplayUnits?void 0:_annotation_DisplayUnits.length)&&(annotUnit=2===annotation.DisplayUnits.length&&"ft'"===annotation.DisplayUnits[0]&&'in"'===annotation.DisplayUnits[1]?"in":annotation.DisplayUnits[0]),unitMap[annotUnit]||annotUnit||unitMap[unit]||unit},forceLineRedraw=(0,react.useCallback)((function(){var annotationManager=core.A.getAnnotationManager();annotationManager.drawAnnotations(annotation.PageNumber),annotationManager.trigger("annotationChanged",[[annotation],"modify",{}])}),[annotation]),getMaxLineLengthInPts=(0,react.useCallback)((function(){var maxX,maxY,currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber),angleInDegrees=annotation.getAngle()*(180/Math.PI).toFixed(2),startPoint=annotation.getStartPoint(),startX=startPoint.x,startY=startPoint.y;maxX=Math.abs(angleInDegrees)<90?documentWidth:0,maxY=angleInDegrees>0?documentHeight:0;var maxLenX=Math.abs((maxX-startX)/Math.cos(annotation.getAngle())),maxLenY=Math.abs((maxY-startY)/Math.sin(annotation.getAngle()));return Math.min(maxLenX,maxLenY)}),[annotation]),onAngleChange=function(event){setAngle(event.target.value),function(event){var angleInRadians=event.target.value*(Math.PI/180)*-1,lengthInPts=annotation.getLineLength(),start=annotation.Start,endX=Math.cos(angleInRadians)*lengthInPts+start.x,endY=Math.sin(angleInRadians)*lengthInPts+start.y;annotation.setEndPoint(endX,endY),annotation.adjustRect(),forceLineRedraw()}(event),finishAnnotation()},computeAngle=(0,react.useCallback)((function(){if(!annotation)return 0;var angleInRadians=annotation.getAngle();return((angleInRadians=(angleInRadians*=-1)<0?angleInRadians+2*Math.PI:angleInRadians)/Math.PI*180).toFixed(2)}),[annotation]),_useState1=_sliced_to_array((0,react.useState)(computeAngle()),2),angle=_useState1[0],setAngle=_useState1[1];return(0,react.useEffect)((function(){isOpen||ensureLineIsWithinBounds(annotation.getLineLength())}),[annotation,ensureLineIsWithinBounds,isOpen]),react.createElement(react.Fragment,null,react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.distance"),":"),react.createElement("input",{className:"scale-input",type:"number",min:"0",disabled:isReadOnly||!annotation,value:annotation?length:0,autoFocus:!device.Xb,onChange:function(event){onInputChanged(event),selectAnnotation()},onBlur:function(event){validateLineLength(event)},onKeyDown:function(event){"Enter"===event.key&&(onInputChanged(event),deselectAnnotation())}}),getFormattedUnit(unit)),react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.angle"),":"),react.createElement("input",{className:"scale-input",type:"number",min:"0",max:"360",disabled:isReadOnly||!annotation,value:angle,autoFocus:!device.Xb,onChange:function(event){onAngleChange(event),selectAnnotation()},onKeyDown:function(event){"Enter"===event.key&&(onAngleChange(event),deselectAnnotation())}}),"Â°"),function(){var angle=annotation&&getAngleInRadians(annotation.Start,annotation.End)||0,unit=getAnnotationUnit(annotation),deltaX=Scale.getFormattedValue(annotation&&Math.abs(length*Math.cos(angle)),unit,null==annotation?void 0:annotation.Precision),deltaY=Scale.getFormattedValue(annotation&&Math.abs(length*Math.sin(angle)),unit,null==annotation?void 0:annotation.Precision);return react.createElement(react.Fragment,null,react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.xAxis"),":"),react.createElement("div",{className:"measurement"},deltaX)),react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.yAxis"),":"),react.createElement("div",{className:"measurement"},deltaY)))}())}const MeasurementOverlay_LineMeasurementInput=LineMeasurementInput;function EllipseMeasurementOverlay_array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function EllipseMeasurementOverlay_sliced_to_array(arr,i){return function EllipseMeasurementOverlay_array_with_holes(arr){if(Array.isArray(arr))return arr}(arr)||function EllipseMeasurementOverlay_iterable_to_array_limit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}(arr,i)||function EllipseMeasurementOverlay_unsupported_iterable_to_array(o,minLen){if(!o)return;if("string"==typeof o)return EllipseMeasurementOverlay_array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return EllipseMeasurementOverlay_array_like_to_array(o,minLen)}(arr,i)||function EllipseMeasurementOverlay_non_iterable_rest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}LineMeasurementInput.__docgenInfo={description:"",methods:[],displayName:"LineMeasurementInput",props:{annotation:{description:"",type:{name:"object"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0},selectedTool:{description:"",type:{name:"object"},required:!1}}};var propTypes={annotation:function(props,propName,componentName){return props.annotation||props.selectedTool?(props.annotation&&prop_types_default().checkPropTypes({annotation:prop_types_default().shape({Precision:prop_types_default().number,DisplayUnits:prop_types_default().arrayOf(prop_types_default().string),getContents:prop_types_default().func})},{annotation:props.annotation},"prop","EllipseMeasurementOverlay"),null):new Error("One of props 'annotation' or 'selectedTool' was not specified in '".concat(componentName,"'."))},selectedTool:function(props,propName,componentName){return props.annotation||props.selectedTool?(props.selectedTool&&prop_types_default().checkPropTypes({selectedTool:prop_types_default().shape({defaults:prop_types_default().shape({Precision:prop_types_default().number}),Measure:prop_types_default().shape({unit:prop_types_default().string})})},{selectedTool:props.selectedTool},"prop","EllipseMeasurementOverlay"),null):new Error("One of props 'annotation' or 'selectedTool' was not specified in '".concat(componentName,"'."))},isOpen:prop_types_default().bool.isRequired};function EllipseMeasurementOverlay(param){var _annotation_getMeasurementTextWithScaleAndUnits,_selectedTool_defaults,_this,_selectedTool_defaults1,annotation=param.annotation,isOpen=param.isOpen,selectedTool=param.selectedTool,t=(0,useTranslation.B)().t,isReadOnly=(0,es.d4)((function(state){return selectors.A.isDocumentReadOnly(state)})),area=(null==annotation||null===(_annotation_getMeasurementTextWithScaleAndUnits=annotation.getMeasurementTextWithScaleAndUnits)||void 0===_annotation_getMeasurementTextWithScaleAndUnits?void 0:_annotation_getMeasurementTextWithScaleAndUnits.call(annotation))||0,data={precision:annotation?annotation.Precision:null==selectedTool||null===(_selectedTool_defaults=selectedTool.defaults)||void 0===_selectedTool_defaults?void 0:_selectedTool_defaults.Precision,unit:getFormattedUnit(null===(_this=(null==annotation?void 0:annotation.Scale)||(null==selectedTool||null===(_selectedTool_defaults1=selectedTool.defaults)||void 0===_selectedTool_defaults1?void 0:_selectedTool_defaults1.Scale))||void 0===_this?void 0:_this[1][1]),area},refreshRadius=function(){setRadius(computeRadius())};(0,react.useEffect)((function(){return refreshRadius(),core.A.addEventListener("mouseMove",refreshRadius),function(){core.A.removeEventListener("mouseMove",refreshRadius)}}),[annotation]),(0,react.useEffect)((function(){var onAnnotationDeselected=function(annotations,action){if("deselected"===action){var annotation=annotations[0];ensureDiameterIsWithinBounds(annotation.getWidth(),annotation)}};return core.A.addEventListener("annotationSelected",onAnnotationDeselected),function(){core.A.removeEventListener("annotationSelected",onAnnotationDeselected)}}),[]);var computeRadius=function(){if(!annotation)return 0;var decimalPlaces=annotation&&getNumberOfDecimalPlaces(annotation.Precision)||0,factor=annotation.Measure.axis[0].factor;return((annotation.Width/2).toFixed(decimalPlaces)*factor).toFixed(decimalPlaces)},onChangeRadiusLength=function(event){var eventValue=event.target.value||0,radius=eventValue>0?eventValue:1e-4,diameterInPts=2*(radius/annotation.Measure.axis[0].factor),rect=annotation.getRect(),newRect={x1:rect.x1,y1:rect.y1,x2:rect.x1+diameterInPts,y2:rect.y1+diameterInPts};annotation.setHeight(diameterInPts),annotation.setWidth(diameterInPts),annotation.resize(newRect),setRadius(radius),forceEllipseRedraw(annotation),core.A.getTool("AnnotationCreateEllipseMeasurement").finish()},forceEllipseRedraw=function(annotation){var annotationManager=core.A.getAnnotationManager();annotationManager.redrawAnnotation(annotation),annotationManager.trigger("annotationChanged",[[annotation],"modify",[]])},getMaxDiameterInPts=(0,react.useCallback)((function(annotation){var currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber),maxX=documentWidth-annotation.X,maxY=documentHeight-annotation.Y;return Math.min(maxX,maxY)})),ensureDiameterIsWithinBounds=(0,react.useCallback)((function(diameterInPts,annotation){if(diameterInPts>getMaxDiameterInPts(annotation)){var boundingRect=annotation.getRect(),x1=boundingRect.x1,x2=boundingRect.x2,y1=boundingRect.y1,y2=boundingRect.y2,width=annotation.Width,height=annotation.Height,currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber);x2>documentWidth&&(boundingRect.x2=documentWidth,width=documentWidth-x1),y2>documentHeight&&(boundingRect.y2=documentHeight,height=documentHeight-y1),width<documentWidth?annotation.setWidth(width):annotation.setWidth(documentWidth),height<documentHeight?annotation.setHeight(height):annotation.setHeight(documentHeight),annotation.resize(boundingRect),forceEllipseRedraw(annotation)}}),[getMaxDiameterInPts]);(0,react.useEffect)((function(){isOpen||ensureDiameterIsWithinBounds(annotation.getWidth(),annotation)}),[annotation,ensureDiameterIsWithinBounds,isOpen]);var _useState=EllipseMeasurementOverlay_sliced_to_array((0,react.useState)(computeRadius()),2),radius=_useState[0],setRadius=_useState[1];return react.createElement("div",{className:"measurement__detail-container"},react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.shared.precision"),":"),react.createElement("div",{className:"measurement"},measurementScale.Iq[data.precision]||data.precision)),react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.area"),":"),react.createElement("div",{className:"measurement"},data.area)),react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.radius"),":"),react.createElement("input",{autoFocus:!device.Xb,className:"scale-input",type:"number",min:"0",disabled:isReadOnly||!annotation,value:radius,onChange:function(event){onChangeRadiusLength(event),core.A.getAnnotationManager().selectAnnotation(annotation)},onBlur:function(event){return function(event){var radius=Math.abs(event.target.value),factor=annotation.Measure.axis[0].factor;ensureDiameterIsWithinBounds(radius/factor*2,annotation),refreshRadius()}(event)},onKeyDown:function(event){"Enter"===event.key&&(onChangeRadiusLength(event),core.A.getAnnotationManager().deselectAnnotation(annotation))}}),data.unit))}EllipseMeasurementOverlay.propTypes=propTypes;const MeasurementOverlay_EllipseMeasurementOverlay=EllipseMeasurementOverlay;EllipseMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"EllipseMeasurementOverlay",props:{annotation:{description:"",type:{name:"custom",raw:"(props, propName, componentName) => {\n  if (!props.annotation && !props.selectedTool) {\n    return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n  }\n  if (props.annotation) {\n    PropTypes.checkPropTypes(\n      {\n        annotation: PropTypes.shape({\n          Precision: PropTypes.number,\n          DisplayUnits: PropTypes.arrayOf(PropTypes.string),\n          getContents: PropTypes.func,\n        }),\n      },\n      { annotation: props.annotation },\n      'prop',\n      'EllipseMeasurementOverlay',\n    );\n  }\n  return null;\n}"},required:!1},selectedTool:{description:"",type:{name:"custom",raw:"(props, propName, componentName) => {\n  if (!props.annotation && !props.selectedTool) {\n    return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n  }\n  if (props.selectedTool) {\n    PropTypes.checkPropTypes(\n      {\n        selectedTool: PropTypes.shape({\n          defaults: PropTypes.shape({\n            Precision: PropTypes.number,\n          }),\n          Measure: PropTypes.shape({\n            unit: PropTypes.string,\n          }),\n        }),\n      },\n      { selectedTool: props.selectedTool },\n      'prop',\n      'EllipseMeasurementOverlay',\n    );\n  }\n  return null;\n}"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0}}};__webpack_require__("./src/components/ScaleOverlay/ScaleOverlay.scss");function MeasurementDetail_array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _to_consumable_array(arr){return function _array_without_holes(arr){if(Array.isArray(arr))return MeasurementDetail_array_like_to_array(arr)}(arr)||function _iterable_to_array(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||function MeasurementDetail_unsupported_iterable_to_array(o,minLen){if(!o)return;if("string"==typeof o)return MeasurementDetail_array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return MeasurementDetail_array_like_to_array(o,minLen)}(arr)||function _non_iterable_spread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var MeasurementDetail_propTypes={annotation:prop_types_default().object,isOpen:prop_types_default().bool.isRequired,selectedTool:prop_types_default().object},MeasurementDetail=function(param){var key,icon,color,translationKey,annotation=param.annotation,isOpen=param.isOpen,selectedTool=param.selectedTool,t=(0,useTranslation.B)().t,data=(0,react.useMemo)((function(){var _selectedTool_defaults_StrokeColor,_selectedTool_defaults,_annotation_getMeasurementTextWithScaleAndUnits,_selectedTool_defaults1,key=annotation?(0,map.c7)(annotation):(0,map.YP)(selectedTool.name);return{key,icon:(0,map.ap)(key).icon,color:annotation?annotation.Color.toHexString():null==selectedTool||null===(_selectedTool_defaults=selectedTool.defaults)||void 0===_selectedTool_defaults||null===(_selectedTool_defaults_StrokeColor=_selectedTool_defaults.StrokeColor)||void 0===_selectedTool_defaults_StrokeColor?void 0:_selectedTool_defaults_StrokeColor.toHexString(),contents:annotation?null===(_annotation_getMeasurementTextWithScaleAndUnits=annotation.getMeasurementTextWithScaleAndUnits)||void 0===_annotation_getMeasurementTextWithScaleAndUnits?void 0:_annotation_getMeasurementTextWithScaleAndUnits.call(annotation):0,precision:annotation?annotation.Precision:null==selectedTool||null===(_selectedTool_defaults1=selectedTool.defaults)||void 0===_selectedTool_defaults1?void 0:_selectedTool_defaults1.Precision}}));return react.createElement("div",{className:"MeasurementDetail"},(key=data.key,icon=data.icon,color=data.color,translationKey=measurementTypeTranslationMap[key],react.createElement("div",{className:"header"},react.createElement(Icon.A,{glyph:icon,color,className:"icon"}),react.createElement("div",null,t(translationKey)))),function(){var radius,length,key=data.key,precision=data.precision;return"ellipseMeasurement"===key?react.createElement(MeasurementOverlay_EllipseMeasurementOverlay,{annotation,selectedTool,isOpen}):react.createElement("div",{className:"measurement__detail-container"},react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.shared.precision"),":"),react.createElement("div",{className:"measurement"},measurementScale.Iq[precision]||precision)),"distanceMeasurement"===key&&react.createElement(MeasurementOverlay_LineMeasurementInput,{annotation,isOpen,selectedTool}),["rectangularAreaMeasurement","cloudyRectangularAreaMeasurement","perimeterMeasurement","areaMeasurement"].includes(key)&&function(){var key=data.key,contents=data.contents,keyDisplayNameMap={distanceMeasurement:t("option.measurementOverlay.distance"),perimeterMeasurement:t("option.measurementOverlay.perimeter"),areaMeasurement:t("option.measurementOverlay.area"),rectangularAreaMeasurement:t("option.measurementOverlay.area"),cloudyRectangularAreaMeasurement:t("option.measurementOverlay.area")};return react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},keyDisplayNameMap[key],":"),react.createElement("div",{className:"measurement"},contents))}(),"arcMeasurement"===key&&(length=(null==annotation?void 0:annotation.Length)||0,react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.length")),react.createElement("div",{className:"measurement"},length))),"arcMeasurement"===key&&(radius=(null==annotation?void 0:annotation.Radius)||0,react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.radius")),react.createElement("div",{className:"measurement"},radius))),!["rectangularAreaMeasurement","distanceMeasurement","cloudyRectangularAreaMeasurement"].includes(key)&&function(){if(!annotation)return react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.angle"),":"),react.createElement("div",{className:"measurement"},"0Â°"));var key=data.key,getIPathAnnotationPts=function(annotation){var path=annotation.getPath(),length=path.length;return[path[length-3],path[length-2],path[length-1]]},keyPtMap={distanceMeasurement:function(param){return[param.Start,param.End]},perimeterMeasurement:getIPathAnnotationPts,areaMeasurement:getIPathAnnotationPts,rectangularAreaMeasurement:getIPathAnnotationPts,cloudyRectangularAreaMeasurement:getIPathAnnotationPts,arcMeasurement:getIPathAnnotationPts},pts=keyPtMap[key](annotation).filter((function(pt){return!!pt})),angle=getAngleInRadians.apply(void 0,_to_consumable_array(pts));if(angle){var decimalPlaces=getNumberOfDecimalPlaces(annotation.Precision);angle=(angle/Math.PI*180).toFixed(decimalPlaces)}return"arcMeasurement"===key&&(angle=annotation.Angle.toFixed(2)),void 0!==angle&&react.createElement("div",{className:"measurement__detail-item"},react.createElement("div",{className:"measurement_list"},t("option.measurementOverlay.angle"),":"),react.createElement("div",{className:"measurement"},angle,"Â°"))}())}())};MeasurementDetail.propTypes=MeasurementDetail_propTypes;const ScaleOverlay_MeasurementDetail=MeasurementDetail;MeasurementDetail.__docgenInfo={description:"",methods:[],displayName:"MeasurementDetail",props:{annotation:{description:"",type:{name:"object"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0},selectedTool:{description:"",type:{name:"object"},required:!1}}}}}]);