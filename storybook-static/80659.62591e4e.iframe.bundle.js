"use strict";(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[80659],{"./src/components/ScaleOverlay/MeasurementDetail.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>ScaleOverlay_MeasurementDetail});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js"),map=__webpack_require__("./src/constants/map.js");const measurementTypeTranslationMap={distanceMeasurement:"option.measurementOverlay.distanceMeasurement",perimeterMeasurement:"option.measurementOverlay.perimeterMeasurement",areaMeasurement:"option.measurementOverlay.areaMeasurement",rectangularAreaMeasurement:"option.measurementOverlay.areaMeasurement",cloudyRectangularAreaMeasurement:"option.measurementOverlay.areaMeasurement",ellipseMeasurement:"option.measurementOverlay.areaMeasurement",arcMeasurement:"option.measurementOverlay.arcMeasurement"};var measurementScale=__webpack_require__("./src/constants/measurementScale.js");const getNumberOfDecimalPlaces=precision=>1===precision?0:precision?.toString().split(".")[1].length;var Icon=__webpack_require__("./src/components/Icon/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),core=__webpack_require__("./src/core/index.js"),device=__webpack_require__("./src/helpers/device.js"),selectors=__webpack_require__("./src/redux/selectors/index.js");const getAngleInRadians=(pt1,pt2,pt3)=>{let angle;if(pt1&&pt2)if(pt3){const AB=Math.sqrt(Math.pow(pt2.x-pt1.x,2)+Math.pow(pt2.y-pt1.y,2)),BC=Math.sqrt(Math.pow(pt2.x-pt3.x,2)+Math.pow(pt2.y-pt3.y,2)),AC=Math.sqrt(Math.pow(pt3.x-pt1.x,2)+Math.pow(pt3.y-pt1.y,2));angle=Math.acos((BC*BC+AB*AB-AC*AC)/(2*BC*AB))}else angle=Math.atan2(pt2.y-pt1.y,pt2.x-pt1.x),angle=Math.abs(angle),angle=angle>Math.PI/2?Math.PI-angle:angle;return angle},getFormattedUnit=unit=>{switch(unit){case"ft'":case"ft-in":return"ft";case'in"':return"in";default:return unit}},unitMap={'in"':"in","ft'":"ft"};LineMeasurementInput.propTypes={annotation:prop_types_default().object,isOpen:prop_types_default().bool.isRequired,selectedTool:prop_types_default().object,canModify:prop_types_default().bool};const Scale=window.Core.Scale;function LineMeasurementInput({annotation,isOpen,selectedTool,canModify}){const[t]=(0,useTranslation.B)(),isReadOnly=(0,es.d4)((state=>selectors.A.isDocumentReadOnly(state))),factor=annotation?.Measure.axis[0].factor,unit=annotation?.DisplayUnits[0]||selectedTool?.Measure?.unit,[length,setLength]=(0,react.useState)((annotation?.getLineLength()*factor||0).toFixed(2)),onInputChanged=event=>{setLength(event.target.value),validateLineLength(event),finishAnnotation()},finishAnnotation=()=>{core.A.getTool("AnnotationCreateDistanceMeasurement").finish()},selectAnnotation=()=>{core.A.getAnnotationManager().selectAnnotation(annotation)},deselectAnnotation=()=>{core.A.getAnnotationManager().deselectAnnotation(annotation)},validateLineLength=event=>{if(!annotation)return;let length=Math.abs(event.target.value);length<annotation.Precision&&(length=annotation.Precision,setLength(length));const factor=annotation.Measure.axis[0].factor;ensureLineIsWithinBounds(length/factor)},forceLineRedraw=(0,react.useCallback)((()=>{const annotationManager=core.A.getAnnotationManager();annotationManager.drawAnnotations(annotation.PageNumber),annotationManager.trigger("annotationChanged",[[annotation],"modify",{}])}),[annotation]),getMaxLineLengthInPts=(0,react.useCallback)((()=>{const currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber),angleInDegrees=annotation.getAngle()*(180/Math.PI).toFixed(2),startPoint=annotation.getStartPoint(),startX=startPoint.x,startY=startPoint.y;let maxX,maxY;maxX=Math.abs(angleInDegrees)<90?documentWidth:0,maxY=angleInDegrees>0?documentHeight:0;const maxLenX=Math.abs((maxX-startX)/Math.cos(annotation.getAngle())),maxLenY=Math.abs((maxY-startY)/Math.sin(annotation.getAngle()));return Math.min(maxLenX,maxLenY)}),[annotation]),ensureLineIsWithinBounds=(0,react.useCallback)((lengthInPts=>{if(value1=annotation.getLineLength(),value2=lengthInPts,!(Math.abs(value1-value2)<.1)){const maxLengthInPts=getMaxLineLengthInPts();annotation.setLineLength(Math.min(maxLengthInPts,lengthInPts)),forceLineRedraw()}var value1,value2}),[annotation,forceLineRedraw,getMaxLineLengthInPts]),getAnnotationUnit=annotation=>{let annotUnit;return annotation?.DisplayUnits?.length&&(annotUnit=2===annotation.DisplayUnits.length&&"ft'"===annotation.DisplayUnits[0]&&'in"'===annotation.DisplayUnits[1]?"in":annotation.DisplayUnits[0]),unitMap[annotUnit]||annotUnit||unitMap[unit]||unit},onAngleChange=event=>{setAngle(event.target.value),(event=>{const angleInRadians=event.target.value*(Math.PI/180)*-1,lengthInPts=annotation.getLineLength(),start=annotation.Start,endX=Math.cos(angleInRadians)*lengthInPts+start.x,endY=Math.sin(angleInRadians)*lengthInPts+start.y;annotation.setEndPoint(endX,endY),annotation.adjustRect(),forceLineRedraw()})(event),finishAnnotation()},computeAngle=(0,react.useCallback)((()=>{if(!annotation)return 0;let angleInRadians=annotation.getAngle();return angleInRadians*=-1,angleInRadians=angleInRadians<0?angleInRadians+2*Math.PI:angleInRadians,(angleInRadians/Math.PI*180).toFixed(2)}),[annotation]),[angle,setAngle]=(0,react.useState)(computeAngle());return(0,react.useEffect)((()=>{isOpen||ensureLineIsWithinBounds(annotation.getLineLength())}),[annotation,ensureLineIsWithinBounds,isOpen]),(0,react.useEffect)((()=>{if(!annotation)return void setAngle(computeAngle());const onAnnotationChanged=()=>{setLength((annotation.getLineLength()*factor).toFixed(2)),setAngle(computeAngle())};return core.A.addEventListener("mouseMove",onAnnotationChanged),()=>{core.A.removeEventListener("mouseMove",onAnnotationChanged)}}),[annotation,computeAngle,factor,selectedTool]),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.distance"),":"]}),(0,jsx_runtime.jsx)("input",{className:"scale-input",type:"number",min:"0",disabled:isReadOnly||!annotation||!canModify,value:annotation?length:0,autoFocus:!device.Xb,onChange:event=>{onInputChanged(event),selectAnnotation()},onBlur:event=>{validateLineLength(event)},onKeyDown:event=>{"Enter"===event.key&&(onInputChanged(event),deselectAnnotation())}}),getFormattedUnit(unit)]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.angle"),":"]}),(0,jsx_runtime.jsx)("input",{className:"scale-input",type:"number",min:"0",max:"360",disabled:isReadOnly||!annotation||!canModify,value:angle,autoFocus:!device.Xb,onChange:event=>{onAngleChange(event),selectAnnotation()},onKeyDown:event=>{"Enter"===event.key&&(onAngleChange(event),deselectAnnotation())}}),"Â°"]}),(()=>{const angle=annotation&&getAngleInRadians(annotation.Start,annotation.End)||0,unit=getAnnotationUnit(annotation),deltaX=Scale.getFormattedValue(annotation&&Math.abs(length*Math.cos(angle)),unit,annotation?.Precision),deltaY=Scale.getFormattedValue(annotation&&Math.abs(length*Math.sin(angle)),unit,annotation?.Precision);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.xAxis"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:deltaX})]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.yAxis"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:deltaY})]})]})})()]})}const MeasurementOverlay_LineMeasurementInput=LineMeasurementInput;LineMeasurementInput.__docgenInfo={description:"",methods:[],displayName:"LineMeasurementInput",props:{annotation:{description:"",type:{name:"object"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0},selectedTool:{description:"",type:{name:"object"},required:!1},canModify:{description:"",type:{name:"bool"},required:!1}}};const propTypes={annotation:(props,propName,componentName)=>props.annotation||props.selectedTool?(props.annotation&&prop_types_default().checkPropTypes({annotation:prop_types_default().shape({Precision:prop_types_default().number,DisplayUnits:prop_types_default().arrayOf(prop_types_default().string),getContents:prop_types_default().func})},{annotation:props.annotation},"prop","EllipseMeasurementOverlay"),null):new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`),selectedTool:(props,propName,componentName)=>props.annotation||props.selectedTool?(props.selectedTool&&prop_types_default().checkPropTypes({selectedTool:prop_types_default().shape({defaults:prop_types_default().shape({Precision:prop_types_default().number}),Measure:prop_types_default().shape({unit:prop_types_default().string})})},{selectedTool:props.selectedTool},"prop","EllipseMeasurementOverlay"),null):new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`),isOpen:prop_types_default().bool.isRequired,canModify:prop_types_default().bool};function EllipseMeasurementOverlay({annotation,isOpen,selectedTool,canModify}){const{t}=(0,useTranslation.B)(),isReadOnly=(0,es.d4)((state=>selectors.A.isDocumentReadOnly(state))),area=annotation?.getMeasurementTextWithScaleAndUnits?.()||0,data={precision:annotation?annotation.Precision:selectedTool?.defaults?.Precision,unit:getFormattedUnit((annotation?.Scale||selectedTool?.defaults?.Scale)?.[1][1]),area},refreshRadius=()=>{setRadius(computeRadius())};(0,react.useEffect)((()=>(refreshRadius(),core.A.addEventListener("mouseMove",refreshRadius),()=>{core.A.removeEventListener("mouseMove",refreshRadius)})),[annotation]),(0,react.useEffect)((()=>{const onAnnotationDeselected=(annotations,action)=>{if("deselected"===action){const annotation=annotations[0];ensureDiameterIsWithinBounds(annotation.getWidth(),annotation)}};return core.A.addEventListener("annotationSelected",onAnnotationDeselected),()=>{core.A.removeEventListener("annotationSelected",onAnnotationDeselected)}}),[]);const computeRadius=()=>{if(!annotation)return 0;const decimalPlaces=annotation&&getNumberOfDecimalPlaces(annotation.Precision)||0,factor=annotation.Measure.axis[0].factor;return((annotation.Width/2).toFixed(decimalPlaces)*factor).toFixed(decimalPlaces)},onChangeRadiusLength=event=>{const eventValue=event.target.value||0,radius=eventValue>0?eventValue:1e-4,diameterInPts=2*(radius/annotation.Measure.axis[0].factor),rect=annotation.getRect();let{X1,X2,Y1,Y2}=0;X1=rect.x1,Y1=rect.y1,X2=rect.x1+diameterInPts,Y2=rect.y1+diameterInPts;const newRect={x1:X1,y1:Y1,x2:X2,y2:Y2};annotation.setHeight(diameterInPts),annotation.setWidth(diameterInPts),annotation.resize(newRect),setRadius(radius),forceEllipseRedraw(annotation),core.A.getTool("AnnotationCreateEllipseMeasurement").finish()},forceEllipseRedraw=annotation=>{const annotationManager=core.A.getAnnotationManager();annotationManager.redrawAnnotation(annotation),annotationManager.trigger("annotationChanged",[[annotation],"modify",[]])},getMaxDiameterInPts=(0,react.useCallback)((annotation=>{const currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber),maxX=documentWidth-annotation.X,maxY=documentHeight-annotation.Y;return Math.min(maxX,maxY)})),ensureDiameterIsWithinBounds=(0,react.useCallback)(((diameterInPts,annotation)=>{if(diameterInPts>getMaxDiameterInPts(annotation)){const boundingRect=annotation.getRect(),{x1,x2,y1,y2}=boundingRect;let width=annotation.Width,height=annotation.Height;const currentPageNumber=core.A.getCurrentPage(),documentWidth=core.A.getPageWidth(currentPageNumber),documentHeight=core.A.getPageHeight(currentPageNumber);x2>documentWidth&&(boundingRect.x2=documentWidth,width=documentWidth-x1),y2>documentHeight&&(boundingRect.y2=documentHeight,height=documentHeight-y1),width<documentWidth?annotation.setWidth(width):annotation.setWidth(documentWidth),height<documentHeight?annotation.setHeight(height):annotation.setHeight(documentHeight),annotation.resize(boundingRect),forceEllipseRedraw(annotation)}}),[getMaxDiameterInPts]);(0,react.useEffect)((()=>{isOpen||ensureDiameterIsWithinBounds(annotation.getWidth(),annotation)}),[annotation,ensureDiameterIsWithinBounds,isOpen]);const[radius,setRadius]=(0,react.useState)(computeRadius());return(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-container",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.shared.precision"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:measurementScale.Iq[data.precision]||data.precision})]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.area"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:data.area})]}),(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.radius"),":"]}),(0,jsx_runtime.jsx)("input",{autoFocus:!device.Xb,className:"scale-input",type:"number",min:"0",disabled:isReadOnly||!annotation||!canModify,value:radius,onChange:event=>{onChangeRadiusLength(event),core.A.getAnnotationManager().selectAnnotation(annotation)},onBlur:event=>(event=>{const radius=Math.abs(event.target.value),factor=annotation.Measure.axis[0].factor;ensureDiameterIsWithinBounds(radius/factor*2,annotation),refreshRadius()})(event),onKeyDown:event=>{"Enter"===event.key&&(onChangeRadiusLength(event),core.A.getAnnotationManager().deselectAnnotation(annotation))}}),data.unit]})]})}EllipseMeasurementOverlay.propTypes=propTypes;const MeasurementOverlay_EllipseMeasurementOverlay=EllipseMeasurementOverlay;EllipseMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"EllipseMeasurementOverlay",props:{annotation:{description:"",type:{name:"custom",raw:"(props, propName, componentName) => {\n  if (!props.annotation && !props.selectedTool) {\n    return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n  }\n  if (props.annotation) {\n    PropTypes.checkPropTypes(\n      {\n        annotation: PropTypes.shape({\n          Precision: PropTypes.number,\n          DisplayUnits: PropTypes.arrayOf(PropTypes.string),\n          getContents: PropTypes.func,\n        }),\n      },\n      { annotation: props.annotation },\n      'prop',\n      'EllipseMeasurementOverlay',\n    );\n  }\n  return null;\n}"},required:!1},selectedTool:{description:"",type:{name:"custom",raw:"(props, propName, componentName) => {\n  if (!props.annotation && !props.selectedTool) {\n    return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n  }\n  if (props.selectedTool) {\n    PropTypes.checkPropTypes(\n      {\n        selectedTool: PropTypes.shape({\n          defaults: PropTypes.shape({\n            Precision: PropTypes.number,\n          }),\n          Measure: PropTypes.shape({\n            unit: PropTypes.string,\n          }),\n        }),\n      },\n      { selectedTool: props.selectedTool },\n      'prop',\n      'EllipseMeasurementOverlay',\n    );\n  }\n  return null;\n}"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0},canModify:{description:"",type:{name:"bool"},required:!1}}};__webpack_require__("./src/components/ScaleOverlay/ScaleOverlay.scss");const MeasurementDetail_propTypes={annotation:prop_types_default().object,isOpen:prop_types_default().bool.isRequired,selectedTool:prop_types_default().object,canModify:prop_types_default().bool},MeasurementDetail=({annotation,isOpen,selectedTool,canModify})=>{const{t}=(0,useTranslation.B)(),data=(0,react.useMemo)((()=>{const key=annotation?(0,map.c7)(annotation):(0,map.YP)(selectedTool.name);return{key,icon:(0,map.ap)(key).icon,color:annotation?annotation.Color.toHexString():selectedTool?.defaults?.StrokeColor?.toHexString(),contents:annotation?annotation.getMeasurementTextWithScaleAndUnits?.():0,precision:annotation?annotation.Precision:selectedTool?.defaults?.Precision}})),renderValue=()=>{const{key,contents}=data,keyDisplayNameMap={distanceMeasurement:t("option.measurementOverlay.distance"),perimeterMeasurement:t("option.measurementOverlay.perimeter"),areaMeasurement:t("option.measurementOverlay.area"),rectangularAreaMeasurement:t("option.measurementOverlay.area"),cloudyRectangularAreaMeasurement:t("option.measurementOverlay.area")};return(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[keyDisplayNameMap[key],":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:contents})]})},renderAngle=()=>{if(!annotation)return(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.angle"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:"0Â°"})]});const{key}=data,getIPathAnnotationPts=annotation=>{const path=annotation.getPath(),length=path.length;return[path[length-3],path[length-2],path[length-1]]},pts={distanceMeasurement:({Start,End})=>[Start,End],perimeterMeasurement:getIPathAnnotationPts,areaMeasurement:getIPathAnnotationPts,rectangularAreaMeasurement:getIPathAnnotationPts,cloudyRectangularAreaMeasurement:getIPathAnnotationPts,arcMeasurement:getIPathAnnotationPts}[key](annotation).filter((pt=>!!pt));let angle=getAngleInRadians(...pts);if(angle){const decimalPlaces=getNumberOfDecimalPlaces(annotation.Precision);angle=(angle/Math.PI*180).toFixed(decimalPlaces)}return"arcMeasurement"===key&&(angle=annotation.Angle.toFixed(2)),void 0!==angle&&(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.measurementOverlay.angle"),":"]}),(0,jsx_runtime.jsxs)("div",{className:"measurement",children:[angle,"Â°"]})]})},renderLength=()=>{const length=annotation?.Length||0;return(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsx)("div",{className:"measurement_list",children:t("option.measurementOverlay.length")}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:length})]})},renderRadius=()=>{const radius=annotation?.Radius||0;return(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsx)("div",{className:"measurement_list",children:t("option.measurementOverlay.radius")}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:radius})]})};return(0,jsx_runtime.jsxs)("div",{className:"MeasurementDetail",children:[(()=>{const{key,icon,color}=data,translationKey=measurementTypeTranslationMap[key];return(0,jsx_runtime.jsxs)("div",{className:"header",children:[(0,jsx_runtime.jsx)(Icon.A,{glyph:icon,color,className:"icon"}),(0,jsx_runtime.jsx)("div",{children:t(translationKey)})]})})(),(()=>{const{key,precision}=data;return"ellipseMeasurement"===key?(0,jsx_runtime.jsx)(MeasurementOverlay_EllipseMeasurementOverlay,{annotation,selectedTool,isOpen,canModify}):(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-container",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement__detail-item",children:[(0,jsx_runtime.jsxs)("div",{className:"measurement_list",children:[t("option.shared.precision"),":"]}),(0,jsx_runtime.jsx)("div",{className:"measurement",children:measurementScale.Iq[precision]||precision})]}),"distanceMeasurement"===key&&(0,jsx_runtime.jsx)(MeasurementOverlay_LineMeasurementInput,{annotation,isOpen,selectedTool,canModify}),["rectangularAreaMeasurement","cloudyRectangularAreaMeasurement","perimeterMeasurement","areaMeasurement"].includes(key)&&renderValue(),"arcMeasurement"===key&&renderLength(),"arcMeasurement"===key&&renderRadius(),!["rectangularAreaMeasurement","distanceMeasurement","cloudyRectangularAreaMeasurement"].includes(key)&&renderAngle()]})})()]})};MeasurementDetail.propTypes=MeasurementDetail_propTypes;const ScaleOverlay_MeasurementDetail=MeasurementDetail;MeasurementDetail.__docgenInfo={description:"",methods:[],displayName:"MeasurementDetail",props:{annotation:{description:"",type:{name:"object"},required:!1},isOpen:{description:"",type:{name:"bool"},required:!0},selectedTool:{description:"",type:{name:"object"},required:!1},canModify:{description:"",type:{name:"bool"},required:!1}}}}}]);