"use strict";(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[7618],{"./src/components/ScaleOverlay/MeasurementDetail.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DistanceScaleOverlay:()=>DistanceScaleOverlay,EllipseScaleOverlay:()=>EllipseScaleOverlay,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"),react_redux__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-redux/es/index.js"),_MeasurementDetail__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/ScaleOverlay/MeasurementDetail.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/ScaleOverlay/MeasurementDetail",component:_MeasurementDetail__WEBPACK_IMPORTED_MODULE_2__.A};var initialState={viewer:{currentPage:1,isDocumentReadOnly:!1}},toolDefaults={Scale:[[2,"in"],[5,"in"]]},mockSelectedTool=function(tool){switch(tool){case"DistanceMeasurementCreateTool":return{name:"DistanceMeasurementCreateTool",defaults:toolDefaults};case"EllipseMeasurementCreateTool":return{name:"EllipseMeasurementCreateTool",defaults:toolDefaults};default:return null}};function noop(){}var defaultSettings=[{factor:1,unit:"in",decimalSymbol:".",thousandsSymbol:",",display:"D",precision:100,unitPrefix:"",unitSuffix:"",unitPosition:"S"}];function DistanceScaleOverlay(){var distanceMeasurementAnnot=new window.Core.Annotations.LineAnnotation;return distanceMeasurementAnnot.Measure={scale:"1 in = 1 in",axis:defaultSettings,distance:defaultSettings,area:defaultSettings},distanceMeasurementAnnot.IT="LineDimension",distanceMeasurementAnnot.DisplayUnits=["in"],distanceMeasurementAnnot.Scale=[[1,"in"],[1,"in"]],distanceMeasurementAnnot.Precision=.01,distanceMeasurementAnnot.getAngle=function(){return 0},distanceMeasurementAnnot.Color=new window.Core.Annotations.Color(255,0,0),distanceMeasurementAnnot.getMeasurementTextWithScaleAndUnits=function(){return'1"'},distanceMeasurementAnnot.getLineLength=function(){return 100},distanceMeasurementAnnot.Start={x:100,y:100},distanceMeasurementAnnot.End={x:200,y:200},react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Kq,{store:(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.U1)({reducer:function(){return initialState}})},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"Overlay ScaleOverlay open"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_MeasurementDetail__WEBPACK_IMPORTED_MODULE_2__.A,{isOpen:!0,annotation:distanceMeasurementAnnot,selectedTool:mockSelectedTool("DistanceMeasurementCreateTool")})))}function EllipseScaleOverlay(){var mockEllipseAnnotation=new window.Core.Annotations.EllipseAnnotation;return mockEllipseAnnotation.Scale="",mockEllipseAnnotation.Width=100,mockEllipseAnnotation.Height=100,mockEllipseAnnotation.IT="EllipseDimension",mockEllipseAnnotation.Color=new window.Core.Annotations.Color(255,0,0),mockEllipseAnnotation.resize=noop,mockEllipseAnnotation.adjustContents=noop,mockEllipseAnnotation.Measure={scale:"2 in = 5 in",axis:[{factor:.03472224409448819,precision:100,thousandsSymbol:",",display:"D",decimalSymbol:"."}],area:[{factor:.03472224409448819,precision:100,thousandsSymbol:",",display:"D",decimalSymbol:"."}]},mockEllipseAnnotation.Precision=.01,mockEllipseAnnotation.getPageNumber=function(){return 1},mockEllipseAnnotation.getContents=function(){return"".concat((this.Width/10).toFixed(2)," sq in")},mockEllipseAnnotation.getMeasurementTextWithScaleAndUnits=function(){return"".concat((this.Width/10).toFixed(2)," sq in")},mockEllipseAnnotation.getRect=function(){return{x1:100,x2:200,y1:100,y2:200}},mockEllipseAnnotation.setWidth=function(w){this.Width=Number(w)},mockEllipseAnnotation.setHeight=function(h){this.Height=Number(h)},react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Kq,{store:(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.U1)({reducer:function(){return initialState}})},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"Overlay ScaleOverlay open"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_MeasurementDetail__WEBPACK_IMPORTED_MODULE_2__.A,{isOpen:!0,annotation:mockEllipseAnnotation,selectedTool:mockSelectedTool("EllipseMeasurementCreateTool")})))}DistanceScaleOverlay.parameters={...DistanceScaleOverlay.parameters,docs:{...DistanceScaleOverlay.parameters?.docs,source:{originalSource:"function DistanceScaleOverlay() {\n  const distanceMeasurementAnnot = new window.Core.Annotations.LineAnnotation();\n  distanceMeasurementAnnot['Measure'] = {\n    'scale': '1 in = 1 in',\n    'axis': defaultSettings,\n    'distance': defaultSettings,\n    'area': defaultSettings\n  };\n  distanceMeasurementAnnot['IT'] = 'LineDimension';\n  distanceMeasurementAnnot['DisplayUnits'] = ['in'];\n  distanceMeasurementAnnot['Scale'] = [[1, 'in'], [1, 'in']];\n  distanceMeasurementAnnot['Precision'] = 0.01;\n  distanceMeasurementAnnot['getAngle'] = () => 0;\n  distanceMeasurementAnnot['Color'] = new window.Core.Annotations.Color(255, 0, 0);\n  distanceMeasurementAnnot.getMeasurementTextWithScaleAndUnits = () => '1\"';\n  distanceMeasurementAnnot.getLineLength = () => 100;\n  distanceMeasurementAnnot.Start = {\n    'x': 100,\n    'y': 100\n  };\n  distanceMeasurementAnnot.End = {\n    'x': 200,\n    'y': 200\n  };\n  return <ReduxProvider store={configureStore({\n    reducer: () => initialState\n  })}>\n      <div className={'Overlay ScaleOverlay open'}>\n        <MeasurementDetail isOpen={true} annotation={distanceMeasurementAnnot} selectedTool={mockSelectedTool('DistanceMeasurementCreateTool')} />\n      </div>\n    </ReduxProvider>;\n}",...DistanceScaleOverlay.parameters?.docs?.source}}},EllipseScaleOverlay.parameters={...EllipseScaleOverlay.parameters,docs:{...EllipseScaleOverlay.parameters?.docs,source:{originalSource:"function EllipseScaleOverlay() {\n  const mockEllipseAnnotation = new window.Core.Annotations.EllipseAnnotation();\n  mockEllipseAnnotation['Scale'] = '';\n  mockEllipseAnnotation['Width'] = 100;\n  mockEllipseAnnotation['Height'] = 100;\n  mockEllipseAnnotation['IT'] = 'EllipseDimension';\n  mockEllipseAnnotation['Color'] = new window.Core.Annotations.Color(255, 0, 0);\n  mockEllipseAnnotation['resize'] = noop;\n  mockEllipseAnnotation['adjustContents'] = noop;\n  mockEllipseAnnotation['Measure'] = {\n    scale: '2 in = 5 in',\n    axis: [{\n      factor: 0.03472224409448819,\n      precision: 100,\n      thousandsSymbol: ',',\n      display: 'D',\n      decimalSymbol: '.'\n    }],\n    area: [{\n      factor: 0.03472224409448819,\n      precision: 100,\n      thousandsSymbol: ',',\n      display: 'D',\n      decimalSymbol: '.'\n    }]\n  };\n  mockEllipseAnnotation['Precision'] = 0.01;\n  mockEllipseAnnotation.getPageNumber = () => 1;\n\n  // Sets the text that appears in area field.\n  // The actual calculation is more complicated, but irrelevant for front-end testing.\n  // The contents should change automatically when the radius changes.\n  mockEllipseAnnotation.getContents = function () {\n    return `${(this.Width / 10).toFixed(2)} sq in`;\n  };\n  mockEllipseAnnotation.getMeasurementTextWithScaleAndUnits = function () {\n    return `${(this.Width / 10).toFixed(2)} sq in`;\n  };\n\n  // Sets the initial size of the annotation.\n  // The width and height should change automatically when the radius changes.\n  mockEllipseAnnotation.getRect = function () {\n    return {\n      'x1': 100,\n      'x2': 200,\n      'y1': 100,\n      'y2': 200\n    };\n  };\n  mockEllipseAnnotation.setWidth = function (w) {\n    this.Width = Number(w);\n  };\n  mockEllipseAnnotation.setHeight = function (h) {\n    this.Height = Number(h);\n  };\n  return <ReduxProvider store={configureStore({\n    reducer: () => initialState\n  })}>\n      <div className={'Overlay ScaleOverlay open'}>\n        <MeasurementDetail isOpen={true} annotation={mockEllipseAnnotation} selectedTool={mockSelectedTool('EllipseMeasurementCreateTool')} />\n      </div>\n    </ReduxProvider>;\n}",...EllipseScaleOverlay.parameters?.docs?.source}}};const __namedExportsOrder=["DistanceScaleOverlay","EllipseScaleOverlay"]},"./src/components/Icon/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _Icon__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/components/Icon/Icon.js");const __WEBPACK_DEFAULT_EXPORT__=_Icon__WEBPACK_IMPORTED_MODULE_0__.A;_Icon__WEBPACK_IMPORTED_MODULE_0__.A.__docgenInfo={description:"",methods:[{name:"updateSvg",docblock:null,modifiers:[],params:[],returns:null},{name:"isInlineSvg",docblock:null,modifiers:[],params:[],returns:null}],displayName:"Icon",props:{ariaHidden:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},className:{description:"",type:{name:"string"},required:!1},color:{description:"",type:{name:"string"},required:!1},glyph:{description:"",type:{name:"string"},required:!0},fillColor:{description:"",type:{name:"string"},required:!1},strokeColor:{description:"",type:{name:"string"},required:!1},disabled:{description:"",type:{name:"bool"},required:!1},dataElement:{description:"",type:{name:"string"},required:!1}}}},"./src/constants/measurementScale.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}__webpack_require__.d(__webpack_exports__,{Br:()=>initialScale,CR:()=>ftInFractionalRegex,Cg:()=>parseFtInDecimal,D4:()=>PrecisionType,EN:()=>metricUnits,Iq:()=>precisionFractions,OR:()=>hintValues,Oh:()=>scalePresetPrecision,Ph:()=>fractionalUnits,QQ:()=>parseFtInFractional,SY:()=>floatRegex,cX:()=>parseInFractional,dz:()=>precisionOptions,fM:()=>ifFractionalPrecision,gJ:()=>PresetMeasurementSystems,gK:()=>getMeasurementScalePreset,oU:()=>convertUnit,oi:()=>ftInDecimalRegex,yQ:()=>inFractionalRegex});var _obj,_obj1,Scale=window.Core.Scale,PresetMeasurementSystems={METRIC:"metric",IMPERIAL:"imperial"},metricPreset=[["1:10",new Scale([[1,"mm"],[10,"mm"]])],["1:20",new Scale([[1,"mm"],[20,"mm"]])],["1:50",new Scale([[1,"mm"],[50,"mm"]])],["1:100",new Scale([[1,"mm"],[100,"mm"]])],["1:200",new Scale([[1,"mm"],[200,"mm"]])],["1:500",new Scale([[1,"mm"],[500,"mm"]])],["1:1000",new Scale([[1,"mm"],[1e3,"mm"]])]],imperialPreset=[['1/16"=1\'-0"',new Scale([[1/16,"in"],[1,"ft-in"]])],['3/32"=1\'-0"',new Scale([[3/32,"in"],[1,"ft-in"]])],['1/8"=1\'-0"',new Scale([[1/8,"in"],[1,"ft-in"]])],['3/16"=1\'-0"',new Scale([[3/16,"in"],[1,"ft-in"]])],['1/4"=1\'-0"',new Scale([[1/4,"in"],[1,"ft-in"]])],['3/8"=1\'-0"',new Scale([[3/8,"in"],[1,"ft-in"]])],['1/2"=1\'-0"',new Scale([[.5,"in"],[1,"ft-in"]])],['3/4"=1\'-0"',new Scale([[3/4,"in"],[1,"ft-in"]])],['1"=1\'-0"',new Scale([[1,"in"],[1,"ft-in"]])]],getMeasurementScalePreset=function(){var _obj;return _define_property(_obj={},PresetMeasurementSystems.METRIC,metricPreset),_define_property(_obj,PresetMeasurementSystems.IMPERIAL,imperialPreset),_obj},fractionalPrecisions=[["1/8",.125],["1/16",.0625],["1/32",.03125],["1/64",.015625]],PrecisionType={DECIMAL:"decimal",FRACTIONAL:"fractional"},precisionOptions=(_define_property(_obj={},PrecisionType.DECIMAL,[["0.1",.1],["0.01",.01],["0.001",.001],["0.0001",1e-4]]),_define_property(_obj,PrecisionType.FRACTIONAL,fractionalPrecisions),_obj),precisionFractions={.125:"1/8",.0625:"1/16",.03125:"1/32",.015625:"1/64"},floatRegex=/^(\d+)?(\.)?(\d+)?$/,inFractionalRegex=/^((\d+) )?((\d+)\/)?(\d+)"$/,ftInFractionalRegex=/^((\d+)'-)?((\d+) )?((\d+)\/)?(\d+)"$/,ftInDecimalRegex=/^((\d+)ft-)?(((\d+).)?(\d+))in$/,parseFtInDecimal=function(valueStr){var matches=valueStr.match(ftInDecimalRegex),sum=0;return sum+=matches[2]?Number(matches[2]):0,matches[3]&&Number(matches[3])&&(sum+=Number(matches[3])/12),sum},parseInFractional=function(valueStr){var matches=valueStr.match(inFractionalRegex),sum=0;return sum+=matches[2]?Number(matches[2]):0,matches[5]&&Number(matches[5])&&(matches[4]&&Number(matches[4])?sum+=Number(matches[4])/Number(matches[5]):sum+=Number(matches[5])),sum},parseFtInFractional=function(valueStr){var matches=valueStr.match(ftInFractionalRegex),sum=0;return sum+=matches[2]?Number(matches[2]):0,sum+=matches[4]?Number(matches[4])/12:0,matches[7]&&Number(matches[7])&&(matches[6]&&Number(matches[6])?sum+=Number(matches[6])/Number(matches[7])/12:sum+=Number(matches[7])/12),sum},fractionalUnits=["in","ft-in"],metricUnits=["mm","cm","m","km"],ifFractionalPrecision=function(precision){return fractionalPrecisions.map((function(item){return item[0]})).includes(precision)||fractionalPrecisions.map((function(item){return item[1]})).includes(precision)},hintValues={in:'eg. 1 1/2"',"ft-in":"eg. 1'-1 1/2\"","ft-in decimal":"eg. 1ft-10.5in"},unitConversion={mm:.1,cm:1,m:100,km:1e5,mi:160394,yd:91.44,ft:30.48,in:2.54,"ft'":30.48,'in"':2.54,pt:.0352778,"ft-in":30.48},convertUnit=function(value,unit,newUnit){return value*unitConversion[unit]/unitConversion[newUnit]},scalePresetPrecision=(_define_property(_obj1={},imperialPreset[0][0],fractionalPrecisions[1]),_define_property(_obj1,imperialPreset[1][0],fractionalPrecisions[2]),_define_property(_obj1,imperialPreset[2][0],fractionalPrecisions[0]),_define_property(_obj1,imperialPreset[3][0],fractionalPrecisions[1]),_define_property(_obj1,imperialPreset[4][0],fractionalPrecisions[0]),_define_property(_obj1,imperialPreset[5][0],fractionalPrecisions[0]),_define_property(_obj1,imperialPreset[6][0],fractionalPrecisions[0]),_define_property(_obj1,imperialPreset[7][0],fractionalPrecisions[0]),_define_property(_obj1,imperialPreset[8][0],fractionalPrecisions[0]),_obj1),initialScale=new Scale({pageScale:{value:1,unit:"in"},worldScale:{value:1,unit:"in"}})}}]);