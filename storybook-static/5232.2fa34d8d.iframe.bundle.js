(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[5232],{"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[14].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MeasurementOverlay/MeasurementOverlay.scss":(module,exports,__webpack_require__)=>{(exports=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(!1)).push([module.id,".open.MeasurementOverlay{visibility:visible}.closed.MeasurementOverlay{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.MeasurementOverlay{position:absolute;z-index:95;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);background:var(--component-background);flex-direction:column;bottom:60px;right:14px;font-size:16px;min-width:215px;padding:6px}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}.MeasurementOverlay>*{margin:6px}.MeasurementOverlay.transparent{opacity:.5;pointer-events:none}.measurement__value{display:flex;flex-direction:row}.measurement__value .distance-show{margin-left:3px;cursor:pointer}.measurement__title{display:flex;justify-content:center;align-items:center}.measurement__title .measurement__icon{margin-right:5px}.measurement__deltas{display:flex;justify-content:space-between}.lineMeasurementInput{width:50px;margin-left:4px}.length_input{margin-bottom:3px}.angle_input{margin-top:3px}.angle_input .lineMeasurementInput{width:65px}",""]),exports.locals={LEFT_HEADER_WIDTH:"41px",RIGHT_HEADER_WIDTH:"41px"},module.exports=exports},"./src/components/MeasurementOverlay/MeasurementOverlay.scss":(module,__unused_webpack_exports,__webpack_require__)=>{var api=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),content=__webpack_require__("./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js??ruleSet[1].rules[14].use[2]!./node_modules/sass-loader/dist/cjs.js!./src/components/MeasurementOverlay/MeasurementOverlay.scss");"string"==typeof(content=content.__esModule?content.default:content)&&(content=[[module.id,content,""]]);var options={insert:"head",singleton:!1};api(content,options);module.exports=content.locals||{}},"./src/components/MeasurementOverlay/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>components_MeasurementOverlay});var react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),cjs=__webpack_require__("./node_modules/react-draggable/build/cjs/cjs.js"),cjs_default=__webpack_require__.n(cjs),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),core=__webpack_require__("./src/core/index.js"),map=__webpack_require__("./src/constants/map.js"),actions=__webpack_require__("./src/redux/actions/index.js"),selectors=__webpack_require__("./src/redux/selectors/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),withTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/withTranslation.js"),Icon=__webpack_require__("./src/components/Icon/index.js");function CustomMeasurementOverlay(props){return function(type){if("ellipse"===(0,map.c7)(props.annotation))return react.createElement(CustomEllipseMeasurementOverlay,props);console.error("Custom overlay for annotation type: ".concat(type," not supported"))}(props.type)}function CustomEllipseMeasurementOverlay(props){var factor,annotationKey=(0,map.c7)(props.annotation),icon=(0,map.ap)(annotationKey).icon,t=props.t,distanceMeasurementTool=core.A.getTool("AnnotationCreateDistanceMeasurement"),precision=distanceMeasurementTool.defaults.Precision,scale=distanceMeasurementTool.defaults.Scale,measure=distanceMeasurementTool.Measure,unit=scale[1][1];return react.createElement(react.Fragment,null,react.createElement("div",{className:"measurement__title"},icon&&react.createElement(Icon.A,{className:"measurement__icon",glyph:icon}),props.title),react.createElement("div",{className:"measurement__scale"},t("option.measurementOverlay.scale"),": ","".concat(scale[0][0]," ").concat(scale[0][1]," = ").concat(scale[1][0]," ").concat(scale[1][1])),react.createElement("div",{className:"measurement__precision"},t("option.shared.precision"),": ",precision),react.createElement("div",{className:"measurement__value"},props.label,": ",react.createElement("input",{className:"lineMeasurementInput",type:"number",min:"0",value:(factor=measure.axis[0].factor,(props.value(props.annotation).toFixed(2)*factor).toFixed(2)),onChange:function(event){return props.onChange(event,props.annotation)}})," ",unit))}CustomMeasurementOverlay.propTypes={annotation:prop_types_default().object.isRequired,value:prop_types_default().func.isRequired,onChange:prop_types_default().func.isRequired,label:prop_types_default().string.isRequired,t:prop_types_default().func.isRequired,title:prop_types_default().string.isRequired},CustomEllipseMeasurementOverlay.propTypes=CustomMeasurementOverlay.propTypes;const MeasurementOverlay_CustomMeasurementOverlay=(0,withTranslation.C)()(CustomMeasurementOverlay);CustomMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"CustomMeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!0},value:{description:"",type:{name:"func"},required:!0},onChange:{description:"",type:{name:"func"},required:!0},label:{description:"",type:{name:"string"},required:!0},t:{description:"",type:{name:"func"},required:!0},title:{description:"",type:{name:"string"},required:!0}}};var useTranslation=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js");function CountMeasurementOverlay(props){var annotationKey=(0,map.c7)(props.annotation),icon=(0,map.ap)(annotationKey).icon,t=(0,useTranslation.B)().t,annotationCount=core.A.getAnnotationsList().filter((function(annotation){return annotation.getCustomData("trn-is-count")})).length;return react.createElement(react.Fragment,null,react.createElement("div",{className:"measurement__title"},icon&&react.createElement(Icon.A,{className:"measurement__icon",glyph:icon}),t("option.measurementOverlay.countMeasurement")),react.createElement("div",{className:"measurement__count"},t("option.measurementOverlay.count"),": ",annotationCount))}CountMeasurementOverlay.propTypes={annotation:prop_types_default().object.isRequired};const MeasurementOverlay_CountMeasurementOverlay=CountMeasurementOverlay;CountMeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"CountMeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!0}}};var dataElement=__webpack_require__("./src/constants/dataElement.js");__webpack_require__("./src/components/MeasurementOverlay/MeasurementOverlay.scss");function _array_like_to_array(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _sliced_to_array(arr,i){return function _array_with_holes(arr){if(Array.isArray(arr))return arr}(arr)||function _iterable_to_array_limit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}(arr,i)||function _unsupported_iterable_to_array(o,minLen){if(!o)return;if("string"==typeof o)return _array_like_to_array(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _array_like_to_array(o,minLen)}(arr,i)||function _non_iterable_rest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var isMouseInsideRect=function(e,overlayElement){if(null===overlayElement)return!1;var x,y,overlayRect=overlayElement.getBoundingClientRect();return e.touches&&function _instanceof(left,right){return null!=right&&"undefined"!=typeof Symbol&&right[Symbol.hasInstance]?!!right[Symbol.hasInstance](left):left instanceof right}(e,TouchEvent)?(x=e.touches[0].clientX,y=e.touches[0].clientY):(x=e.clientX,y=e.clientY),x>=overlayRect.left&&x<=overlayRect.right&&y>=overlayRect.top&&y<=overlayRect.bottom};var propTypes={annotation:prop_types_default().object},MeasurementOverlay_MeasurementOverlay=function(props){var annotation=props.annotation,isDisabled=(0,es.d4)((function(state){return selectors.A.isElementDisabled(state,dataElement.A.MEASUREMENT_OVERLAY)})),forceUpdate=function useForceUpdate(){var setValue=_sliced_to_array((0,react.useState)(0),2)[1];return function(){return setValue((function(value){return value+1}))}}(),dispatch=(0,es.wA)(),_useState=_sliced_to_array((0,react.useState)({x:0,y:0}),2),position=_useState[0],setPosition=_useState[1],_useState1=_sliced_to_array((0,react.useState)(!1),2),transparentBackground=_useState1[0],setTransparentBackground=_useState1[1],_useState2=_sliced_to_array((0,react.useState)(!1),2),isCreatingAnnotation=_useState2[0],setIsCreatingAnnotation=_useState2[1],isOpen=(0,es.d4)((function(state){return selectors.A.isElementOpen(state,dataElement.A.MEASUREMENT_OVERLAY)})),activeToolName=(0,es.d4)((function(state){return selectors.A.getActiveToolName(state)})),customMeasurementOverlay=(0,es.d4)((function(state){return selectors.A.getCustomMeasurementOverlay(state)})),overlayRef=(0,react.useRef)(),key=(0,map.c7)(annotation),shouldShowCustomOverlay=function(annot){return!function(annot){return["countMeasurement"].includes((0,map.c7)(annot))}(annot)&&customMeasurementOverlay.some((function(overlay){return overlay.validate(annot)}))},onMouseMove=function(e){var tool=core.A.getTool(activeToolName);if(annotation){var useTransparentBackground,insideRect=isMouseInsideRect(e,overlayRef.current);if(isCreatingAnnotation){var _core_getToolMode_getDrawMode,_core_getToolMode,drawMode=null===(_core_getToolMode_getDrawMode=(_core_getToolMode=core.A.getToolMode()).getDrawMode)||void 0===_core_getToolMode_getDrawMode?void 0:_core_getToolMode_getDrawMode.call(_core_getToolMode);useTransparentBackground=insideRect&&"twoClicks"!==drawMode}else{var annotUnderMouse=core.A.getAnnotationByMouseEvent(e);useTransparentBackground=insideRect&&annotUnderMouse===annotation}setTransparentBackground(useTransparentBackground),forceUpdate()}else shouldShowCustomOverlay(tool.annotation)&&(dispatch(actions.A.openElement(dataElement.A.MEASUREMENT_OVERLAY)),setIsCreatingAnnotation(!0))},onAnnotationChanged=function(annotations,action){"add"===action&&1===annotations.length&&annotations[0]===annotation&&dispatch(actions.A.closeElement(dataElement.A.MEASUREMENT_OVERLAY)),"modify"===action&&1===annotations.length&&annotations[0]===annotation&&forceUpdate()};return(0,react.useEffect)((function(){return core.A.addEventListener("mouseMove",onMouseMove),core.A.addEventListener("annotationChanged",onAnnotationChanged),function(){core.A.removeEventListener("mouseMove",onMouseMove),core.A.removeEventListener("annotationChanged",onAnnotationChanged)}}),[]),isDisabled||!annotation?null:react.createElement(cjs_default(),{cancel:"input",position,onDrag:function(e,param){var x=param.x,y=param.y;return setPosition({x,y})},onStop:function(e,param){var x=param.x,y=param.y;return setPosition({x,y})}},react.createElement("div",{className:classnames_default()({Overlay:!0,MeasurementOverlay:!0,open:isOpen,closed:!isOpen,transparent:transparentBackground}),ref:overlayRef,"data-element":dataElement.A.MEASUREMENT_OVERLAY},function(annot,key){return shouldShowCustomOverlay(annot)?react.createElement(MeasurementOverlay_CustomMeasurementOverlay,function _object_spread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{},ownKeys=Object.keys(source);"function"==typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter((function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable})))),ownKeys.forEach((function(key){_define_property(target,key,source[key])}))}return target}({annotation:annot},customMeasurementOverlay.filter((function(customOverlay){return customOverlay.validate(annot)}))[0])):"countMeasurement"===key?react.createElement(MeasurementOverlay_CountMeasurementOverlay,{annotation:annot}):void 0}(annotation,key)))};MeasurementOverlay_MeasurementOverlay.propTypes=propTypes;const components_MeasurementOverlay_MeasurementOverlay=MeasurementOverlay_MeasurementOverlay;MeasurementOverlay_MeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"MeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!1}}};const components_MeasurementOverlay=components_MeasurementOverlay_MeasurementOverlay;components_MeasurementOverlay_MeasurementOverlay.__docgenInfo={description:"",methods:[],displayName:"MeasurementOverlay",props:{annotation:{description:"",type:{name:"object"},required:!1}}}}}]);