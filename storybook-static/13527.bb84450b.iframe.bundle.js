"use strict";(self.webpackChunkwebviewer_ui=self.webpackChunkwebviewer_ui||[]).push([[13527],{"./node_modules/reselect/dist/reselect.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Mz:()=>createSelector});function assertIsFunction(func,errorMessage="expected a function, instead received "+typeof func){if("function"!=typeof func)throw new TypeError(errorMessage)}var ensureIsArray=item=>Array.isArray(item)?item:[item];function getDependencies(createSelectorArgs){const dependencies=Array.isArray(createSelectorArgs[0])?createSelectorArgs[0]:createSelectorArgs;return function assertIsArrayOfFunctions(array,errorMessage="expected all items to be functions, instead received the following types: "){if(!array.every((item=>"function"==typeof item))){const itemTypes=array.map((item=>"function"==typeof item?`function ${item.name||"unnamed"}()`:typeof item)).join(", ");throw new TypeError(`${errorMessage}[${itemTypes}]`)}}(dependencies,"createSelector expects all input-selectors to be functions, but received the following types: "),dependencies}Symbol(),Object.getPrototypeOf({});var Ref="undefined"!=typeof WeakRef?WeakRef:class{constructor(value){this.value=value}deref(){return this.value}};function weakMapMemoize(func,options={}){let fnNode={s:0,v:void 0,o:null,p:null};const{resultEqualityCheck}=options;let lastResult,resultsCount=0;function memoized(){let cacheNode=fnNode;const{length}=arguments;for(let i=0,l=length;i<l;i++){const arg=arguments[i];if("function"==typeof arg||"object"==typeof arg&&null!==arg){let objectCache=cacheNode.o;null===objectCache&&(cacheNode.o=objectCache=new WeakMap);const objectNode=objectCache.get(arg);void 0===objectNode?(cacheNode={s:0,v:void 0,o:null,p:null},objectCache.set(arg,cacheNode)):cacheNode=objectNode}else{let primitiveCache=cacheNode.p;null===primitiveCache&&(cacheNode.p=primitiveCache=new Map);const primitiveNode=primitiveCache.get(arg);void 0===primitiveNode?(cacheNode={s:0,v:void 0,o:null,p:null},primitiveCache.set(arg,cacheNode)):cacheNode=primitiveNode}}const terminatedNode=cacheNode;let result;if(1===cacheNode.s)result=cacheNode.v;else if(result=func.apply(null,arguments),resultsCount++,resultEqualityCheck){const lastResultValue=lastResult?.deref?.()??lastResult;null!=lastResultValue&&resultEqualityCheck(lastResultValue,result)&&(result=lastResultValue,0!==resultsCount&&resultsCount--);lastResult="object"==typeof result&&null!==result||"function"==typeof result?new Ref(result):result}return terminatedNode.s=1,terminatedNode.v=result,result}return memoized.clearCache=()=>{fnNode={s:0,v:void 0,o:null,p:null},memoized.resetResultsCount()},memoized.resultsCount=()=>resultsCount,memoized.resetResultsCount=()=>{resultsCount=0},memoized}function createSelectorCreator(memoizeOrOptions,...memoizeOptionsFromArgs){const createSelectorCreatorOptions="function"==typeof memoizeOrOptions?{memoize:memoizeOrOptions,memoizeOptions:memoizeOptionsFromArgs}:memoizeOrOptions,createSelector2=(...createSelectorArgs)=>{let lastResult,recomputations=0,dependencyRecomputations=0,directlyPassedOptions={},resultFunc=createSelectorArgs.pop();"object"==typeof resultFunc&&(directlyPassedOptions=resultFunc,resultFunc=createSelectorArgs.pop()),assertIsFunction(resultFunc,`createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`);const combinedOptions={...createSelectorCreatorOptions,...directlyPassedOptions},{memoize,memoizeOptions=[],argsMemoize=weakMapMemoize,argsMemoizeOptions=[],devModeChecks={}}=combinedOptions,finalMemoizeOptions=ensureIsArray(memoizeOptions),finalArgsMemoizeOptions=ensureIsArray(argsMemoizeOptions),dependencies=getDependencies(createSelectorArgs),memoizedResultFunc=memoize((function recomputationWrapper(){return recomputations++,resultFunc.apply(null,arguments)}),...finalMemoizeOptions);const selector=argsMemoize((function dependenciesChecker(){dependencyRecomputations++;const inputSelectorResults=function collectInputSelectorResults(dependencies,inputSelectorArgs){const inputSelectorResults=[],{length}=dependencies;for(let i=0;i<length;i++)inputSelectorResults.push(dependencies[i].apply(null,inputSelectorArgs));return inputSelectorResults}(dependencies,arguments);return lastResult=memoizedResultFunc.apply(null,inputSelectorResults),lastResult}),...finalArgsMemoizeOptions);return Object.assign(selector,{resultFunc,memoizedResultFunc,dependencies,dependencyRecomputations:()=>dependencyRecomputations,resetDependencyRecomputations:()=>{dependencyRecomputations=0},lastResult:()=>lastResult,recomputations:()=>recomputations,resetRecomputations:()=>{recomputations=0},memoize,argsMemoize})};return Object.assign(createSelector2,{withTypes:()=>createSelector2}),createSelector2}var createSelector=createSelectorCreator(weakMapMemoize),createStructuredSelector=Object.assign(((inputSelectorsObject,selectorCreator=createSelector)=>{!function assertIsObject(object,errorMessage="expected an object, instead received "+typeof object){if("object"!=typeof object)throw new TypeError(errorMessage)}(inputSelectorsObject,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof inputSelectorsObject);const inputSelectorKeys=Object.keys(inputSelectorsObject);return selectorCreator(inputSelectorKeys.map((key=>inputSelectorsObject[key])),((...inputSelectorResults)=>inputSelectorResults.reduce(((composition,value,index)=>(composition[inputSelectorKeys[index]]=value,composition)),{})))}),{withTypes:()=>createStructuredSelector})}}]);